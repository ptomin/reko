void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004028C0(word64 rsi, word32 edi, word64 r9, word64 r10, word64 r11, word64 r15, selector fs, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
l0000000000402DFF:
	rax = (uint64) Mem0[0x000000000061A56C:word32]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rcx = Mem0[0x000000000061A570:word64]
	SCZO = cond(eax - 0x00000001)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403BF3
// DataOut: eax r11 rsp
// DataOut (flags): 
// SymbolicIn:

l0000000000403BF3:
	rsi = 0x0000000000413807
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn:

l0000000000402E15:
	SCZO = cond(eax - 0x00000002)
	Z = SCZO (alias)
	rsi = 0x000000000041380F
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rax = 0x000000000041380E
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	branch Test(EQ,Z) l0000000000402E26
// DataOut: r11 rax rsi rsp
// DataOut (flags): 
// SymbolicIn:

l0000000000402E22_1:
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: r11 rsi rsp
// DataOut (flags): 
// SymbolicIn:

l0000000000402E26:
	rdi = Mem0[0x000000000061A610:word64]
	Mem0[rsp:word64] = 0x0000000000000000
	r9 = 0x00000000004138BD
	r8 = 0x00000000004138CD
	rdx = 0x00000000004137FC
	rax = 0x0000000000000000
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(eax)
	C = false
	fn0000000000410B30(al, rdx, rsi, rdi, r11)
	rdi = 0x0000000000000000
	edi = (word32) rdi (alias)
	SZO = cond(edi)
	C = false
	exit(0x0000000000000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004028C0_entry:
// DataOut: edi fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004028C0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rbp = rsi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = (uint64) edi
	ebx = (word32) rbx (alias)
	rsp = fp - 0x00000000000003B8
	rdi = Mem0[rsi:word64]
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	eax = (word32) rax (alias)
	SZO = cond(eax)
	C = false
	fn000000000040D6A0(rdi)
	rsi = 0x0000000000416919
	rdi = 0x0000000000000006
	call setlocale (retsize: 8; depth: 960)
	rsi = 0x000000000041381C
	rdi = 0x0000000000413800
	call bindtextdomain (retsize: 8; depth: 960)
	rdi = 0x0000000000413800
	rax = textdomain(0x0000000000413800)
	rdi = 0x000000000040A200
	Mem0[0x000000000061A580:word32] = 0x00000002
	fn0000000000411EE0()
	rax = 0x0000000000000000
	Mem0[0x000000000061B030:word32] = 0x00000000
	Mem0[0x000000000061B0D0:byte] = 0x01
	Mem0[0x000000000061B180:word64] = 0x0000000000000000
	rax = (uint64) Mem0[0x000000000061A56C:word32]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	Mem0[0x000000000061B190:word64] = 0x0000000000000000
	Mem0[0x000000000061B188:word64] = 0xFFFFFFFFFFFFFFFF
	Mem0[0x000000000061B0F0:byte] = 0x00
	SCZO = cond(eax - 0x00000002)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403203
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040297B:
	SCZO = cond(eax - 0x00000003)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004029AF
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029AF:
	rsi = 0x0000000000000005
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000000
	edi = (word32) rdi (alias)
	SZO = cond(edi)
	C = false
	Mem0[0x000000000061B150:word32] = 0x00000000
	fn000000000040E640(esi, rdi)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402980:
	rax = (uint64) (eax - 0x00000001)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040298A
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040298A:
	rdi = 0x0000000000000001
	call isatty (retsize: 8; depth: 960)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004037EC
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037EC:
	Mem0[0x000000000061B150:word32] = 0x00000001
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040299C:
	Mem0[0x000000000061B150:word32] = 0x00000002
	Mem0[0x000000000061B0F0:byte] = 0x01
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004029C5:
	rdi = 0x000000000041382E
	Mem0[0x000000000061B14C:word32] = 0x00000000
	Mem0[0x000000000061B148:word32] = 0x00000000
	Mem0[0x000000000061B147:byte] = 0x00
	Mem0[0x000000000061B145:byte] = 0x00
	Mem0[0x000000000061B144:byte] = 0x00
	Mem0[0x000000000061B12C:word32] = 0x00000000
	Mem0[0x000000000061B114:byte] = 0x00
	Mem0[0x000000000061B110:word32] = 0x00000001
	Mem0[0x000000000061B10E:byte] = 0x00
	Mem0[0x000000000061B10D:byte] = 0x00
	Mem0[0x000000000061B108:word32] = 0x00000000
	Mem0[0x000000000061B100:word64] = 0x0000000000000000
	Mem0[0x000000000061B0F8:word64] = 0x0000000000000000
	Mem0[0x000000000061B17D:byte] = 0x00
	rax = getenv(0x000000000041382E)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000402A7F
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A50:
	rcx = 0x0000000000000004
	rdx = 0x0000000000416460
	rsi = 0x0000000000416480
	rdi = rax
	rax = fn0000000000409E50(rcx, rdx, rsi, rdi)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(eax & eax)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0000000000403786
// DataOut: al ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000041382E rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403786:
	rdi = r12
	ebx = fn000000000040E930(r11, r15, fs, out rbp, out r9, out r10, out r11, out r15)
	rbx = DPB(rbx, ebx, 0) (alias)
	rdi = 0x0000000000000000
	r12 = rax
	rdx = 0x0000000000000005
	rsi = 0x0000000000415B00
	rax = dcgettext(0x0000000000000000, 0x0000000000415B00, 0x0000000000000005)
	rcx = r12
	rdx = rax
	rsi = 0x0000000000000000
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A6F:
	ax = (int16) al
	rax = DPB(rax, ax, 0) (alias)
	rdi = 0x0000000000000000
	edi = (word32) rdi (alias)
	SZO = cond(edi)
	C = false
	rsi = (uint64) Mem0[0x00416460 + rax * 0x0000000000000004:word32]
	esi = (word32) rsi (alias)
	fn000000000040E640(esi, rdi)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:0x0000000000000004 rdx:<invalid> eax:<invalid> ecx:<invalid> sil:0x80 cl:0x04 -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402A7F:
	rdi = 0x000000000041383C
	Mem0[0x000000000061B0C8:word64] = 0x0000000000000050
	rax = getenv(0x000000000041383C)
	r12 = rax
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	rax = rsp + 0x0000000000000040
	SZO = cond(r12 & r12)
	Z = SZO (alias)
	C = false
	Mem0[rsp + 0x0000000000000020:word64] = rax
	branch Test(EQ,Z) l0000000000402AB1
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:(int16) al eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AA6:
	SCZO = cond(Mem0[r12:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004037B8
// DataOut: ebx fs r10 r11 r12 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037B8:
	r8 = 0x0000000000000000
	rdx = 0x0000000000000000
	edx = (word32) rdx (alias)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = rax
	rdi = r12
	eax = fn0000000000410E90(edx, rsi, rdi, r8, out ebx, out r9)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403A93
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041383C rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> eax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:0x0041383C esi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037D2:
	rax = Mem0[rsp + 0x0000000000000040:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403A93
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A93:
	rdi = r12
	ebx = fn000000000040E930(r11, r15, fs, out rbp, out r9, out r10, out r11, out r15)
	rbx = DPB(rbx, ebx, 0) (alias)
	rdi = 0x0000000000000000
	r12 = rax
	rdx = 0x0000000000000005
	rsi = 0x0000000000415B48
	rax = dcgettext(0x0000000000000000, 0x0000000000415B48, 0x0000000000000005)
	rcx = r12
	rdx = rax
	rsi = 0x0000000000000000
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037E0:
	Mem0[0x000000000061B0C8:word64] = rax
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AB1:
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = 0x0000000000005413
	rdi = 0x0000000000000001
	call ioctl (retsize: 8; depth: 8)
	SCZO = cond(0x00000001)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> ax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ACC:
	eax = (word32) Mem0[rsp + 0x0000000000000042:word16]
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(ax & ax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000402ADD
// DataOut: ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AD6:
	Mem0[0x000000000061B0C8:word64] = rax
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402ADD:
	rdi = 0x0000000000413844
	rax = getenv(0x0000000000413844)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r12 = rax
	Mem0[0x000000000061B0D8:word64] = 0x0000000000000008
	branch Test(EQ,Z) l0000000000402B22
// DataOut: eax ebx fs r10 r11 r15 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402AFA:
	rcx = Mem0[rsp + 0x0000000000000020:word64]
	r8 = 0x0000000000000000
	rdx = 0x0000000000000000
	edx = (word32) rdx (alias)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	eax = fn0000000000410E90(edx, rsi, rdi, r8, out ebx, out r9)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004041BB
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x0000000000413844 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00413844 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041BB:
	rdi = r12
	ebx = fn000000000040E930(r11, r15, fs, out rbp, out r9, out r10, out r11, out r15)
	rbx = DPB(rbx, ebx, 0) (alias)
	rdi = 0x0000000000000000
	r12 = rax
	rdx = 0x0000000000000005
	rsi = 0x0000000000415B88
	rax = dcgettext(0x0000000000000000, 0x0000000000415B88, 0x0000000000000005)
	rcx = r12
	rdx = rax
	rsi = 0x0000000000000000
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B16:
	rax = Mem0[rsp + 0x0000000000000040:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	Mem0[0x000000000061B0D8:word64] = rax
// DataOut: eax ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> r8:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r11:<invalid> r9:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B22:
	r14 = 0x0000000000000000
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	r13 = 0x0000000000000000
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	r12 = 0x0000000000000000
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	SZO = cond(0x00000000)
	C = false
	r8 = rsp + 0x0000000000000038
	r8d = (word32) r8 (alias)
	rcx = 0x0000000000413080
	rdx = 0x0000000000415BC8
	rdx_rax = SEQ(rdx, rax) (alias)
	rsi = rbp
	rdi = (uint64) ebx
	Mem0[rsp + 0x0000000000000038:word32] = 0xFFFFFFFF
	call getopt_long (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040321E
// DataOut: eax ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> ax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040321E:
	SCZO = cond(Mem0[0x000000000061B138:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040398A
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040398A:
	rdi = 0x00000000004138E1
	rax = getenv(0x00000000004138E1)
	rdx = 0x000000000061B138
	r15 = rax
	r15d = (word32) r15 (alias)
	rsi = 0x000000000061B140
	rdi = rax
	ebx = fn000000000040C810(rdx, rdi, r8, out r8, out r9)
	rbx = DPB(rbx, ebx, 0) (alias)
	SZO = cond(r15 & r15)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404531
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404531:
	rdi = 0x00000000004138E4
	rax = getenv(0x00000000004138E4)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004039B2
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404544:
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:0x004138E4 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039B2:
	rax = (uint64) Mem0[0x000000000061B140:word32]
	eax = (word32) rax (alias)
	Mem0[0x000000000061B134:word32] = eax
	rax = Mem0[0x000000000061B138:word64]
	Mem0[0x000000000061A560:word64] = rax
// DataOut: ebx fs r10 r11 r12 r13b r14 r14b r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039CC:
	SZO = cond(r14b & r14b)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l000000000040322C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039D5:
	Mem0[0x000000000061B140:word32] = 0x00000000
	Mem0[0x000000000061B138:word64] = 0x0000000000000400
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:0x40 cl:<invalid> al:<invalid> r12d:<invalid> dx:0xB138 dl:0x38 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040322C:
	rdx = Mem0[0x000000000061B0C8:word64]
	edx = (word32) rdx (alias)
	rax = 0x0000000000000001
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rdx - 0x0000000000000002)
	CZ = SCZO (alias)
	branch Test(UGT,CZ) l00000000004037FB
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004037FB:
	rax = rdx
	rcx = 0x0000000000000003
	rdx = 0x0000000000000000
	rdx_rax = SEQ(rdx, rax) (alias)
	v58 = rdx_rax
	rdx = (uint64) (v58 % 0x0000000000000003)
	rax = (uint64) (v58 /u 0x0000000000000003)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rax)
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:0x01 r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403242:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	Mem0[0x000000000061B020:word64] = rax
	rax = fn000000000040E600(rdi, r8, r11)
	rdi = rax
	Mem0[0x000000000061B0E8:word64] = rax
	eax = fn000000000040E630(rdi)
	SCZO = cond(eax - 0x00000005)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040426C
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040426C:
	rdi = Mem0[0x000000000061B0E8:word64]
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rsi = 0x0000000000000020
	esi = (word32) rsi (alias)
	rsi = fn000000000040E650(edx, esi, rdi)
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403268:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax - 0x00000001)
	CZ = SCZO (alias)
	branch Test(ULE,CZ) l00000000004032A9
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403273:
	r14 = r8 + 0x00000000004138ED
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	rax = rax - 0x0000000000000002
	eax = (word32) Mem0[rax + 0x00000000004138EF:byte]
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004032A9
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403289:
	rdi = Mem0[0x000000000061B0E8:word64]
	r14 = r14 + 0x0000000000000001
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	SCZO = cond(r14)
	esi = (int32) al
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rsi = fn000000000040E650(edx, esi, rdi)
	eax = (word32) Mem0[rsi:byte]
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403289
// DataOut: al ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> sil:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032A9:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040E600(rdi, r8, r11)
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rsi = 0x000000000000003A
	esi = (word32) rsi (alias)
	rdi = rax
	Mem0[0x000000000061B0E0:word64] = rax
	rsi = fn000000000040E650(edx, esi, rdi)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032D2:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004032E2
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032DB:
	Mem0[0x000000000061B130:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032E2:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	eax = (word32) rax (alias)
	rax = (uint64) (eax - 0x00000001)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax - 0x00000001)
	CZ = SCZO (alias)
	branch Test(ULE,CZ) l0000000000403965
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403965:
	SZO = cond(r13b & r13b)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004032F4
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040396E:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040397B:
	Mem0[0x000000000061B148:word32] = 0x00000004
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004032F4:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040380D
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040380D:
	SZO = cond(r12 & r12)
	Z = SZO (alias)
	S = SZO (alias)
	SO = SZO (alias)
	C = false
	SCZO = C (alias)
	CZ = C (alias)
	branch Test(EQ,Z) l00000000004045C6
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045C6:
	rdi = 0x00000000004138F5
	rax = getenv(0x00000000004138F5)
	r12 = rax
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	S = SZO (alias)
	SO = SZO (alias)
	C = false
	SCZO = C (alias)
	CZ = C (alias)
	rax = 0x0000000000413827
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	branch Test(NE,Z) l00000000004045DF
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DB_1:
	r12 = 0x0000000000413827
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045DF:
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x00000000004138F5 rax:0x0000000000413827 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00413827 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x3827 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:0x27 r12d:<invalid> dx:0x0001 dl:0x01 edi:0x004138F5 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403816:
	r14 = 0x0000000000412CA0
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	r13 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383E:
	rsi = r12
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000412CA0
	edi = (word32) rdi (alias)
	rcx = 0x0000000000000006
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847:
	branch rcx == 0x0000000000000000 l0000000000403849
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403847_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	SZO = SCZO (alias)
	Z = SCZO (alias)
	SO = SCZO (alias)
	C = SCZO (alias)
	S = SCZO (alias)
	CZ = SCZO (alias)
	rsi = rsi + 0x0000000000000001
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = rdi + 0x0000000000000001
	edi = (word32) rdi (alias)
	rcx = rcx - 0x0000000000000001
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	branch Test(NE,Z) l0000000000403847
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403849:
	branch Test(EQ,Z) l0000000000403828
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403828:
	rdi = 0x0000000000000002
	rax = fn000000000040AB70(rax, out rsi)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403301
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040383A:
	r12 = r12 + 0x0000000000000006
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	SCZO = cond(r12)
	SZO = SCZO (alias)
	Z = SCZO (alias)
	SO = SCZO (alias)
	C = SCZO (alias)
	S = SCZO (alias)
	CZ = SCZO (alias)
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040384B:
	SCZO = cond(Mem0[r12:byte] - 0x2B)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004043D9
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403856:
	rcx = 0x0000000000000004
	rdx = 0x00000000004136F0
	rsi = 0x0000000000413700
	rdi = r12
	rax = fn0000000000409E50(rcx, rdx, rsi, rdi)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0000000000404564
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404564:
	rdx = rax
	rsi = r12
	rdi = 0x000000000041391D
	rbx = fn0000000000409F80(rdx, r11, r15, fs, out rsp, out rbp, out r9, out r10, out r11, out r15)
	rbx = Mem0[0x000000000061A650:word64]
	rdx = 0x0000000000000005
	rsi = 0x0000000000413928
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = dcgettext(0x0000000000000000, 0x0000000000413928, 0x0000000000000005)
	rsi = rbx
	rdi = rax
	rbx = 0x0000000000413700
	ebx = (word32) rbx (alias)
	eax = fputs_unlocked(rdi, rsi)
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040459C:
	rcx = Mem0[rbx:word64]
	SZO = cond(rcx & rcx)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004031D6
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031D6:
	rbx = Mem0[0x000000000061A650:word64]
	ebx = (word32) rbx (alias)
	rsi = 0x0000000000415BF8
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rax = dcgettext(0x0000000000000000, 0x0000000000415BF8, 0x0000000000000005)
	rsi = rbx
	rdi = rax
	eax = fputs_unlocked(rdi, rsi)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045A8:
	rdi = Mem0[0x000000000061A650:word64]
	rdx = 0x000000000041393E
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	rbx = rbx + 0x0000000000000008
	ebx = (word32) rbx (alias)
	SCZO = cond(rbx)
	eax = __fprintf_chk(rdi, 0x0000000000000001, 0x000000000041393E)
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> r15:<invalid> cl:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r12d:<invalid> bpl:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403876:
	SCZO = cond(rax - 0x0000000000000001)
	SZO = SCZO (alias)
	Z = SCZO (alias)
	SO = SCZO (alias)
	C = SCZO (alias)
	S = SCZO (alias)
	CZ = SCZO (alias)
	branch Test(EQ,Z) l0000000000404549
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404549:
	Mem0[0x000000000061A3D8:word64] = 0x0000000000413966
	Mem0[0x000000000061A3D0:word64] = 0x0000000000413966
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403880:
	branch Test(LE,SZO) l0000000000404465
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404465:
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040446E:
	Mem0[0x000000000061A3D8:word64] = 0x000000000041394E
	Mem0[0x000000000061A3D0:word64] = 0x000000000041394E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403886:
	SCZO = cond(rax - 0x0000000000000002)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004045F3
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045F3:
	Mem0[0x000000000061A3D0:word64] = 0x0000000000413975
	Mem0[0x000000000061A3D8:word64] = 0x0000000000413969
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403890:
	SCZO = cond(rax - 0x0000000000000003)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004038A8
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403896:
	rdi = 0x0000000000000002
	rax = fn000000000040AB70(rax, out rsi)
	al = (byte) rax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l000000000040460E
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:0x0000000000000004 sil:0x00 esi:0x00413700 ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040460E:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdx = 0x0000000000000002
	rdi = 0x0000000000000000
	rax = dcgettext(0x0000000000000000, rsi, 0x0000000000000002)
	rsi = Mem0[0x000000000061A3D8:word64]
	rdx = 0x0000000000000002
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	Mem0[0x000000000061A3D0:word64] = rax
	rax = dcgettext(0x0000000000000000, rsi, 0x0000000000000002)
	Mem0[0x000000000061A3D8:word64] = rax
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x00 esi:0x00413700 ecx:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:0x004136F0 ebp:<invalid> cl:0x04 r12d:<invalid> dx:0x36F0 dl:0xF0 edi:0x00000002 r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403301:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	Z = SCZO (alias)
	r12 = (uint64) Mem0[0x000000000061A620:word32]
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	branch Test(NE,Z) l0000000000403AC5
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AC5:
	rdi = 0x000000000041397F
	rax = getenv(0x000000000041397F)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	Mem0[rsp + 0x0000000000000038:word64] = rax
	branch Test(EQ,Z) l0000000000403AE2
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AD9:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004044FA
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044FA:
	rdi = rax
	Mem0[rsp + 0x0000000000000030:word16] = 0x3F3F
	Mem0[rsp + 0x0000000000000032:byte] = 0x00
	r13 = 0x0000000000000000
	r13d = (word32) r13 (alias)
	SZO = cond(r13d)
	C = false
	rax = fn0000000000410E30(rdi, out rsi)
	rdx = 0x0000000000000000
	edx = (word32) rdx (alias)
	rdx_rax = SEQ(rdx, rax) (alias)
	Mem0[0x000000000061B118:word64] = rax
	Mem0[rsp + 0x0000000000000040:word64] = rax
	SCZO = cond(0xFFFFFFFB)
	CZ = SCZO (alias)
	branch Test(UGT,CZ) l0000000000402985
// DataOut: edx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404528:
	rax = (uint64) edx
	call Mem0[0x00412BC8 + rax * 0x0000000000000008:word64] (retsize: 4; depth: 4)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AE2:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403315
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AEF:
	rdi = 0x000000000000000D
	edi = (word32) rdi (alias)
	eax = fn0000000000404CD0(edi, out rsi)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:0x000000000041397F rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0041397F r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403AFD:
	rdi = 0x000000000000000E
	edi = (word32) rdi (alias)
	eax = fn0000000000404CD0(edi, out rsi)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403B14
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000D r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B0B:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403B2B
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B14:
	rdi = 0x000000000000000C
	edi = (word32) rdi (alias)
	eax = fn0000000000404CD0(edi, out rsi)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000E r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B22:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403B32
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x0000000C r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B2B:
	Mem0[0x000000000061B115:byte] = 0x01
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B32:
	rdi = 0x0000000000000001
	call tcgetpgrp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	S = SZO (alias)
	C = false
	branch Test(SG,S) l0000000000403315
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B44:
	rdi = 0x000000000061B040
	r13 = 0x0000000000000000
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SZO = cond(r13d)
	C = false
	call sigemptyset (retsize: 8; depth: 8)
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B51:
	r14 = (uint64) Mem0[r13 + 0x0000000000412CC0:word32]
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = (uint64) r14d
	call sigaction (retsize: 8; depth: 8)
	SCZO = cond(Mem0[rsp + 0x0000000000000040:word64] - 0x0000000000000001)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403B7C
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14d r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B6F:
	rsi = (uint64) r14d
	rdi = 0x000000000061B040
	call sigaddset (retsize: 8; depth: 8)
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B7C:
	r13 = r13 + 0x0000000000000004
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SCZO = cond(r13 - 0x0000000000000030)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403B51
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B86:
	rdi = rsp + 0x0000000000000048
	edi = (word32) rdi (alias)
	rsi = 0x000000000061B040
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rcx = 0x0000000000000020
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95:
	branch rcx == 0x0000000000000000 l0000000000403B97
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B97:
	Mem0[rsp + 0x00000000000000C8:word32] = 0x10000000
	r13b = 0x00
	r13 = DPB(r13, r13b, 0) (alias)
	r13d = DPB(r13d, r13b, 0) (alias)
	SZO = cond(0x00)
	C = false
	r14 = 0x00000000004049B0
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BAB:
	r15 = (uint64) Mem0[r13 + 0x0000000000412CC0:word32]
	r15d = (word32) r15 (alias)
	rdi = 0x000000000061B040
	rsi = (uint64) r15d
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	call sigismember (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403BE4
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BC3:
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SCZO = cond(r15d - 0x00000014)
	Z = SCZO (alias)
	rax = 0x00000000004057F0
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	branch Test(EQ,Z) l0000000000403BD5
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD1_1:
	rax = 0x00000000004049B0
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r15d r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x00000000004057F0 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x004057F0 r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:0xF0 r13b:<invalid> r15:<invalid> ax:0x57F0 r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BD5:
	rdi = (uint64) r15d
	rdx = 0x0000000000000000
	rdx_rax = SEQ(rdx, rax) (alias)
	SZO = cond(0x00000000)
	C = false
	Mem0[rsp + 0x0000000000000040:word64] = rax
	call sigaction (retsize: 8; depth: 8)
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BE4:
	r13 = r13 + 0x0000000000000004
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SCZO = cond(r13 - 0x0000000000000030)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403BAB
// DataOut: eax ebx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403BEE:
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x00000000004049B0 r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> r13b:<invalid> r15:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403B95_1:
	v55 = Mem0[rsi:word32]
	Mem0[rdi:word32] = v55
	rsi = rsi + 0x0000000000000004
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = rdi + 0x0000000000000004
	edi = (word32) rdi (alias)
	rcx = rcx - 0x0000000000000001
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
// DataOut: eax ebx fs r10 r11 r12 r12d r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> al:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403315:
	SCZO = cond(Mem0[0x000000000061B110:word32] - 0x00000001)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403A39
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A39:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	Z = SCZO (alias)
	rax = 0x0000000000000002
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	branch Test(NE,Z) l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A47:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403A5F
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x02 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A50:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000001)
	C = SCZO (alias)
	rax = (uint64) (0x00000000 - C)
	eax = (word32) rax (alias)
	rax = (uint64) (eax & 0xFFFFFFFE)
	eax = (word32) rax (alias)
	rax = (uint64) (eax + 0x00000004)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax)
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000002 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000002 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0002 r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x02 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A5F:
	Mem0[0x000000000061B110:word32] = eax
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403322:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004039EF
// DataOut: ebx fs r10 r11 r12 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004039EF:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	r8 = 0x00000000004049D0
	rcx = 0x0000000000404990
	rdx = 0x0000000000404980
	rdi = 0x000000000000001E
	rax = fn000000000040B400(rcx, rdx, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out r9, out xmm0, out xmm1, out xmm2, out xmm3)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	Mem0[0x000000000061B1C8:word64] = rax
	branch Test(EQ,Z) l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r12d r14 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403A1B:
	r8 = 0x00000000004021F0
	r8d = (word32) r8 (alias)
	rcx = 0x0000000000402640
	rdx = 0x0000000000000000
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SZO = cond(0x00000000)
	C = false
	rdi = 0x000000000061AF00
	call _obstack_begin (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:0x00000000AAAAAAAB r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00404980 ebp:<invalid> ecx:0x00404990 cl:0x90 r12d:<invalid> dx:0x4980 dl:0x80 edi:0x0000001E r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040332F:
	rax = (uint64) Mem0[0x000000000061B148:word32]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax - 0x00000004)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040377A
// DataOut: eax ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040333E:
	SCZO = cond(eax - 0x00000002)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403347:
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403354:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403361:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l000000000040377A
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040377A:
	Mem0[0x000000000061B0C1:byte] = 0x01
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040336E:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Z = SCZO (alias)
	Mem0[0x000000000061B0C1:byte] = 0x00
	rax = 0x0000000000000001
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	branch Test(NE,Z) l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403383:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040338C:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000000)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403395:
	SCZO = cond(Mem0[0x000000000061B10C:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004033A0
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:0x0000000000000001 rsi:<invalid> r12:<invalid> rdx:<invalid> eax:0x00000001 r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:0x0001 r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:0x01 edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040339E:
	rax = 0x0000000000000000
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(0x00000000)
	C = false
// DataOut: al ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033A0:
	Mem0[0x000000000061B0C0:byte] = al
	v37 = Mem0[0x000000000061B0C0:byte] & 0x01
	Mem0[0x000000000061B0C0:byte] = v37
	SZO = cond(Mem0[0x000000000061B0C0:byte])
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004033E8
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033B6:
	r8 = 0x00000000004021F0
	rcx = 0x0000000000402640
	rdx = 0x0000000000000000
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x000000000061AFC0
	call _obstack_begin (retsize: 8; depth: 8)
	r8 = 0x00000000004021F0
	r8d = (word32) r8 (alias)
	rcx = 0x0000000000402640
	rdx = 0x0000000000000000
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SZO = cond(0x00000000)
	C = false
	rdi = 0x000000000061AF60
	call _obstack_begin (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r12d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004033E8:
	r13 = (uint64) ebx
	r13d = (word32) r13 (alias)
	rdi = 0x0000000000004B00
	Mem0[0x000000000061B1B8:word64] = 0x0000000000000064
	r13 = (uint64) (r13d - r12d)
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SCZO = cond(r13d)
	rax = fn0000000000410C40(rsi, rdi)
	Mem0[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem0[0x000000000061B1C0:word64] = rax
	fn0000000000404DD0()
	SZO = cond(r13d & r13d)
	C = false
	branch Test(LE,SZO) l00000000004042A0
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042A0:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004043A5
// DataOut: fs r10 r11 r13d r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043A5:
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000413990
	rsi = fn0000000000404D20(edx, rsi, rdi, r11)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042AD:
	rcx = 0x0000000000416919
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rsi = 0x0000000000000003
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000413990
	rax = fn0000000000407EA0(rcx, edx, rsi, rdi, r8, r10, r11, r14, r15, fs, out ebx, out rsp, out rbp, out rsi, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403423:
	rax = (int64) r12d
	rbp = rbp + 0x0000000000000000 + rax * 0x0000000000000008
	ebp = (word32) rbp (alias)
// DataOut: fs r10 r11 r12d r14 r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:0x00004B00 r13b:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040342B:
	rdi = Mem0[rbp + 0x0000000000000000:word64]
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	r12 = (uint64) (r12d + 0x00000001)
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	rcx = 0x0000000000416919
	rdx = 0x0000000000000001
	edx = (word32) rdx (alias)
	rbp = rbp + 0x0000000000000008
	ebp = (word32) rbp (alias)
	SCZO = cond(rbp)
	rax = fn0000000000407EA0(rcx, edx, rsi, rdi, r8, r10, r11, r14, r15, fs, out ebx, out rsp, out rbp, out rsi, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	SCZO = cond(ebx - r12d)
	SZO = SCZO (alias)
	branch Test(GT,SZO) l000000000040342B
// DataOut: fs r10 r11 r12d r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040344D:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000404200
// DataOut: fs r10 r11 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404200:
	rsi = fn0000000000404E80(rsi, r11, r15, out r8, out r12, out r13, out r14, out r15)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000404454
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404454:
	rsi = 0x0000000000000001
	sil = (byte) rsi (alias)
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = fn0000000000405090(sil, rdi, r11)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404212:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040345B
// DataOut: fs r10 r11 r13 r13d r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404220:
	eax = fn00000000004079F0(out rsp)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SCZO = cond(Mem0[0x000000000061B190:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004044B5
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044B5:
	Mem0[rsp + 0x0000000000000018:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404233:
	rdi = Mem0[0x000000000061A610:word64]
	edi = (word32) rdi (alias)
	rax = Mem0[rdi + 0x0000000000000028:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	C = SCZO (alias)
	branch Test(UGE,C) l00000000004044A3
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044A3:
	rsi = 0x000000000000000A
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	call __overflow (retsize: 8; depth: 8)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404248:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404253:
	rax = Mem0[0x000000000061B190:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	v39 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	Mem0[rsp + 0x0000000000000018:word64] = rax
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> edx:<invalid> ax:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040345B:
	rax = Mem0[0x000000000061B190:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	r13 = (uint64) (r13d - 0x00000001)
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SCZO = cond(r13d)
	SZO = SCZO (alias)
	Mem0[rsp + 0x0000000000000018:word64] = rax
	branch Test(GT,SZO) l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040346D:
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404385:
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040438E:
	SCZO = cond(Mem0[rax + 0x0000000000000018:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004034D2
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404399:
	Mem0[0x000000000061B0D0:byte] = 0x00
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> r11d:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034D2:
	SCZO = cond(Mem0[rsp + 0x0000000000000018:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004040B5
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040B5:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000404152
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040C2:
	SCZO = cond(Mem0[0x000000000061B128:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004040ED
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040CB:
	SCZO = cond(Mem0[0x000000000061A3E0:word64] - 0x0000000000000002)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004042CB
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042CB:
	rdi = Mem0[0x000000000061A3E8:word64]
	rdx = 0x0000000000000002
	rsi = 0x00000000004139E1
	eax = memcmp(rdi, 0x00000000004139E1, 0x0000000000000002)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042E9:
	SCZO = cond(Mem0[0x000000000061A3F0:word64] - 0x0000000000000001)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004042F7:
	rax = Mem0[0x000000000061A3F8:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(Mem0[rax:byte] - 0x6D)
	Z = SCZO (alias)
	branch Test(NE,Z) l00000000004040D9
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404307:
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:0x00000000004139E1 r12:<invalid> rdx:0x0000000000000002 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:0xE1 esi:0x004139E1 cl:<invalid> al:<invalid> dl:0x02 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000002 ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:0x0002 r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040D9:
	rdi = 0x000000000061A3E0
	fn0000000000406440(rdi)
	rdi = 0x000000000061A3F0
	fn0000000000406440(rdi)
// DataOut: eax r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004040ED:
	rdi = Mem0[0x000000000061A610:word64]
	rbx = 0x0000000000412CC0
	ebx = (word32) rbx (alias)
	call fflush_unlocked (retsize: 8; depth: 8)
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040410D:
	rbp = (uint64) Mem0[rbx:word32]
	ebp = (word32) rbp (alias)
	rdi = 0x000000000061B040
	rsi = (uint64) ebp
	call sigismember (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404100
// DataOut: eax ebp r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040411F:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = (uint64) ebp
	rax = signal(rdi, 0x0000000000000000)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404100:
	rbx = rbx + 0x0000000000000004
	ebx = (word32) rbx (alias)
	SCZO = cond(rbx - 0x0000000000412CF0)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040412A
// DataOut: eax r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040412A:
	rbx = (uint64) Mem0[0x000000000061B034:word32]
	ebx = (word32) rbx (alias)
	SZO = cond(ebx & ebx)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404143
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404134:
	rdi = 0x0000000000000013
	call raise (retsize: 8; depth: 8)
	rbx = (uint64) (ebx - 0x00000001)
	ebx = (word32) rbx (alias)
	SCZO = cond(ebx)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000404134
// DataOut: ebx r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404143:
	rdi = (uint64) Mem0[0x000000000061B038:word32]
	edi = (word32) rdi (alias)
	SZO = cond(edi & edi)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404152
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040414D:
	call raise (retsize: 8; depth: 8)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404152:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l000000000040430C
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040430C:
	rsi = 0x000000000061AFC0
	rdi = 0x00000000004139E4
	fn0000000000405630(rsi, rdi)
	rsi = 0x000000000061AF60
	rdi = 0x00000000004139EE
	fn0000000000405630(rsi, rdi)
	rdi = Mem0[0x000000000061B0E8:word64]
	eax = fn000000000040E630(rdi)
	rax = (uint64) eax
	rsi = 0x0000000000415D40
	rdi = 0x0000000000000001
	rdx = Mem0[0x00416480 + rax * 0x0000000000000008:word64]
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __printf_chk(0x0000000000000001, 0x0000000000415D40)
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040415F:
	rbx = Mem0[0x000000000061B1C8:word64]
	ebx = (word32) rbx (alias)
	SZO = cond(rbx & rbx)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004041F5
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040416F:
	rdi = rbx
	rax = fn000000000040AFB0(rdi)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004041ED
// DataOut: r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041ED:
	rdi = rbx
	fn000000000040B640(rdi, r13, r15)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004041F5:
	rdi = (uint64) Mem0[0x000000000061B030:word32]
	exit(rdi)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040417C:
	rcx = 0x0000000000412CA7
	rdx = 0x00000000000005DC
	rsi = 0x0000000000413736
	rdi = 0x0000000000415D68
	__assert_fail(0x0000000000415D68, 0x0000000000413736, 0x00000000000005DC, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	SCZO = cond(Mem0[0x000000000061B1C8:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	rax = Mem0[rcx + 0x0000000000000018:word64]
	Mem0[0x000000000061B190:word64] = rax
	branch Test(EQ,Z) l0000000000403FB5
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FB5:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r14 = Mem0[r8:word64]
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
// DataOut: fs r10 r11 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034FC:
	r14 = Mem0[r9:word64]
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	SZO = cond(r14 & r14)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403FC2
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FC2:
	rax = Mem0[0x000000000061AF18:word64]
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rdx = rax
	rdx = rdx - Mem0[0x000000000061AF10:word64]
	edx = (word32) rdx (alias)
	rdx_rax = SEQ(rdx, rax) (alias)
	SCZO = cond(edx - 0x0000000F)
	CZ = SCZO (alias)
	branch Test(ULE,CZ) l00000000004044C3
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044C3:
	rcx = 0x0000000000412C38
	rdx = 0x00000000000003D5
	rsi = 0x0000000000413736
	rdi = 0x0000000000415C58
	__assert_fail(0x0000000000415C58, 0x0000000000413736, 0x00000000000003D5, 0x0000000000412C38)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FDC:
	rdx = Mem0[0x000000000061AF20:word64]
	rdx = rdx - rax
	rdx_rax = SEQ(rdx, rax) (alias)
	SCZO = cond(rdx - 0xFFFFFFFFFFFFFFF0)
	SO = SCZO (alias)
	branch Test(GE,SO) l0000000000404002
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403FEC:
	rsi = 0x00000000FFFFFFF0
	rdi = 0x000000000061AF00
	call _obstack_newchunk (retsize: 8; depth: 8)
	rax = Mem0[0x000000000061AF18:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: fs r11 r13 r15 r8 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404002:
	rdx = rax - 0x0000000000000010
	rsi = Mem0[rsp + 0x0000000000000020:word64]
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = Mem0[0x000000000061B1C8:word64]
	Mem0[0x000000000061AF18:word64] = rdx
	rdx = Mem0[rax - 0x0000000000000010:word64]
	rax = Mem0[rax - 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000040:word64] = rdx
	Mem0[rsp + 0x0000000000000048:word64] = rax
	rax = fn000000000040BB90(rax, rsi, rdi, r8, r11, r15, xmm0, xmm1, xmm2, xmm3, out rsi, out r8, out r9, out r10, out xmm0, out xmm1, out xmm2, out xmm3)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404287
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404287:
	rcx = 0x0000000000412CA7
	rdx = 0x000000000000059D
	rsi = 0x0000000000413736
	rdi = 0x0000000000413992
	__assert_fail(0x0000000000413992, 0x0000000000413736, 0x000000000000059D, 0x0000000000412CA7)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404039:
	rdi = rax
	free(rdi)
	rbx = Mem0[rsp + 0x0000000000000018:word64]
	rdi = Mem0[rbx:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x0000000000000008:word64]
	free(rdi)
	rdi = rbx
	free(rdi)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403508:
	rax = Mem0[rsp + 0x0000000000000018:word64]
	ecx = (word32) Mem0[rax + 0x0000000000000010:byte]
	cl = (byte) ecx (alias)
	rbx = Mem0[rax + 0x0000000000000008:word64]
	ebx = (word32) rbx (alias)
	Mem0[rsp + 0x000000000000002F:byte] = cl
	rax = __errno_location()
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rdi = r14
	Mem0[rax:word32] = 0x00000000
	r12 = rax
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	call opendir (retsize: 8; depth: 8)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r13 = rax
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	branch Test(EQ,Z) l0000000000404195
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> ecx:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404195:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413998
	rax = dcgettext(0x0000000000000000, 0x0000000000413998, 0x0000000000000005)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040353B:
	SCZO = cond(Mem0[0x000000000061B1C8:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004035FF
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403549:
	rdi = rax
	call dirfd (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	S = SZO (alias)
	C = false
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	branch Test(SG,S) l0000000000403E95
// DataOut: eax ebx fs r11 r12 r13 r14 r15 r8 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E95:
	rsi = r14
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	rax = (uint64) (eax >>u 0x0000001F)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040355E:
	rsi = (uint64) eax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000001
	call __fxstat (retsize: 8; depth: 8)
	rax = (uint64) (eax >>u 0x0000001F)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax)
// DataOut: al ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040356D:
	SZO = cond(al & al)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403478
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403478:
	rdx = 0x0000000000000005
	rsi = 0x0000000000415CE8
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = dcgettext(0x0000000000000000, 0x0000000000415CE8, 0x0000000000000005)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	rdi = r13
	call closedir (retsize: 8; depth: 8)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403575:
	rcx = Mem0[rsp + 0x0000000000000048:word64]
	rdx = Mem0[rsp + 0x0000000000000040:word64]
	rdi = 0x0000000000000010
	Mem0[rsp + 0x0000000000000010:word64] = rcx
	Mem0[rsp + 0x0000000000000008:word64] = rdx
	rax = fn0000000000410C40(rsi, rdi)
	rcx = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000008:word64]
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = Mem0[0x000000000061B1C8:word64]
	rbp = rax
	ebp = (word32) rbp (alias)
	Mem0[rax:word64] = rcx
	Mem0[rax + 0x0000000000000008:word64] = rdx
	rax = fn000000000040BB50(rax, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out rsi, out r8, out r9, out r10, out xmm0, out xmm1, out xmm2, out xmm3)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l00000000004043BB
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043BB:
	fn0000000000410E50()
	r8 = Mem0[0x000000000061A640:word64]
	r8d = (word32) r8 (alias)
	rsi = (uint64) Mem0[rsp + 0x0000000000000038:word32]
	esi = (word32) rsi (alias)
	rcx = 0x0000000000413080
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = (uint64) eax
	edi = (word32) rdi (alias)
	fn00000000004112D0(rcx, esi, edi)
// DataOut: ebx fs r10 r11 r12 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r15d:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r8b:<invalid> r8d:<invalid> r10:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> ah:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043D9:
	r12 = r12 + 0x0000000000000001
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	rsi = 0x000000000000000A
	rdi = r12
	rax = strchr(rdi, 0x000000000000000A)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	r14 = rax
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	branch Test(EQ,Z) l000000000040444F
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:0x0000000000412CA0 r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040444F:
	r13 = r12
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004043F2:
	r13 = r8 + 0x0000000000000001
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	rsi = 0x000000000000000A
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = r13
	rax = strchr(rdi, 0x000000000000000A)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404438
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r13:0x0000000000000006 r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404408:
	rdi = r12
	rax = fn000000000040EC10(r11, r15, fs, out rbx, out rbp, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000005
	r15 = rax
	r15d = (word32) r15 (alias)
	rsi = 0x0000000000413900
	rdi = 0x0000000000000000
	rax = dcgettext(0x0000000000000000, 0x0000000000413900, 0x0000000000000005)
	rcx = r15
	rdx = rax
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000002
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x000000000000000A rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> eax:<invalid> r8:<invalid> rcx:<invalid> sil:0x0A esi:0x0000000A ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> al:<invalid> edx:0x00000001 ebp:<invalid> ecx:<invalid> cl:<invalid> r12d:<invalid> dx:0x0001 dl:0x01 edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404438:
	Mem0[rsi:byte] = 0x00
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040443C:
	Mem0[0x000000000061A3D0:word64] = r12
	Mem0[0x000000000061A3D8:word64] = r13
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038A8:
	rdi = Mem0[0x000000000061A3D0:word64]
	rsi = 0x0000000000413766
	rax = strstr(rdi, 0x0000000000413766)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000404484
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> r12d:<invalid> ecx:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404484:
	rdi = Mem0[0x000000000061A3D8:word64]
	rsi = 0x0000000000413766
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rax = strstr(rdi, 0x0000000000413766)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l00000000004038C2
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040449E:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038C2:
	Mem0[0x000000000061A748:word64] = 0x0000000000000005
// DataOut: ebx fs r10 r11 r15 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:0x0000000000413766 rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:0x66 esi:0x00413766 ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038CD:
	r14 = Mem0[0x000000000061A748:word64]
	r14d = (word32) r14 (alias)
	r14b = (byte) r14 (alias)
	r13 = 0x000000000061A760
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	Mem0[0x000000000061A748:word64] = 0x0000000000000000
	r12 = 0x000000000002000E
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 rax rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004038EB:
	rdi = (uint64) r12d
	Mem0[rsp + 0x0000000000000040:word64] = r14
	call nl_langinfo (retsize: 8; depth: 8)
	rcx = Mem0[rsp + 0x0000000000000020:word64]
	r9 = 0x0000000000000000
	r9d = (word32) r9 (alias)
	r8 = 0x0000000000000000
	r8d = (word32) r8 (alias)
	SZO = cond(r8d)
	C = false
	rdx = 0x00000000000000A1
	rsi = r13
	rdi = rax
	rsi = fn000000000040CDC0(rcx, rdx, rsi, rdi, r8d, r9d)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SCZO = cond(0xFFFFFFFFFFFFFF60)
	CZ = SCZO (alias)
	branch Test(UGT,CZ) l0000000000404356
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> ax:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404356:
	Mem0[0x000000000061A748:word64] = 0x0000000000000000
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040391F:
	rax = Mem0[rsp + 0x0000000000000040:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(Mem0[0x000000000061A748:word64] - rax)
	C = SCZO (alias)
	branch Test(ULT,C) l0000000000403933
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040392B_1:
	rax = Mem0[0x000000000061A748:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403933:
	r12 = (uint64) (r12d + 0x00000001)
	r12d = (word32) r12 (alias)
	r12b = (byte) r12 (alias)
	r13 = r13 + 161
	r13d = (word32) r13 (alias)
	r13b = (byte) r13 (alias)
	SCZO = cond(r12d - 0x0002001A)
	Z = SCZO (alias)
	Mem0[0x000000000061A748:word64] = rax
	branch Test(NE,Z) l00000000004038EB
// DataOut: ebx fs r10 r11 r12d r13 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040394E:
	SCZO = cond(rax - r14)
	C = SCZO (alias)
	branch Test(ULT,C) l00000000004038CD
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403957:
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403301
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403960:
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404361:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000415C30
	rax = dcgettext(0x0000000000000000, 0x0000000000415C30, 0x0000000000000005)
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdx = rax
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
// DataOut: ebx fs r10 r11 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r12:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> rsp:<invalid> r15:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ax:<invalid> sil:<invalid> esi:<invalid> ecx:<invalid> r12d:<invalid> edx:0x000000A1 dx:0x00A1 dl:0xA1 edi:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035BF:
	SCZO = cond(rbp - rax)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403EE2
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EE2:
	rdi = rbp
	free(rdi)
	rdi = r14
	rbx = fn000000000040EAB0(r11, r15, fs, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000005
	rbx = rax
	rsi = 0x0000000000415D10
	rdi = 0x0000000000000000
	rax = dcgettext(0x0000000000000000, 0x0000000000415D10, 0x0000000000000005)
	rcx = rbx
	rdx = rax
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	call error (retsize: 8; depth: 8)
	rdi = r13
	call closedir (retsize: 8; depth: 8)
	Mem0[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035C8:
	rax = Mem0[0x000000000061AF18:word64]
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rdx = Mem0[0x000000000061AF20:word64]
	rdx = rdx - rax
	rdx_rax = SEQ(rdx, rax) (alias)
	SCZO = cond(rdx - 0x000000000000000F)
	SZO = SCZO (alias)
	branch Test(LE,SZO) l0000000000404064
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000404064:
	rsi = 0x0000000000000010
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x000000000061AF00
	call _obstack_newchunk (retsize: 8; depth: 8)
	rax = Mem0[0x000000000061AF18:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035E3:
	rdx = rax + 0x0000000000000010
	Mem0[0x000000000061AF18:word64] = rdx
	rdx = Mem0[rsp + 0x0000000000000040:word64]
	Mem0[rax + 0x0000000000000008:word64] = rdx
	rdx = Mem0[rsp + 0x0000000000000048:word64]
	Mem0[rax:word64] = rdx
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004035FF:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403615
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403608:
	SCZO = cond(Mem0[0x000000000061B0D0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004036D6
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403615:
	SCZO = cond(Mem0[0x000000000061A3C0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403646
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040361E:
	rdi = Mem0[0x000000000061A610:word64]
	edi = (word32) rdi (alias)
	rax = Mem0[rdi + 0x0000000000000028:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	C = SCZO (alias)
	branch Test(UGE,C) l00000000004045E4
// DataOut: fs r11 r13 r14 r15 rax rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004045E4:
	rsi = 0x000000000000000A
	call __overflow (retsize: 8; depth: 8)
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403633:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040363E:
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403646:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	Mem0[0x000000000061A3C0:byte] = 0x00
	branch Test(NE,Z) l0000000000403F2E
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F2E:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v44 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v44
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l000000000040365A
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F5E:
	rax = Mem0[0x000000000061AF78:word64]
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rdx = rax + 0x0000000000000008
	rdx_rax = SEQ(rdx, rax) (alias)
	SCZO = cond(Mem0[0x000000000061AF80:word64] - rdx)
	C = SCZO (alias)
	branch Test(ULT,C) l000000000040407F
// DataOut: fs r11 r13 r14 r15 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040407F:
	rsi = 0x0000000000000008
	rdi = 0x000000000061AF60
	call _obstack_newchunk (retsize: 8; depth: 8)
	rax = Mem0[0x000000000061AF78:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: fs r11 r13 r14 r15 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F76:
	rdx = Mem0[0x000000000061B018:word64]
	Mem0[rax:word64] = rdx
	v45 = Mem0[0x000000000061AF78:word64] + 0x0000000000000008
	Mem0[0x000000000061AF78:word64] = v45
	SCZO = cond(v45)
// DataOut: fs r11 r13 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040365A:
	SZO = cond(rbx & rbx)
	Z = SZO (alias)
	C = false
	rdx = Mem0[0x000000000061B0E0:word64]
	edx = (word32) rdx (alias)
	rdx_rax = SEQ(rdx, rax) (alias)
	rdi = Mem0[0x000000000061A610:word64]
	edi = (word32) rdi (alias)
	branch Test(NE,Z) l000000000040366F
// DataOut: fs r11 r13 r14 r15 rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366B_1:
	rbx = r14
	ebx = (word32) rbx (alias)
// DataOut: fs r11 r13 r14 r15 rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040366F:
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rbx
	rax = fn00000000004052D0(rcx, rdx, rsi, rdi, r11, fs, out r8, out r9, out r10, out r11, out r12b)
	v41 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v41
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004036B3
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> ah:<invalid> r11d:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403689:
	rax = Mem0[0x000000000061AF78:word64]
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	rdx = rax + 0x0000000000000008
	rdx_rax = SEQ(rdx, rax) (alias)
	SCZO = cond(Mem0[0x000000000061AF80:word64] - rdx)
	C = SCZO (alias)
	branch Test(ULT,C) l000000000040409A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040409A:
	rsi = 0x0000000000000008
	rdi = 0x000000000061AF60
	call _obstack_newchunk (retsize: 8; depth: 8)
	rax = Mem0[0x000000000061AF78:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036A1:
	rdx = Mem0[0x000000000061B018:word64]
	Mem0[rax:word64] = rdx
	v42 = Mem0[0x000000000061AF78:word64] + 0x0000000000000008
	Mem0[0x000000000061AF78:word64] = v42
	SCZO = cond(v42)
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036B3:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rdi = 0x000000000041393B
	call fwrite_unlocked (retsize: 8; depth: 8)
	v43 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v43
	SCZO = cond(v43)
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> r12d:<invalid> r11d:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036D6:
	fn0000000000404DD0()
	eax = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
	Mem0[rsp + 0x0000000000000010:word32] = eax
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> dx:<invalid> r12d:<invalid> r11d:<invalid> bpl:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004036F0:
	Mem0[r12:word32] = 0x00000000
	rdi = r13
	edi = (word32) rdi (alias)
	call readdir (retsize: 8; depth: 8)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rbp = rax
	ebp = (word32) rbp (alias)
	branch Test(EQ,Z) l0000000000403CC0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC0:
	rdx = (uint64) Mem0[r12:word32]
	edx = (word32) rdx (alias)
	rdx_rax = SEQ(rdx, rax) (alias)
	SZO = cond(edx & edx)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403CF3
// DataOut: eax fs r10 r11 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CC8:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x00000000004139B1
	rax = dcgettext(0x0000000000000000, 0x00000000004139B1, 0x0000000000000005)
	rdi = (uint64) Mem0[rsp + 0x0000000000000010:word32]
	edi = (word32) rdi (alias)
	rdx = r14
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	rax = DPB(rax, eax, 0) (alias)
	rdx_rax = DPB(rdx_rax, eax, 0) (alias)
	ax = (word16) eax (alias)
	al = (byte) eax (alias)
	SCZO = cond(Mem0[r12:word32] - 0x0000004B)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403770
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CF3:
	rdi = r13
	call closedir (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403EBC
// DataOut: fs r10 r11 r15 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EBC:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x00000000004139C6
	rax = dcgettext(0x0000000000000000, 0x00000000004139C6, 0x0000000000000005)
	edi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	rdx = r14
	rsi = rax
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
// DataOut: fs r10 r11 r15 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D03:
	rsi = fn0000000000404E80(rsi, r11, r15, out r8, out r12, out r13, out r14, out r15)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403EAA
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403EAA:
	esi = (word32) Mem0[rsp + 0x000000000000002F:byte]
	sil = (byte) esi (alias)
	rdi = r14
	rsi = fn0000000000405090(sil, rdi, r11)
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D15:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	eax = (word32) rax (alias)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403D2C
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D1F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403E00
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D2C:
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403F8D
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403F8D:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v52 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v52
	SCZO = cond(v52)
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D39:
	rdx = 0x0000000000000005
	rdi = 0x0000000000000000
	rsi = 0x00000000004139DB
	rax = dcgettext(0x0000000000000000, 0x00000000004139DB, 0x0000000000000005)
	rsi = Mem0[0x000000000061A610:word64]
	rbx = rax
	rdi = rax
	eax = fputs_unlocked(rdi, rsi)
	rdi = rbx
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rdi = Mem0[0x000000000061A610:word64]
	edi = (word32) rdi (alias)
	v47 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v47
	rax = Mem0[rdi + 0x0000000000000028:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	C = SCZO (alias)
	branch Test(UGE,C) l00000000004044EB
// DataOut: fs r13 rax rbp rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044EB:
	rsi = 0x0000000000000020
	call __overflow (retsize: 8; depth: 8)
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D80:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x20
// DataOut: fs r13 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000005 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x05 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:0x00000005 dx:0x0005 r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403D8B:
	r8 = Mem0[0x000000000061B138:word64]
	r8d = (word32) r8 (alias)
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	edx = (word32) rdx (alias)
	rsi = rsp + 0x00000000000000E0
	rdi = Mem0[rsp + 0x0000000000000008:word64]
	rcx = 0x0000000000000200
	v48 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v48
	SCZO = cond(v48)
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	rsi = Mem0[0x000000000061A610:word64]
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rbx = rax
	rdi = rax
	eax = fputs_unlocked(rdi, rsi)
	rdi = rbx
	eax = strlen(rdi)
	rax = DPB(rax, eax, 0) (alias)
	rdi = Mem0[0x000000000061A610:word64]
	edi = (word32) rdi (alias)
	v49 = Mem0[0x000000000061B018:word64] + rax
	Mem0[0x000000000061B018:word64] = v49
	rax = Mem0[rdi + 0x0000000000000028:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000030:word64])
	C = SCZO (alias)
	branch Test(UGE,C) l00000000004044DC
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004044DC:
	rsi = 0x000000000000000A
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	call __overflow (retsize: 8; depth: 8)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DED:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000028:word64] = rdx
	Mem0[rax:byte] = 0x0A
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403DF8:
	v50 = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	Mem0[0x000000000061B018:word64] = v50
	SCZO = cond(v50)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> ah:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E00:
	SCZO = cond(Mem0[0x000000000061B1B0:word64] - 0x0000000000000000)
	Z = SCZO (alias)
	branch Test(EQ,Z) l00000000004034A1
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E0E:
	eax = fn00000000004079F0(out rsp)
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> r14d:<invalid> r14b:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034A1:
	rbx = Mem0[rsp + 0x0000000000000018:word64]
	rdi = Mem0[rbx:word64]
	free(rdi)
	rdi = Mem0[rbx + 0x0000000000000008:word64]
	free(rdi)
	rdi = rbx
	free(rdi)
	Mem0[0x000000000061B0D0:byte] = 0x01
// DataOut: fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> r10:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004034C6:
	rax = Mem0[0x000000000061B190:word64]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	Mem0[rsp + 0x0000000000000018:word64] = rax
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> xmm0:<invalid> xmm1:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> ax:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r11d:<invalid> bpl:<invalid> ah:<invalid> r13b:<invalid> dil:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040370C:
	rbx = rax + 0x0000000000000013
	ebx = (word32) rbx (alias)
	rax = (uint64) Mem0[0x000000000061B108:word32]
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(eax - 0x00000002)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403C78
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040371F:
	SCZO = cond(Mem0[rbp + 0x0000000000000013:byte] - 0x2E)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403C58
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C58:
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C60:
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rbp + 0x0000000000000014:byte] - 0x2E)
	Z = SCZO (alias)
	al = Test(EQ,Z)
	rax = DPB(rax, al, 0) (alias)
	SCZO = cond(Mem0[rbp + 0x0000000000000014 + rax:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C74:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:Test(EQ,Z) dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403729:
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403731:
	r15 = Mem0[0x000000000061B0F8:word64]
	r15d = (word32) r15 (alias)
	SZO = cond(r15 & r15)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403755
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403755:
	rdi = Mem0[rdi:word64]
	edi = (word32) rdi (alias)
	rdx = 0x0000000000000004
	rsi = rbx
	eax = fnmatch(rdi, rsi, 0x0000000000000004)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403748
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403748:
	r15 = Mem0[r15 + 0x0000000000000008:word64]
	r15d = (word32) r15 (alias)
	SZO = cond(r15 & r15)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403C78
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403769:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040373D:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C78:
	r15 = Mem0[0x000000000061B100:word64]
	r15d = (word32) r15 (alias)
	SZO = cond(r15 & r15)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403C9D
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C9D:
	rdi = Mem0[rdi:word64]
	edi = (word32) rdi (alias)
	rdx = 0x0000000000000004
	rsi = rbx
	eax = fnmatch(rdi, rsi, 0x0000000000000004)
	SZO = cond(eax & eax)
	Z = SZO (alias)
	C = false
	branch Test(NE,Z) l0000000000403C90
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C90:
	r15 = Mem0[r15 + 0x0000000000000008:word64]
	r15d = (word32) r15 (alias)
	SZO = cond(r15 & r15)
	Z = SZO (alias)
	C = false
	branch Test(EQ,Z) l0000000000403E20
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403CB1:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:0x0000000000000004 eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:0x04 r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:0x00000004 ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:0x0004 r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403C84:
// DataOut: fs r10 r11 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E20:
	eax = (word32) Mem0[rbp + 0x0000000000000012:byte]
	rsi = 0x0000000000000000
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
	rax = (uint64) (eax - 0x00000001)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
	SCZO = cond(al - 0x0D)
	CZ = SCZO (alias)
	branch Test(UGT,CZ) l0000000000403E37
// DataOut: al esi fs r10 r11 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E2D:
	eax = (word32) al
	rax = DPB(rax, eax, 0) (alias)
	rsi = (uint64) Mem0[0x00412C00 + rax * 0x0000000000000004:word32]
	sil = (byte) rsi (alias)
	esi = (word32) rsi (alias)
// DataOut: esi fs r10 r11 r14 r15 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E37:
	rdx = 0x0000000000000000
	edx = (word32) rdx (alias)
	SZO = cond(0x00000000)
	C = false
	rcx = r14
	rdi = rbx
	rax = fn0000000000407EA0(rcx, edx, rsi, rdi, r8, r10, r11, r14, r15, fs, out ebx, out rsp, out rbp, out rsi, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	v51 = Mem0[rsp + 0x0000000000000008:word64] + rax
	Mem0[rsp + 0x0000000000000008:word64] = v51
	SCZO = cond(Mem0[0x000000000061B150:word32] - 0x00000001)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> edx:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> r12d:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> bpl:<invalid> ah:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E56:
	SCZO = cond(Mem0[0x000000000061B148:word32] - 0xFFFFFFFF)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E63:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E70:
	SCZO = cond(Mem0[0x000000000061B10E:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(NE,Z) l0000000000403770
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403E7D:
	rsi = fn0000000000404E80(rsi, r11, r15, out r8, out r12, out r13, out r14, out r15)
	eax = fn00000000004079F0(out rsp)
	fn0000000000404DD0()
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403770:
	rax = fn0000000000406490(out rsi)
	rdx_rax = SEQ(rdx, rax) (alias)
	eax = (word32) rax (alias)
	ax = (word16) rax (alias)
	al = (byte) rax (alias)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> r9:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> ecx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r11d:<invalid> r10:<invalid> ax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> ebx:<invalid> r9d:<invalid> r14d:<invalid> r14b:<invalid> ah:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B5A:
	rax = (uint64) (eax + 0x00000083)
	eax = (word32) rax (alias)
	SCZO = cond(eax - 0x00000112)
	CZ = SCZO (alias)
	branch Test(UGT,CZ) l00000000004031F9
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004031F9:
	rdi = 0x0000000000000002
	edi = (word32) rdi (alias)
	fn0000000000409750(edi)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> bpl:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000403203:
	rsi = 0x0000000000000005
	esi = (word32) rsi (alias)
	rdi = 0x0000000000000000
	edi = (word32) rdi (alias)
	SZO = cond(edi)
	C = false
	Mem0[0x000000000061B150:word32] = 0x00000002
	fn000000000040E640(esi, rdi)
// DataOut: ebx fs r10 r11 r15 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003B8 rbp:rsi rbx:(uint64) edi rdi:0x000000000040A200 rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402B6A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> cl:<invalid> al:<invalid> r15:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -896(fp):0xFFFFFFFF -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn00000000004028C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> ecx:<invalid> cl:<invalid> al:<invalid> r15:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000402985:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> sil:<invalid> cl:<invalid> r12:<invalid> eax:<invalid> r14:<invalid> r13:<invalid> r8:<invalid> esi:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> bpl:<invalid> edx:<invalid> ebp:<invalid> al:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> r10:<invalid> -920(fp):fp - 0x0000000000000378 -904(fp):0x3F3F -902(fp):0x00 -896(fp):<invalid> -888(fp):<invalid> -880(fp):<invalid> -752(fp):0x10000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000404890(word64 rdx, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	__libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, fp)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi r8 r8b r8d r8w rax rdi
// Preserved: rbp rsp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048E1:
	word64 rsp_42
	word32 eax_43
	word64 rax_44
	word64 rbp_45
	word64 r8_46
	byte SCZO_47
	byte CZ_48
	byte SZO_49
	byte C_50
	byte Z_51
	word32 edi_52
	word64 rdi_53
	call 0x0000000000000000 (retsize: 4; depth: 4)
		uses: C_38,CZ_9,eax,edi,qwLoc08_5,r8_7,rax_35,rbp_39,rdi_41,rsp_40,SCZO_8,SZO_36,Z_37
		defs: C_50,CZ_48,eax_43,edi_52,r8_46,rax_44,rbp_45,rdi_53,rsp_42,SCZO_47,SZO_49,Z_51
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000008 -8(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -8(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx eax ecx r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx
// Preserved: r12 r14 rbp rbx rsp
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004049E0:
	word64 r8_106 = Mem0[r14:word64]
	word64 rax_101 = 0x0000000000000000
	word32 eax_207 = 0x00000000
	word64 r9_100 = Mem0[r15:word64]
	word64 r10_107 = 0x0000000000000000
	word64 r11_112 = 0x0000000000000000
	word32 r11d_113 = 0x00000000
	byte r11b_114 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404A06:
	byte al_263
	byte SZO_157
	byte al_119
	word32 eax_140
	branch eax_207 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A59:
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A50:
	r11d_113 = rax_101 - 0x0000000000000030 + r11_112 * 0x0000000000000008
	r11_112 = DPB(r11_112, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
	r8_106 = r8_106 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A0B:
	branch eax_207 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B20:
	branch eax_207 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A11:
	branch eax_207 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AE0:
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	byte cl_379 = (byte) (rax_101 - 0x0000000000000030)
	branch cl_379 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_379
	word32 r14d_396 = (word32) r14
	branch (r14d_396 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B78:
	word64 r11_419 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000037 + r11_419
	rax_101 = DPB(rax_101, (word32) Mem0[rax_101:byte], 0) (alias)
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_419, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000030, 0) (alias)
	cl_379 = (byte) (rax_101 - 0x0000000000000030) (alias)
	branch cl_379 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AD0:
	word64 r11_412 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000057 + r11_412
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_412, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B04:
	branch (r14d_396 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A65:
	Mem346[r9_100:byte] = r11b_114
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B11:
	word64 r11_406 = (uint64) (r11d_113 << 0x00000004)
	r11d_113 = rax_101 - 0x0000000000000030 + r11_406
	r8_106 = r8_106 + 0x0000000000000001
	r11_112 = DPB(r11_406, r11d_113, 0) (alias)
	r11b_114 = (byte) r11d_113 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A1A:
	branch eax_207 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A22:
	eax_140 = (word32) Mem0[rax_101:byte]
	rax_101 = DPB(rax_101, eax_140, 0) (alias)
	al_263 = (byte) eax_140 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A2E:
	branch al_263 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404CB0:
	Mem325[rcx:byte] = 0x7F
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A70:
	word32 eax_294 = (word32) Mem0[rax_101:byte]
	al_119 = (byte) eax_294 (alias)
	rax_101 = DPB(rax_101, eax_294, 0) (alias)
	SZO_157 = cond(al_119 - 0x3D) (alias)
	branch al_119 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A78:
	branch SZO_157 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B40:
	branch al_119 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B44:
	branch al_119 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A7E:
	branch al_119 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404CA0:
	r8_106 = r8_106 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B29:
	word32 eax_196 = (word32) Mem0[rax_101:byte]
	byte al_198 = (byte) eax_196
	branch al_198 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404C90:
	r11_112 = (uint64) eax_196
	r11d_113 = (word32) r11_112 (alias)
	r11b_114 = (byte) r11_112 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BD0:
	Mem227[r9_100:byte] = r11b_114
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
	rax_101 = 0x0000000000000000
	eax_207 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B35:
	rcx = DPB(rcx, (word32) al_198, 0) (alias)
	switch (rcx) { l0000000000404BF0 }
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BF0:
	rax_101 = 0x0000000000000006
	eax_207 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BB0:
	r8_106 = r8_106 + 0x0000000000000001
	branch eax_207 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A86:
	branch al_119 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A8E:
	eax_140 = (word32) Mem0[rax_101:byte]
	rax_101 = DPB(rax_101, eax_140, 0) (alias)
	r8_106 = r8_106 + 0x0000000000000001
	al_263 = (byte) eax_140 (alias)
	rcx = DPB(rcx, rax_101 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_101 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AA0:
	word64 rax_145 = (uint64) (eax_140 & 0x0000001F)
	Mem150[rcx:byte] = (byte) rax_145
	word32 eax_151 = (word32) Mem150[rax_145:byte]
	al_119 = (byte) eax_151 (alias)
	r8_106 = r8_106 + 0x0000000000000001
	r10_107 = r10_107 + 0x0000000000000001
	rax_101 = DPB(rax_145, eax_151, 0) (alias)
	r9_100 = r9_100 + 0x0000000000000001
	SZO_157 = cond(al_119 - 0x3D) (alias)
	branch al_119 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404B60:
	Mem105[rcx:byte] = al_119
	r8_106 = r8_106 + 0x0000000000000001
	r10_107 = r10_107 + 0x0000000000000001
	r9_100 = r9_100 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14
// LocalsOut: fp(64)

l0000000000404A38:
	Mem75[r15:word64] = r9_100
	Mem76[r14:word64] = r8_106
	Mem77[r13:word64] = r10_107
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:r12 rbp:rbp rbx:rbx eax:<invalid> ecx:<invalid> r14:r14 al:Test(NE,Z) r11d:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r14



word32 fn0000000000404CD0(word32 edi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word32 eax_33 = 0x00000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	*rsiOut = rsi_10
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (word32) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_42 = cond(rdx_9 - 0x0000000000000002)
	eax_33 = 0x00000001 (alias)
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_46 = 0x0000000000413733
	word64 rcx_48 = 0x0000000000000002
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_48 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_42 = cond(Mem0[rsi_85:byte] - Mem0[rdi_86:byte]) (alias)
	*rsiOut = rsi_85 + 0x0000000000000001
	rdi_46 = rdi_86 + 0x0000000000000001
	rcx_48 = rcx_48 - 0x0000000000000001
	word64 rsi_85 = rsi_10
	word64 rdi_86 = rdi_46
	branch Mem0[rsi_85:byte] != Mem0[rdi_86:byte] l0000000000404D0A
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x00000001, Z_42, 0)
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return eax_33
// DataOut: al eax ebx fs r10 r11 r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn0000000000404D20_entry:
// DataOut: dl edx fs r10 r11 r13d r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	byte r13b_8 = (byte) (uint64) edx
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: fs r10 r11 r12 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D47:
	rax_27 = fn0000000000410E30(rsi, out rsi)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D4F:
	Mem35[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_36 = 0x0000000000000000
	branch rdi == 0x0000000000000000 l0000000000404D62
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D5A:
	rax_36 = fn0000000000410E30(rdi, out rsi)
// DataOut: fs r10 r11 r13b r14d r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(32)

l0000000000404D62:
	Mem45[rax_25:word64] = rax_36
	word64 rax_46 = Mem45[0x000000000061B190:word64]
	Mem47[r11 + 0x0000000000000010:byte] = r13b_8
	Mem49[0x000000000061B190:word64] = rax_25
	Mem50[rax_25 + 0x0000000000000018:word64] = rax_46
	return rsi
// DataOut: fs r10 r11 r13d r14d r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn0000000000404D20_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rdi:<invalid> rbx:rbx rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



void fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO di dil edi rdi
// Preserved: rbx rsp
fn0000000000404D90_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DC0:
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

l0000000000404DB5:
	word64 rsp_20
	word64 rbx_21
	word64 rdi_22
	byte SCZO_23
	byte Z_24
	call freecon (retsize: 8; depth: 8)
		uses: qwLoc08_4,rbx_18,rdi_10,rsp_19,SCZO_11,Z_12
		defs: rbx_21,rdi_22,rsp_20,SCZO_23,Z_24
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r14d r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> -8(fp):rbx

fn0000000000404D90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> -8(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rbx rsp
fn0000000000404DD0_entry:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_32 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> -8(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_32 * 0x0000000000000008:word64])
	rbx_32 = rbx_32 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_32 l0000000000404DE0
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

l0000000000404DFD:
	Mem18[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem19[0x000000000061B17C:byte] = 0x00
	Mem20[0x000000000061B178:word32] = 0x00000000
	Mem21[0x000000000061B174:word32] = 0x00000000
	Mem22[0x000000000061B170:word32] = 0x00000000
	Mem23[0x000000000061B168:word32] = 0x00000000
	Mem24[0x000000000061B164:word32] = 0x00000000
	Mem25[0x000000000061B160:word32] = 0x00000000
	Mem26[0x000000000061B16C:word32] = 0x00000000
	Mem27[0x000000000061B15C:word32] = 0x00000000
	Mem28[0x000000000061B158:word32] = 0x00000000
	Mem29[0x000000000061B154:word32] = 0x00000000
	return
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdi:<invalid> -8(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> -8(fp):rbx



word64 fn0000000000404E80(word64 rsi, word64 r11, word64 r15, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut: r12 r13 r13d r14 r15 r8 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbp rbx rsp
fn0000000000404E80_entry:
	*r8Out = r8
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
	*r15Out = r15
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	branch (rbx_10 >>u 0x0000000000000001) + rbx_10 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	word64 rdi_259 = Mem0[0x000000000061B1A8:word64]
	free(rdi_259)
	branch rbx_10 >u 0x00000000AAAAAAAA l0000000000404FF8
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
	word64 rsi_275 = Mem0[rsi:word64]
	strcmp(Mem0[rdi_259:word64], rsi_275)
	return rsi_275
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FB3:
	word64 rax_267 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem269[0x000000000061B1A8:word64] = rax_267
	Mem274[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:0x00000000AAAAAAAA rbp:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EAB:
	word64 rax_240 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_244 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_246 = rax_240 + rbp_12 * 0x0000000000000008
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EC0:
	Mem250[rax_240:word64] = rdx_244
	rax_240 = rax_240 + 0x0000000000000008
	rdx_244 = rdx_244 + 192
	branch rax_240 != rcx_246 l0000000000404EC0
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rax rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EE0:
	word64 rsi_162
	word32 ecx_155
	word64 rdi_150
	word64 rsp_120
	word64 rbp_121
	word64 rbx_122
	byte SCZO_123
	word64 rax_124
	byte CZ_125
	byte SZO_126
	byte C_127
	byte Z_128
	word64 rdx_129
	word64 rcx_130
	word32 edi_131
	word64 rdi_132
	word32 eax_133
	word32 r8d_134
	word64 rsi_136
	word32 ecx_137
	word32 edx_138
	word16 ax_139
	byte al_140
	word32 esi_141
	word64 r11_142
	word64 r15_143
	word64 r12_144
	word64 r13_145
	word64 r14_146
	word64 r8_135
	call _setjmp (retsize: 8; depth: 32)
		uses: al_72,ax_73,C_65,CZ_54,eax_75,ecx_71,edi_56,edx_74,esi,qwLoc08_4,qwLoc10_7,r11,r12,r13,r14,r15,r8,r8d,rax_76,rbp_62,rbx_10,rcx_70,rdi_119,rdx_77,rsi,rsp_8,SCZO_78,SZO_63,Z_79
		defs: al_140,ax_139,C_127,CZ_125,eax_133,ecx_137,edi_131,edx_138,esi_141,r11_142,r12_144,r13_145,r14_146,r15_143,r8_135,r8d_134,rax_124,rbp_121,rbx_122,rcx_130,rdi_132,rdx_129,rsi_136,rsp_120,SCZO_123,SZO_126,Z_128
	branch eax_133 == 0x00000000 l0000000000404F40
// DataOut: al fs r10 r11 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F40:
	ecx_155 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_162 = Mem0[0x000000000061B1B0:word64]
	rdi_150 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EEE:
	r8_135 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_191 = (word32) r8_135
	branch r8d_191 == 0x00000003 l0000000000404FDF
// DataOut: fs r10 r11 r15 r8d r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404EFF:
	rsi_162 = Mem0[0x000000000061B1B0:word64]
	rdi_150 = Mem0[0x000000000061B1A8:word64]
	branch rsi_162 == 0x0000000000000000 l0000000000404F33
// DataOut: edi fs r10 r11 r15 r8d r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F12:
	word64 rdx_211 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_213 = rdi_150 + rsi_162 * 0x0000000000000008
	word64 rax_215 = rdi_150
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F20:
	Mem221[rax_215:word64] = rdx_211
	rax_215 = rax_215 + 0x0000000000000008
	rdx_211 = rdx_211 + 192
	branch rax_215 != rcx_213 l0000000000404F20
// DataOut: edi fs r10 r11 r15 r8d r9 rax rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F33:
	ecx_155 = (word32) (uint64) r8d_191 (alias)
// DataOut: al ecx edi fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F54:
	branch ecx_155 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx fs r10 r11 r15 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F60:
	word64 r8_172 = DPB(r8_135, (word32) Mem0[0x000000000061B10C:byte], 0)
	*r8Out = r8_172
	word64 r12_182
	word64 r13_183
	word64 r14_184
	word64 r15_185
	rsi = fn000000000040D690(rsi_162, rdi_150, r8_172, r11_142, r15_143, out r12_182, out r13_183, out r14_184, out r15_185)
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000404F8C:
	return rsi
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> eax:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000404E80_exit:
// DataOut: r12 r13 r13d r14 r15 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> eax:<invalid> rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> ax:<invalid> r8d:<invalid> r8:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000405090_entry:
// DataOut: fs r10 r11 r13d r8 r9 rdi rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_106 = (word32) sil
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: fs r10 r11 r13 r14d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050B4:
	rsi = fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11)
// DataOut: fs r10 r11 r13 r14d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050C0:
	word64 rbx_45 = Mem0[0x000000000061B1B0:word64]
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405108:
	branch rbx_45 == 0x0000000000000000 l00000000004051A8
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051A8:
	word64 rdx_195
	word64 rdi_181 = Mem0[0x000000000061B1B0:word64]
	branch rdi_181 == 0x0000000000000000 l00000000004051F7
// DataOut: fs r10 r11 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051F7:
	rdx_195 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051B4:
	rsi = Mem0[0x000000000061B1A8:word64]
	rdx_195 = 0x0000000000000000
	word64 rax_220 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051C0:
	word64 rcx_227 = Mem0[rsi + rax_220 * 0x0000000000000008:word64]
	Mem230[rsi + rdx_195 * 0x0000000000000008:word64] = rcx_227
	rax_220 = rax_220 + 0x0000000000000001
	rdx_195 = rdx_195 + DPB(rcx_227, (word32) (Mem0[rcx_227 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_220 != rdi_181 l00000000004051C0
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004051E1:
	Mem200[0x000000000061B1B0:word64] = rdx_195
	return rsi
// DataOut: fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000405090_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14d:<invalid> r13:r13 rbx:rbx r12:r12 rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:rbp r14:r14 r15:r15 edx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040512C:
	word64 r15_99 = Mem0[rdi:word64]
	branch rdi == 0x0000000000000000 l00000000004050E2
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405135:
	word64 rax_135 = fn000000000040A390(r15_99, out rsi)
	branch Mem0[rax_135:byte] != 0x2E l00000000004050D8
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405142:
	byte al_173 = (byte) (word32) Mem0[rax_135 + 0x0000000000000001 + (uint64) (Mem0[rax_135 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_173 == 0x2F l0000000000405100
// DataOut: al fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405154:
	branch al_173 == 0x00 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405158:
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050D8:
	branch Mem0[r15_99:byte] != 0x2F l0000000000405160
// DataOut: fs r10 r11 r12 r13 r14d r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405160:
	word64 rax_155 = fn000000000040A610(0x0000000000000000, r15_99, rdi, out r14d_106)
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], rax_155, r11)
	free(rax_155)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050E2:
	rsi = fn0000000000404D20((word32) (uint64) r14d_106, Mem0[rbp_71 + 0x0000000000000008:word64], r15_99, r11)
	branch Mem0[rbp_71 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405194:
	fn0000000000404D90(rbp_71)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l00000000004050FE:
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l0000000000405100:
	rbx_45 = rbx_45 - 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r14d:(word32) sil r13:rdi rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14b:<invalid> al:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)



void fn0000000000405200(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_141 = rsi
	word64 rbx_107 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	word64 rcx_135 = Mem0[0x000000000061B0D8:word64]
	branch rcx_135 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_112 = rbx_107 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_141 /u rcx_135) <=u (uint64) ((uint128) ((uint64) rsi_112) /u rcx_135) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_107 = rsi_112
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_126 = Mem0[0x000000000061A610:word64]
	word64 rax_127 = Mem0[rdi_126 + 0x0000000000000028:word64]
	branch rax_127 >=u Mem0[rdi_126 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_156
	word64 rsi_158
	word64 rdi_160
	byte SCZO_161
	byte C_162
	word64 rcx_163
	byte SZO_164
	byte Z_165
	word64 rdx_166
	word64 rax_167
	byte CZ_168
	word32 esi_169
	word32 edx_170
	call __overflow (retsize: 8; depth: 32)
		uses: C_130,CZ_125,edx_43,esi_113,qwLoc08_4,qwLoc10_9,rax_127,rbp_52,rbx_51,rcx_55,rdi_126,rdx_122,rsi_155,rsp_53,SCZO_129,SZO_56,Z_57
		defs: C_162,CZ_168,edx_170,esi_169,rax_167,rbp_157,rbx_159,rcx_163,rdi_160,rdx_166,rsi_158,rsp_156,SCZO_161,SZO_164,Z_165
	rcx_135 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem153[rdi_126 + 0x0000000000000028:word64] = rax_127 + 0x0000000000000001
	Mem154[rax_127:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_107 = rbx_107 + rcx_135 - (uint64) ((uint128) ((uint64) rbx_107) % rcx_135)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_107 = rbx_107 + 0x0000000000000001
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_80 = Mem0[0x000000000061A610:word64]
	word64 rdx_81 = Mem0[rdi_80 + 0x0000000000000028:word64]
	branch rdx_81 >=u Mem0[rdi_80 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_92
	word64 rsi_94
	word64 rdi_96
	byte SCZO_97
	byte C_98
	word64 rcx_99
	byte SZO_100
	byte Z_101
	word64 rdx_102
	word64 rax_103
	byte CZ_104
	word32 esi_105
	word32 edx_106
	call __overflow (retsize: 8; depth: 32)
		uses: C_85,CZ_78,edx_83,esi_75,qwLoc08_4,qwLoc10_9,rax_77,rbp_52,rbx_79,rcx_55,rdi_80,rdx_81,rsi_91,rsp_53,SCZO_84,SZO_56,Z_57
		defs: C_98,CZ_104,edx_106,esi_105,rax_103,rbp_93,rbx_95,rcx_99,rdi_96,rdx_102,rsi_94,rsp_92,SCZO_97,SZO_100,Z_101
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_141 <=u rbx_107 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem89[rdi_80 + 0x0000000000000028:word64] = rdx_81 + 0x0000000000000001
	Mem90[rdx_81:byte] = 0x20
	branch rbp_141 >u rbx_107 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:rdi -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn00000000004052D0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rcx rdi rdx rsi
// LiveOut: r10 r11 r12b r8 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn00000000004052D0_entry:
// DataOut: fs r11 r12b r14b rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -205C(64) Local -2070(64)

l00000000004052D0:
	word64 rax_38 = Mem0[fs:0x00000028:word64]
	word64 r9_46
	word64 r10_47
	word64 r11_48
	word64 r8_137
	word64 rax_49 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFB8, rdx, r11, fs, out r8_137, out r9_46, out r10_47, out r11_48)
	Mem58[fp + 0xFFFFFFFFFFFFDF90:word64] = fp + 0xFFFFFFFFFFFFDFB8
	word64 rbx_104 = rax_49
	branch rax_49 >u 0x0000000000001FFF l0000000000405590
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(0) Local -2080(64)

l0000000000405590:
	word64 v24_813 = fp - 0x0000000000002088 - (rax_49 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F & 0xFFFFFFFFFFFFFFF0
	word64 r9_820
	word64 r10_821
	word64 r11_822
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, rax_49 + 0x0000000000000001, v24_813, rdx, r11_48, fs, out r8_137, out r9_820, out r10_821, out r11_822)
	qwLoc2070 = v24_813
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000002088 r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:fp + 0xFFFFFFFFFFFFDFB8 rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):fp + 0xFFFFFFFFFFFFDFB8 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(0) Local -2080(64)

l0000000000405343:
	word64 r12_105
	branch Mem58[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbx rdi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(0) Local -2080(64)

l0000000000405412:
	word64 rsp_366
	word64 rbp_367
	word64 rdx_369
	word64 r15_370
	word64 r14_371
	word64 rsi_372
	word64 r13_373
	word32 esi_374
	word64 r12_375
	byte SCZO_377
	word64 rcx_379
	word32 eax_382
	byte SZO_383
	byte C_384
	byte CZ_385
	byte Z_386
	word32 edx_387
	word32 r12d_388
	word16 dx_389
	byte al_390
	byte SO_391
	byte dl_392
	word32 edi_393
	byte S_394
	word32 ecx_395
	byte cl_396
	word16 ax_397
	word32 ebx_398
	word64 r11_399
	word64 r9_400
	word64 r10_401
	byte r12b_402
	word64 rdi_378
	word64 rax_380
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_72,ax_73,C_75,cl,CZ_57,dl,dx,eax_71,ebx_51,ecx,edi_64,edx,esi,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_61,r11_63,r12,r12b,r12d,r13_19,r14_15,r15,r8_69,r9_62,rax_70,rbp_7,rbx_50,rcx_65,rdi_66,rdx_68,rsi_67,rsp_76,S,SCZO_77,SO,SZO_74,Z_78
		defs: al_390,ax_397,C_384,cl_396,CZ_385,dl_392,dx_389,eax_382,ebx_398,ecx_395,edi_393,edx_387,esi_374,fs_381,r10_401,r11_399,r12_375,r12b_402,r12d_388,r13_373,r14_371,r15_370,r8_368,r9_400,rax_380,rbp_367,rbx_376,rcx_379,rdi_378,rdx_369,rsi_372,rsp_366,S_394,SCZO_377,SO_391,SZO_383,Z_386
	branch rax_380 <=u 0x0000000000000001 l00000000004055D1
// DataOut: fs r10 r11 r13 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004055D1:
	word64 r14_701 = Mem58[r13_373 + 0xFFFFFFFFFFFFDF98:word64]
	word64 r12_702 = r14_701 + rbx_104
	branch r14_701 >=u r12_702 l0000000000405602
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004055E1:
	word64 rsp_744
	word64 rbp_745
	word64 rdx_747
	word64 r15_748
	word64 r14_749
	word64 r13_751
	word32 esi_752
	word64 r12_753
	byte SCZO_755
	word64 rdi_756
	word64 rcx_757
	word64 rax_758
	word32 eax_760
	byte SZO_761
	byte C_762
	byte CZ_763
	byte Z_764
	word32 edx_765
	word32 r12d_766
	word16 dx_767
	byte al_768
	byte SO_769
	byte dl_770
	word32 edi_771
	byte S_772
	word32 ecx_773
	byte cl_774
	word16 ax_775
	word32 ebx_776
	word64 r11_777
	word64 r9_778
	word64 r10_779
	byte r12b_780
	word64 rsi_750
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_390,ax_397,C_706,cl_396,CZ_404,dl_392,dwLoc205C,dx_389,eax_382,ebx_398,ecx_395,edi_393,edx_387,esi_374,fs_381,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_401,r11_399,r12_702,r12b_704,r12d_703,r13_373,r14_701,r15_370,r8_368,r9_400,rax_380,rbp_367,rbx_376,rcx_379,rdi_378,rdx_369,rsi_372,rsp_366,S_394,SCZO_705,SO_391,SZO_383,Z_386
		defs: al_768,ax_775,C_762,cl_774,CZ_763,dl_770,dx_767,eax_760,ebx_776,ecx_773,edi_771,edx_765,esi_752,fs_759,r10_779,r11_777,r12_753,r12b_780,r12d_766,r13_751,r14_749,r15_748,r8_746,r9_778,rax_758,rbp_745,rbx_754,rcx_757,rdi_756,rdx_747,rsi_750,rsp_744,S_772,SCZO_755,SO_769,SZO_761,Z_764
	word64 rdx_781 = r14_749
// DataOut: fs r10 r11 r12 r8 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004055E9:
	rsi_750 = DPB(rsi_750, (word32) Mem58[rdx_781:byte], 0) (alias)
	branch (Mem58[Mem58[rax_758:word64] + 0x0000000000000001 + rsi_750 * 0x0000000000000002:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: fs r10 r11 r12 r8 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004055F6:
	Mem803[rdx_781:byte] = 0x3F
// DataOut: fs r10 r11 r12 r8 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004055F9:
	rdx_781 = rdx_781 + 0x0000000000000001
	branch rdx_781 != r12_753 l00000000004055E9
// DataOut: fs r10 r11 r12 r8 r9 rax rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405602:
	r12_105 = rbx_104
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405421:
	word64 r15_405 = Mem58[r13_373 + 0xFFFFFFFFFFFFDF98:word64]
	word64 r13_406 = r15_405 + rbx_104
	branch r15_405 >=u r13_406 l0000000000405612
// DataOut: fs r10 r11 r13 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405612:
	rbx_104 = 0x0000000000000000
	r12_105 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405435:
	word64 rbx_409 = r15_405
	r12_105 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405440:
	word32 eax_449 = (word32) Mem58[rdi_378:byte]
	rax_380 = DPB(rax_380, eax_449, 0) (alias)
	byte al_451 = (byte) eax_449
	branch al_451 > 0x3F l0000000000405520
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405520:
	branch al_451 < 0x41 l0000000000405460
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405528:
	branch al_451 <= 0x5F l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l000000000040552C:
	branch (byte) (rax_380 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l000000000040544C:
	branch al_451 >= 0x25 l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405454:
	branch (byte) (rax_380 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405538:
	Mem672[rbx_409:byte] = al_451
	r15_405 = r15_405 + 0x0000000000000001
	r12_105 = r12_105 + 0x0000000000000001
	rbx_409 = rbx_409 + 0x0000000000000001
	branch r15_405 <u r13_406 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l000000000040554F:
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405460:
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405470:
	word64 rsp_510
	word64 rbp_511
	word64 rdx_513
	word64 r15_514
	word64 r14_515
	word64 rsi_516
	word32 esi_518
	word64 r12_519
	word64 rbx_520
	byte SCZO_521
	word64 rcx_523
	word32 eax_526
	byte SZO_527
	byte C_528
	byte CZ_529
	byte Z_530
	word32 edx_531
	word32 r12d_532
	word16 dx_533
	byte al_534
	byte SO_535
	byte dl_536
	word32 edi_537
	byte S_538
	word32 ecx_539
	byte cl_540
	word16 ax_541
	word32 ebx_542
	word64 r11_543
	word64 r9_544
	word64 r10_545
	byte r12b_546
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_451,ax_452,C_439,cl_421,CZ_497,dl_494,dx_427,eax_449,ebx_420,ecx_422,edi_506,edx_496,esi_433,fs_430,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058_500,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_417,r11_419,r12_441,r12b_443,r12d_442,r13_501,r14_445,r15_502,r8_436,r9_418,rax_450,rbp_447,rbx_440,rcx_504,rdi_505,rdx_507,rsi_509,rsp_448,S_423,SCZO_508,SO_495,SZO_499,Z_438
		defs: al_534,ax_541,C_528,cl_540,CZ_529,dl_536,dx_533,eax_526,ebx_542,ecx_539,edi_537,edx_531,esi_518,fs_525,r10_545,r11_543,r12_519,r12b_546,r12d_532,r13_517,r14_515,r15_514,r8_512,r9_544,rax_524,rbp_511,rbx_520,rcx_523,rdi_522,rdx_513,rsi_516,rsp_510,S_538,SCZO_521,SO_535,SZO_527,Z_530
	word64 r14_549 = rax_380
	branch rax_380 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405551:
	Mem658[rbx_520:byte] = 0x3F
	r15_405 = r15_514 + 0x0000000000000001
	r12_105 = r12_519 + 0x0000000000000001
	rbx_409 = rbx_520 + 0x0000000000000001
	branch r15_514 + 0x0000000000000001 <u r13_406 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405569:
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405499:
	branch rax_380 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l000000000040556B:
	Mem649[rbx_520:byte] = 0x3F
	r15_405 = r13_406
	r12_105 = r12_519 + 0x0000000000000001
	rbx_409 = rbx_520 + 0x0000000000000001
	branch r13_406 <u r13_406 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405582:
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054A3:
	word64 rdi_553 = (uint64) dwLoc205C
	branch rax_380 != 0x0000000000000000 l00000000004054B5
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054B1_1:
	r14_549 = 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054B5:
	word32 eax_560 = wcwidth(rdi_553)
	branch eax_560 < 0x00000000 l0000000000405510
// DataOut: al eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405510:
	Mem639[rbx_520:byte] = 0x3F
// DataOut: eax fs r10 r11 r12 r13 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054BE:
	word64 rsi_611 = r15_514 + r14_549
	word64 rdx_613 = rbx_520
	r15_618 = r15_514
// DataOut: al fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054C8:
	word64 r15_618
	rdx_613 = rdx_613 + 0x0000000000000001
	Mem628[rdx_613 - 0x0000000000000001:byte] = (byte) (word32) Mem58[rdi_553 - 0x0000000000000001:byte]
	r15_618 = r15_618 + 0x0000000000000001
	branch r15_618 != rsi_611 l00000000004054C8
// DataOut: al fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054DD:
// DataOut: eax fs r10 r11 r12 r13 r15 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054E5:
	word64 rsp_569
	word64 rbp_570
	word64 rdx_572
	word64 r14_574
	word64 rsi_575
	word32 esi_577
	byte SCZO_580
	word64 rcx_582
	word32 eax_585
	byte SZO_586
	byte C_587
	byte CZ_588
	byte Z_589
	word32 edx_590
	word32 r12d_591
	word16 dx_592
	byte al_593
	byte SO_594
	byte dl_595
	word32 edi_596
	byte S_597
	word32 ecx_598
	byte cl_599
	word16 ax_600
	word32 ebx_601
	word64 r11_602
	word64 r9_603
	word64 r10_604
	byte r12b_605
	call mbsinit (retsize: 8; depth: 8)
		uses: al_562,ax_563,C_566,cl_540,CZ_529,dl_536,dwLoc205C,dx_533,eax_560,ebx_542,ecx_539,edi_568,edx_531,esi_518,fs_525,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058_500,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_545,r11_543,r12_519,r12b_546,r12d_532,r13_517,r14_559,r15_514,r8_512,r9_544,rax_561,rbp_511,rbx_520,rcx_523,rdi_567,rdx_513,rsi_516,rsp_510,S_565,SCZO_550,SO_535,SZO_564,Z_556
		defs: al_593,ax_600,C_587,cl_599,CZ_588,dl_595,dx_592,eax_585,ebx_601,ecx_598,edi_596,edx_590,esi_577,fs_584,r10_604,r11_602,r12_578,r12b_605,r12d_591,r13_576,r14_574,r15_573,r8_571,r9_603,rax_583,rbp_570,rbx_579,rcx_582,rdi_581,rdx_572,rsi_575,rsp_569,S_597,SCZO_580,SO_594,SZO_586,Z_589
	branch eax_585 == 0x00000000 l0000000000405470
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004054F9:
	branch r15_405 <u r13_406 l0000000000405440
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -205C(64) Local -2070(64) Local -2078(64) Local -2080(64)

l0000000000405502:
	rbx_104 = rbx_409 - qwLoc2070
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405350:
	r12_105 = r12
	branch rcx == 0x0000000000000000 l0000000000405379
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2070(64) Local -2078(64) Local -2080(64)

l000000000040535A:
	word64 rsp_237
	word64 rbp_238
	word64 rdx_240
	word64 r15_241
	word64 r14_242
	word64 rsi_243
	word64 r13_244
	word32 esi_245
	word64 r12_246
	byte SCZO_248
	word64 rdi_249
	word64 rcx_250
	word64 rax_251
	word32 eax_253
	byte SZO_254
	byte C_255
	byte CZ_256
	byte Z_257
	word32 edx_258
	word32 r12d_259
	word16 dx_260
	byte al_261
	byte SO_262
	byte dl_263
	word32 edi_264
	byte S_265
	word32 ecx_266
	byte cl_267
	word16 ax_268
	word32 ebx_269
	word64 r11_270
	word64 r9_271
	word64 r10_272
	byte r12b_273
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_72,ax_73,C_75,cl,CZ_57,dl,dx,eax_71,ebx_51,ecx,edi_64,edx,esi,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_61,r11_63,r12,r12b,r12d,r13_19,r14_15,r15,r8_69,r9_62,rax_70,rbp_7,rbx_50,rcx_65,rdi_66,rdx_68,rsi_67,rsp_76,S,SCZO_224,SO,SZO_74,Z_225
		defs: al_261,ax_268,C_255,cl_267,CZ_256,dl_263,dx_260,eax_253,ebx_269,ecx_266,edi_264,edx_258,esi_245,fs_252,r10_272,r11_270,r12_246,r12b_273,r12d_259,r13_244,r14_242,r15_241,r8_239,r9_271,rax_251,rbp_238,rbx_247,rcx_250,rdi_249,rdx_240,rsi_243,rsp_237,S_265,SCZO_248,SO_262,SZO_254,Z_257
	branch rax_251 <=u 0x0000000000000001 l00000000004053CD
// DataOut: fs r10 r11 r13 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2070(64) Local -2078(64) Local -2080(64)

l00000000004053CD:
	word64 r14_289 = Mem58[r13_244 + 0xFFFFFFFFFFFFDF98:word64]
	word64 r13_290 = r14_289 + rbx_104
	branch r14_289 >=u r13_290 l000000000040560A
// DataOut: fs r10 r11 r13 r14 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l000000000040560A:
	r12_105 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004053E1:
	word64 rsp_293
	word64 rbp_294
	word64 r15_297
	word64 r14_298
	word64 rsi_299
	word64 r13_300
	word32 esi_301
	word64 r12_302
	byte SCZO_304
	word64 rdi_305
	word64 rcx_306
	word64 rax_307
	word32 eax_309
	byte SZO_310
	byte C_311
	byte CZ_312
	byte Z_313
	word32 edx_314
	word32 r12d_315
	word16 dx_316
	byte al_317
	byte SO_318
	byte dl_319
	word32 edi_320
	byte S_321
	word32 ecx_322
	byte cl_323
	word16 ax_324
	word32 ebx_325
	word64 r11_326
	word64 r9_327
	word64 r10_328
	byte r12b_329
	word64 rdx_296
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_261,ax_268,C_292,cl_267,CZ_275,dl_263,dx_260,eax_253,ebx_269,ecx_266,edi_264,edx_258,esi_245,fs_252,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_272,r11_270,r12_246,r12b_273,r12d_259,r13_290,r14_289,r15_241,r8_239,r9_271,rax_251,rbp_238,rbx_247,rcx_250,rdi_249,rdx_240,rsi_243,rsp_237,S_265,SCZO_291,SO_262,SZO_254,Z_257
		defs: al_317,ax_324,C_311,cl_323,CZ_312,dl_319,dx_316,eax_309,ebx_325,ecx_322,edi_320,edx_314,esi_301,fs_308,r10_328,r11_326,r12_302,r12b_329,r12d_315,r13_300,r14_298,r15_297,r8_295,r9_327,rax_307,rbp_294,rbx_303,rcx_306,rdi_305,rdx_296,rsi_299,rsp_293,S_321,SCZO_304,SO_318,SZO_310,Z_313
	r12_105 = 0x0000000000000000
	word64 rcx_335 = Mem58[rax_307:word64]
	word64 rax_338 = r14_298
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l00000000004053F0:
	rdx_296 = DPB(rdx_296, (word32) Mem58[rax_338:byte], 0) (alias)
	r12_105 = r12_105 - 0xFF - (((word16) ((word32) Mem58[rcx_335 + rdx_296 * 0x0000000000000002:word16]) & 0x4000) <u 0x0001)
	rax_338 = rax_338 + 0x0000000000000001
	branch rax_338 != r13_300 l00000000004053F0
// DataOut: fs r10 r11 r12 r13 r8 r9 rax rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l000000000040540D:
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405365:
	word64 rsi_282
	r12_105 = (int64) (word32) fn000000000040D240(0x00000000, rbx_104, qwLoc2070, fs, out rsi_282)
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:rsi r13:rdx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64) Local -2080(64)

l0000000000405379:
	branch rdi == 0x0000000000000000 l0000000000405399
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64)

l0000000000405385:
	word64 rsp_187
	word64 rbp_188
	word64 rdx_190
	word64 r15_191
	word64 r14_192
	word64 rsi_193
	word64 r13_194
	word32 esi_195
	byte SCZO_198
	word64 rdi_199
	word64 rcx_200
	word64 rax_201
	word32 eax_203
	byte SZO_204
	byte C_205
	byte CZ_206
	byte Z_207
	word32 edx_208
	word32 r12d_209
	word16 dx_210
	byte al_211
	byte SO_212
	byte dl_213
	word32 edi_214
	byte S_215
	word32 ecx_216
	byte cl_217
	word16 ax_218
	word32 ebx_219
	word64 r11_220
	word64 r9_221
	word64 r10_222
	byte r12b_223
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_102,ax_103,C_116,cl_84,CZ_92,dl_88,dx_90,eax_101,ebx_83,ecx_85,edi_87,edx_91,esi_96,fs_93,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_18,qwLoc2058_79,qwLoc2070_60,qwLoc2078_34,qwLoc2080_30,qwLoc28_24,qwLoc30_27,qwLoc40_39,r10_80,r11_82,r12_105,r12b_107,r12d_106,r13_108,r14_109,r15_110,r8_99,r9_81,rax_100,rbp_111,rbx_104,rcx_113,rdi_184,rdx_185,rsi_186,rsp_112,S_86,SCZO_95,SO_89,SZO_114,Z_115
		defs: al_211,ax_218,C_205,cl_217,CZ_206,dl_213,dx_210,eax_203,ebx_219,ecx_216,edi_214,edx_208,esi_195,fs_202,r10_222,r11_220,r12_196,r12b_223,r12d_209,r13_194,r14_192,r15_191,r8_189,r9_221,rax_201,rbp_188,rbx_197,rcx_200,rdi_199,rdx_190,rsi_193,rsp_187,S_215,SCZO_198,SO_212,SZO_204,Z_207
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:rdi rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64) Local -2078(64)

l0000000000405399:
	branch rcx == 0x0000000000000000 l00000000004053A8
// DataOut: fs r10 r11 r12 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64)

l00000000004053A5:
	Mem183[r8_137:word64] = r12_105
// DataOut: fs r10 r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:rcx rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8) Local -0040(64)

l00000000004053A8:
	branch (rax_38 ^ Mem58[fs:0x00000028:word64]) != 0x0000000000000000 l000000000040561C
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:rcx rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: fp(64) Local -0018(8) Local -0028(8)

l000000000040561C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004053BE:
	byte r12b_168
	*r12bOut = (byte) r12
	return rbx_104
// DataOut: fs r10 r11 r12b r14b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:fp - 0x0000000000000008 r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn00000000004052D0_exit:
// DataOut: r10 r11 r12b r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r8:<invalid> rbp:rbp r14:r14 r13:r13 rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:rbx r12:r12 r15:r15 r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8320(fp):rdi -8312(fp):rcx -8304(fp):<invalid> -8280(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp



void fn0000000000405630(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn0000000000405630_entry:
// DataOut: r13 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_15 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_19 = (uint64) ((word32) (rax_13 - rbp_15) >>u 0x00000003)
	branch r12_19 == 0x0000000000000000 l00000000004056DB
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040564F:
	branch rax_13 == rbp_15 l00000000004056E6
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056E6:
	Mem154[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: r12 r13 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l0000000000405658:
	word64 rcx_79 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_87 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_79
	word64 rcx_84 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_89 = (int64) edx_87 & rax_13 + rcx_79
	word64 rax_90 = Mem0[rsi + 0x0000000000000008:word64]
	Mem92[rsi + 0x0000000000000018:word64] = rdx_89
	branch rdx_89 - rax_90 > rcx_84 - rax_90 l00000000004056E0
// DataOut: r12 r13 r15 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056E0:
	Mem152[rsi + 0x0000000000000018:word64] = rcx_84
// DataOut: r12 r13 r15 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l0000000000405683:
	Mem102[rsi + 0x0000000000000010:word64] = Mem92[rsi + 0x0000000000000018:word64]
	fputs_unlocked(rdi, Mem102[0x000000000061A610:word64])
	word64 rbx_105 = 0x0000000000000000
// DataOut: r12 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056A0:
	__printf_chk(0x0000000000000001, 0x0000000000413759)
	rbx_105 = rbx_105 + 0x0000000000000001
	branch r12_19 >u rbx_105 l00000000004056A0
// DataOut: r12 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:<invalid> eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056BF:
	word64 rdi_115 = Mem102[0x000000000061A610:word64]
	word64 rax_117 = Mem102[rdi_115 + 0x0000000000000028:word64]
	branch rax_117 >=u Mem102[rdi_115 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: r13 r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056EF:
	word64 rsp_131
	word64 r12_132
	word64 rbp_133
	word64 rbx_134
	word64 rax_135
	word64 rsi_136
	byte SCZO_137
	word32 r12d_138
	byte SZO_139
	byte C_140
	byte Z_141
	word64 rcx_142
	word32 edx_143
	word32 ecx_144
	word64 rdx_145
	word32 ebx_146
	word64 rdi_147
	word32 eax_148
	word32 esi_149
	word32 edi_150
	byte CZ_151
	call __overflow (retsize: 8; depth: 8)
		uses: C_120,CZ_114,eax_118,ebx_111,ecx_85,edi_116,edx_87,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,r12_128,r12d_20,rax_117,rbp_126,rbx_124,rcx_84,rdi_115,rdx_106,rsi_130,rsp_129,SCZO_119,SZO_100,Z_77
		defs: C_140,CZ_151,eax_148,ebx_146,ecx_144,edi_150,edx_143,esi_149,r12_132,r12d_138,rax_135,rbp_133,rbx_134,rcx_142,rdi_147,rdx_145,rsi_136,rsp_131,SCZO_137,SZO_139,Z_141
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004056D0:
	Mem122[rdi_115 + 0x0000000000000028:word64] = rax_117 + 0x0000000000000001
	Mem123[rax_117:byte] = 0x0A
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004056DB:
	return
// DataOut: r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbp:<invalid> r12:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbp:rbp r12:r12 rbx:rbx rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn0000000000405700(word32 edx, word64 rdi, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405700_entry:
// DataOut: edx fs r11 r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_101
	word32 ebx_12 = (word32) (uint64) edx
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405780:
	__printf_chk(0x0000000000000001, 0x000000000041375E)
	rbp_101 = (int64) ebx_12
// DataOut: fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405710:
	word64 rsi_47
	word32 eax_49 = (word32) fn000000000040D420(0x00000000, rdi, fs, out rsi_47)
	word64 rsi_50 = Mem0[0x000000000061A610:word64]
	word32 ebx_104 = (word32) (uint64) (ebx_12 - eax_49)
	branch ebx_104 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:(uint64) edx -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405725_1:
	ebx_104 = 0x00000000
// DataOut: ebx fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405728:
	fputs_unlocked(rdi, rsi_50)
	rbp_101 = (int64) ebx_104 + (uint64) strlen(rdi)
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> eax:0x00000000 rdx:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405740:
	word64 rdi_82 = Mem0[0x000000000061A610:word64]
	word64 rcx_84 = Mem0[rdi_82 + 0x0000000000000028:word64]
	branch rcx_84 >=u Mem0[rdi_82 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r15 r8 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405799:
	word64 rsp_111
	word64 rdi_113
	word64 rbx_114
	word32 edx_116
	byte SCZO_117
	byte SZO_118
	byte C_119
	byte Z_120
	word32 esi_121
	word64 rsi_122
	word32 eax_123
	word64 rax_124
	byte S_125
	word64 rcx_126
	word32 edi_127
	word64 rdx_128
	selector fs_129
	call __overflow (retsize: 8; depth: 32)
		uses: C_86,eax_70,ebx_76,edi_83,edx_74,esi_72,fs_68,qwLoc08_4,qwLoc10_9,rax_78,rbp_80,rbx_79,rcx_84,rdi_82,rdx_75,rsi_110,rsp_81,S_69,SCZO_85,SZO_73,Z_77
		defs: C_119,eax_123,ebx_115,edi_127,edx_116,esi_121,fs_129,rax_124,rbp_112,rbx_114,rcx_126,rdi_113,rdx_128,rsi_122,rsp_111,S_125,SCZO_117,SZO_118,Z_120
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405751:
	Mem108[rdi_82 + 0x0000000000000028:word64] = rcx_84 + 0x0000000000000001
	Mem109[rcx_84:byte] = 0x20
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040575C:
	ebx_104 = (word32) (uint64) (ebx_104 - 0x00000001) (alias)
	branch ebx_104 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405764:
	Mem35[0x000000000061B018:word64] = rbp_101 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	return
// DataOut: fs r11 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405700_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> ebx:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



void fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r8 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_18 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057C0:
	rax_18 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r15 r8 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:0x0000000000413764 rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057E0:
	rax_18 = fn000000000040C9B0(rsi, edi, r8)
	esi = (word32) (uint64) esi (alias)
// DataOut: esi fs r11 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi -8(fp):rbx
// LocalsOut: fp(64)

l00000000004057CB:
	word32 edx_25 = (word32) (uint64) esi
// DataOut: edx fs r11 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rax:<invalid> rbx:(uint64) edi rsi:<invalid> rdx:<invalid> rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	fn0000000000405700(edx_25, rax_18, fs)
	return
// DataOut: fs r11 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:(uint64) esi rsi:(uint64) edi rdi:<invalid> eax:<invalid> -12(fp):esi -8(fp):rbx

fn00000000004057B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> -12(fp):esi -8(fp):rbx



word32 fn0000000000405810(word32 edi, word64 r11, word64 r15, selector fs, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15
// LiveOut: eax r10 r11 r13 r14 r15 r15b r8 r9 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 rbp rbx rsp
fn0000000000405810_entry:
// DataOut: edi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_21
	word64 rbp_22
	word64 r8_23
	word64 r9_24
	word64 r10_25
	word64 r11_26
	word64 r12_27
	word64 r13_28
	word64 r14_29
	word64 r15_30
	word64 rbx_31 = fn000000000040EAB0(r11, r15, fs, out rsp_21, out rbp_22, out r8_23, out r9_24, out r10_25, out r11_26, out r12_27, out r13_28, out r14_29, out r15_30)
	__errno_location()
	word64 rsp_45
	word64 r12_46
	word32 r12d_47
	word32 edi_48
	word64 rdi_49
	word64 rdx_50
	word64 rbp_51
	word64 rbx_52
	word64 rsi_53
	word64 rax_54
	word32 esi_55
	byte SZO_56
	byte C_57
	word64 rcx_59
	byte r12b_60
	byte Z_61
	word64 r11_62
	word64 r15_63
	selector fs_64
	word64 r8_65
	word64 r9_66
	word64 r10_67
	word64 r13_68
	word64 r14_69
	word32 eax_103
	call error (retsize: 8; depth: 8)
		uses: C_42,eax_40,edi,esi_37,fs,qwLoc08_4,qwLoc10_12,qwLoc18_15,r10_25,r11_26,r12_27,r12b_7,r13_28,r14_29,r15_30,r8_23,r9_24,rax_39,rbp_33,rbx_31,rcx_43,rdi_38,rdx_44,rsi_36,rsp_21,SZO_41
		defs: C_57,eax_58,edi_48,esi_55,fs_64,r10_67,r11_62,r12_46,r12b_60,r12d_47,r13_68,r14_69,r15_63,r8_65,r9_66,rax_54,rbp_51,rbx_52,rcx_59,rdi_49,rdx_50,rsi_53,rsp_45,SZO_56,Z_61
	branch r12b_60 == 0x00 l0000000000405850
// DataOut: eax fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	eax_103 = (word32) (uint64) Mem0[0x000000000061B030:word32] (alias)
	branch eax_103 != 0x00000000 l000000000040584A
// DataOut: eax fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040585A:
	Mem111[0x000000000061B030:word32] = 0x00000001
	return eax_103
// DataOut: eax fs r10 r11 r13 r14 r15 r15b r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000405840:
	Mem101[0x000000000061B030:word32] = 0x00000002
// DataOut: eax fs r10 r11 r13 r14 r15 r15b r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040584A:
	return eax_103
// DataOut: eax fs r10 r11 r13 r14 r15 r15b r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000405810_exit:
// DataOut: eax r10 r11 r13 r14 r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
// DataOut: dil edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_128
	word32 eax_106
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_106 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_128 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C25:
	word32 eax_101 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_101 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_128 = eax_101 == 0x00004000
// DataOut: cl dil edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C55:
	eax_106 = 0x0000002F (alias)
	branch cl_128 != 0x00 l0000000000405C3E
// DataOut: al dil eax edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C6B:
	word32 eax_52
	branch dil == 0x00 l0000000000405CC0
// DataOut: edx esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CC0:
	eax_106 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edx fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405CCE:
	eax_106 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edx fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid>

l0000000000405CDC:
	eax_52 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid>

l0000000000405C70:
	word32 esi_61 = (word32) (uint64) (esi & 0x0000F000)
	eax_106 = 0x00000040 (alias)
	branch esi_61 == 0x0000A000 l0000000000405C3E
// DataOut: al eax esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:<invalid>

l0000000000405C83:
	eax_106 = 0x0000007C (alias)
	branch esi_61 == 0x00001000 l0000000000405C3E
// DataOut: al eax esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:<invalid> rsi:<invalid>

l0000000000405C90:
	eax_52 = DPB(0x0000007C, esi_61 == 0x0000C000, 0) (alias)
// DataOut: eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:<invalid> rsi:<invalid>

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_52 & 0x0000003D)
// DataOut: al eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:<invalid> rsi:<invalid>

l0000000000405C33:
	eax_106 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax esi fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405CB0:
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) ((uint64) (esi & 0x00000049)) - 0x00000001)) & 0x0000002A)
// DataOut: al eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000405C3E:
	return eax_106
// DataOut: al eax fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> rsi:<invalid>

fn0000000000405C20_exit:
// DataOut: al eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000405D00_entry:
// DataOut: dil edx esi fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 eax_10 = fn0000000000405C20(edx, esi, (byte) (word32) dil)
	word64 rbx_15 = (uint64) eax_10
	byte bl_17 = (byte) rbx_15
	branch (byte) eax_10 == 0x00 l0000000000405D33
// DataOut: bl fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405D10:
	word64 rdi_42 = Mem0[0x000000000061A610:word64]
	word64 rax_45 = Mem0[rdi_42 + 0x0000000000000028:word64]
	branch rax_45 >=u Mem0[rdi_42 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D3A:
	word64 rsp_73
	word64 rbx_74
	word32 edi_75
	byte dil_76
	byte al_77
	byte SZO_78
	byte C_79
	word32 ebx_80
	word32 eax_81
	byte Z_82
	word64 rdi_83
	word64 rax_84
	byte SCZO_85
	word64 rdx_86
	word32 esi_88
	word32 edx_89
	call __overflow (retsize: 8; depth: 16)
		uses: al_46,bl_17,C_49,dil_44,eax_47,ebx_16,edi_43,edx,esi_72,qwLoc08_4,rax_45,rbx_15,rdi_42,rdx,rsp_2,SCZO_48,SZO_12,Z_13
		defs: al_77,bl_87,C_79,dil_76,eax_81,ebx_80,edi_75,edx_89,esi_88,rax_84,rbx_74,rdi_83,rdx_86,rsp_73,SCZO_85,SZO_78,Z_82
// DataOut: bl fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D21:
	Mem70[rdi_42 + 0x0000000000000028:word64] = rax_45 + 0x0000000000000001
	Mem71[rax_45:byte] = bl_17
// DataOut: bl fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D2B:
	Mem67[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

l0000000000405D33:
	return bl_17 != 0x00
// DataOut: al fs rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -8(fp):rbx

fn0000000000405D00_exit:
// DataOut: al
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -8(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000405D50_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -02C0(64)

l0000000000405D50:
	word64 rbx_10 = 0x0000000000000000
	word64 rax_15 = Mem0[fs:0x00000028:word64]
	word64 rax_156 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: fs r11 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405EA0:
	word64 rsi_199
	word64 rax_200 = fn000000000040CD70(fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000018:word64], out rsi_199)
	rax_156 = DPB(rax_200, strlen(rax_200), 0) (alias)
	rbx_10 = rax_156 + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405D87:
	rbx_10 = (int64) Mem0[0x000000000061B178:word32] + 0x0000000000000001
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405E58:
	rax_156 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405E6A:
	word64 r8_178
	word64 r9_179
	word64 r10_180
	word32 r15d_182
	word64 rax_183 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_178, out r9_179, out r10_180, out r11, out r15d_182)
	rax_156 = DPB(rax_183, strlen(rax_183), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:<invalid> eax:0x00000002 rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DA8:
	rax_156 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_156
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DBF:
	word64 rax_125
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405E40:
	rax_125 = DPB(rax_156, strlen(Mem0[rdi + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DC8:
	rax_125 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DD3:
	rbx_10 = rbx_10 + rax_125
// DataOut: fs r11 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64) Local -02C0(64)

l0000000000405DD6:
	word64 r8_65
	word64 r9_66
	word64 r10_67
	word64 r11_68
	byte r12b_69
	fn00000000004052D0(fp - 0x00000000000002C0, Mem0[0x000000000061B0E8:word64], Mem0[rdi:word64], 0x0000000000000000, r11, fs, out r8_65, out r9_66, out r10_67, out r11_68, out r12b_69)
	word64 rax_71 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_119 = rbx_10 + qwLoc02C0
	branch (word32) rax_71 == 0x00000000 l0000000000405E1C
// DataOut: fs r12b r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000405DFC:
	rbx_119 = rbx_119 + DPB(rax_71, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rdi + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rdi + 0x0000000000000028:word32]), (byte) ((word32) Mem0[rdi + 0x00000000000000B0:byte])) != 0x00), 0)
// DataOut: fs r12b r9 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000405E1C:
	branch (rax_15 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000405EBF:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000405E36:
	return rbx_119
// DataOut: fs r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C8 rbp:rdi rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



void fn0000000000405ED0(word64 rsi, word32 edi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r8 rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000405ED0_entry:
// DataOut: edi fs r11 r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	word64 rbx_145 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r8 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_145 = rax_8
// DataOut: fs r11 r8 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405EF3:
	word64 rax_307
	word64 rsi_300
	word64 r8_299
	branch rbx_145 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r8 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060C8:
	rax_307 = 0x0000000000000000
	r8_299 = rdx_6
	rsi_300 = Mem0[0x000000000061B028:word64]
	branch rbx_145 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060DD:
// DataOut: fs r11 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F00:
	word64 rbp_367
	word64 rdi_336 = Mem0[0x000000000061B028:word64]
	word32 edi_337 = (word32) rdi_336
	branch rbx_145 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r8 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406170:
	branch rbx_145 >u 0x0000000055555555 l000000000040619D
// DataOut: edi fs r11 r8 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040617F:
	rbp_367 = rbx_145 * 0x0000000000000002
	Mem469[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp_367 + rbx_145 << 0x0000000000000004, rdi_336, out r8)
// DataOut: fs r11 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:0x0000000055555555 r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F16:
	branch rax_8 >u 0x00000000AAAAAAAA l000000000040619D
// DataOut: edi fs r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F29:
	word64 rax_454 = fn0000000000410C90(0x00000000AAAAAAAA, rax_8 * 0x0000000000000018, rdi_336, out r8)
	rbp_367 = Mem0[0x000000000061B020:word64]
	Mem457[0x000000000061B028:word64] = rax_454
// DataOut: fs r11 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x00000000AAAAAAAA rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F44:
	word64 rax_368 = Mem0[0x000000000061A660:word64]
	word64 rdi_371 = rbp_367 - rax_368
	rsi = rbp_367 + 0x0000000000000001 + rax_368
	edi_337 = (word32) rdi_371 (alias)
	word64 rcx_374 = rsi *s rdi_371
	branch rbp_367 >u rsi l000000000040619D
// DataOut: edi fs r11 r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F66:
	branch rsi != (uint64) ((uint128) ((uint64) rcx_374) /u rdi_371) l000000000040619D
// DataOut: edi fs r11 r8 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F77:
	branch rcx_374 >>u 0x0000000000000001 >u 0x00000000FFFFFFFF l000000000040619D
// DataOut: edi fs r11 r8 rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsi_358
	word64 r8_359
	fn00000000004061B0(rsi, edi_337, r8, fs, out rsi_358, out r8_359)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405F8D:
	word64 rax_393 = fn0000000000410C40(rsi, (rcx_374 >>u 0x0000000000000001) * 0x0000000000000008)
	word64 rcx_397 = Mem0[0x000000000061A660:word64]
	branch rbp_367 <=u rcx_397 l0000000000405FE4
// DataOut: fs r11 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:0x00000000FFFFFFFF r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FA6:
	word64 rsi_417 = Mem0[0x000000000061B028:word64]
	word64 rcx_420 = rcx_397 * 0x0000000000000008 + 0x00000008
	word64 rdx_422 = rsi_417 + (rcx_397 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_425 = rsi_417 + (rbp_367 * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FD0:
	Mem429[rdx_422 + 0x0000000000000000:word64] = rax_393
	rdx_422 = rdx_422 + 0x0000000000000018
	rax_393 = rax_393 + rcx_420
	rcx_420 = rcx_420 + 0x0000000000000008
	branch rdx_422 != rsi_425 l0000000000405FD0
// DataOut: fs r11 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000405FE4:
	Mem414[0x000000000061A660:word64] = rbp_367
	rax_307 = 0x0000000000000000
	r8_299 = Mem414[0x000000000061B1B0:word64]
	rsi_300 = Mem414[0x000000000061B028:word64]
	branch rbx_145 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060E0:
	word64 rcx_311 = Mem0[rsi_300 + 0x0000000000000010:word64]
	Mem313[rsi_300:byte] = 0x01
	word64 rdi_309 = rax_307 + 0x0000000000000001
	Mem315[rsi_300 + 0x0000000000000008:word64] = rdi_309 * 0x0000000000000003
	word64 rdx_316 = 0x0000000000000000
// DataOut: fs r11 r8 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060F8:
	Mem322[rcx_311 + rdx_316 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_316 = rdx_316 + 0x0000000000000001
	branch rdx_316 <=u rax_307 l00000000004060F8
// DataOut: fs r11 r8 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406109:
	rsi_300 = rsi_300 + 0x0000000000000018
	branch rdi_309 == rbx_145 l0000000000406004
// DataOut: fs r11 r8 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406116:
	rax_307 = rdi_309
// DataOut: fs r11 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406004:
	word64 rbp_170 = 0x0000000000000000
	branch r8_299 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rbp:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040600F:
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> cl:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406010:
	byte r12b_176
	word64 r9_175
	word64 rax_177 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_170 * 0x0000000000000008:word64], r11, fs, out r9_175, out r12b_176)
	r11 = rax_177
	word64 r14_182 = Mem0[0x000000000061B1B0:word64]
	branch rbx_145 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406033:
	word64 r13_205 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_206 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_207 = 0x0000000000000001
	rsi_214 = rsi_206
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060A7:
	word64 rsi_214
	r9_175 = r9_175 - 0x0000000000000001
	branch Mem0[rsi_214:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060B3:
	word64 r10_250
	branch r12b_176 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406050:
	r10_250 = (uint64) ((uint128) (uint64) rbp_170 /u (uint64) ((uint128) ((uint64) ((rsi_206 - 0x0000000000000001) + rcx_481)) /u rcx_481))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l00000000004060B8:
	r10_250 = (uint64) ((uint128) (uint64) rbp_170 % rcx_481)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040606A:
	word64 rdx_256 = rax_177 + (uint64) (r9_175 != r10_250) * 0x0000000000000002
	word64 rax_259 = Mem0[rsi_214 + 0x0000000000000000:word64] + r10_250 * 0x0000000000000008
	r9_175 = Mem0[rcx_481:word64]
	branch rdx_256 <=u r9_175 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406086:
	Mem269[r14_182 + 0x0000000000000008:word64] = Mem0[r14_182 + 0x0000000000000008:word64] + (rdx_256 - r9_175)
	Mem270[rax_259:word64] = rdx_256
	Mem273[rsi_214:byte] = Mem270[r14_182 + 0x0000000000000008:word64] <u r13_205
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040609A:
	rsi_214 = rsi_214 + 0x0000000000000018
	rcx_207 = rcx_481 + 0x0000000000000001
	word64 rcx_481 = rcx_207
	branch rbx_145 <=u rcx_481 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406120:
	rbp_170 = rbp_170 + 0x0000000000000001
	branch rbp_170 <u r14_182 l0000000000406010
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040612D:
	branch rbx_145 <=u 0x0000000000000001 l0000000000406164
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406133:
	word64 rdx_127 = Mem0[0x000000000061B028:word64]
	word64 rax_129 = rbx_145 * 0x0000000000000003
	branch Mem0[rdx_127 - 0x0000000000000018 + (rax_129 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406149:
	word64 rax_136 = (rax_129 << 0x0000000000000003) + rdx_127
// DataOut: rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040615A:
	rbx_145 = rbx_145 - 0x0000000000000001
	branch rbx_145 != 0x0000000000000001 l0000000000406150
// DataOut: rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406150:
	rax_136 = rax_136 - 0x0000000000000018
	branch Mem0[rax_136 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406164:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000405ED0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> r13:<invalid> r14:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



word64 fn00000000004061B0(word64 rsi, word32 edi, word64 r8, selector fs, ptr64 & rsiOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r8 rsi
// LiveOut: eax r8 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn00000000004061B0_entry:
// DataOut: edi fs r10 r11 r12 r14 r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000010
	qwLoc10 = rbx
	rsp = fp - 0x0000000000000038
	rax = Mem0[fs:0x00000028:word64]
	qwLoc20 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi fs r10 r11 r12 r14 r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax edx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406264_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406267:
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> rcx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = fp - 0x0000000000000038
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(fp - 0x0000000000000038, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rbx = fp - 0x0000000000000038
	rax = fp - 0x0000000000000038
// DataOut: ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebx edx fs r10 r11 r12 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebx ecx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040621D_1:
	rax = rcx
// DataOut: dl eax ebx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r14 r15 r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:fp - 0x0000000000000038 eax:<invalid> rbx:fp - 0x0000000000000038 edx:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040622B:
	rsi = qwLoc20
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l0000000000406269:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l000000000040623D:
	rsp = fp - 0x0000000000000010
	SCZO = cond(fp - 0x0000000000000010)
	rbx = qwLoc10
	rsp = fp - 0x0000000000000008
	rbp = qwLoc08
	rsp = fp
	return rax
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rbp:(uint64) edi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> eax:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:fp - 0x0000000000000038 dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn00000000004061B0_exit:
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
// DataOut: eax r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:rbx eax:<invalid> r8:(uint64) ebp rcx:<invalid> dl:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem25[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490(ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000406490_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	word64 rax_133 = (uint64) Mem0[0x000000000061B034:word32]
	branch (word32) rax_133 == 0x00000000 l0000000000406538
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return rax_133
// DataOut: eax fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx

fn0000000000406490_exit:
// DataOut: eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -8(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 144)
		uses: C_30,eax_33,ebx_15,edi_20,edx_14,esi_17,qwLoc08_4,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 144)
		uses: C_55,eax_40,ebx_50,edi_53,edx_51,esi_48,qwLoc08_4,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem124[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 144)
		uses: C_79,eax_76,ebx_80,edi_66,edx_72,esi_69,qwLoc08_4,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_104
	word64 rbx_105
	byte SCZO_106
	word32 eax_107
	word64 rax_108
	byte SZO_109
	byte C_110
	byte Z_111
	word32 edi_112
	word64 rdi_113
	word64 rdx_114
	word32 esi_115
	word64 rsi_116
	word32 ebx_117
	word32 edx_118
	call sigprocmask (retsize: 8; depth: 144)
		uses: C_100,eax_85,ebx_95,edi_90,edx_98,esi_102,qwLoc08_4,rax_86,rbx_83,rdi_103,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_110,eax_107,ebx_117,edi_112,edx_118,esi_115,rax_108,rbx_105,rdi_113,rdx_114,rsi_116,rsp_104,SCZO_106,SZO_109,Z_111
// DataOut: fs r10 r11 r12 r13 r14 r14b r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF78 rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rcx rdi rdx sil
// LiveOut: r11
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rax rbp rbx rsp
fn0000000000406540_entry:
// DataOut: fs r11 r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_464
	byte r15b_461
	word32 edx_442
	byte r14b_463
	word32 r14d_465
	word64 rbp_406
	byte r14b_150
	word64 r13_12 = rcx
	word64 rbx_157 = rdx
	word64 rdx_33 = Mem0[rdi:word64]
	word64 r12_158 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: fs r11 r12 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069D8:
	word32 r14d_857
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406A08:
	r14d_857 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: fs r11 r13 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406A20:
	r14d_857 = 0x00000000 (alias)
// DataOut: fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406A10:
	word64 r15_875 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_464 = (word32) r15_875 (alias)
	r15b_461 = (byte) r15_875 (alias)
// DataOut: fs r11 r13 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069EA:
	word64 r15_880 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_464 = (word32) r15_880 (alias)
	r15b_461 = (byte) r15_880 (alias)
	r14d_857 = 0x00000001 (alias)
// DataOut: fs r11 r13 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069F7:
	word64 r14_861 = (uint64) (r14d_857 ^ 0x00000001)
	r14d_465 = (word32) r14_861 (alias)
	r14b_463 = (byte) r14_861 (alias)
	r12_158 = rdx_33
// DataOut: fs r11 r12 r13 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r14d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069C6:
	r12_158 = rdx_33
	r14b_150 = 0x00 (alias)
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406580:
	r14d_465 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_826 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b_463 = (byte) r14d_465 (alias)
	r15d_464 = (word32) r15_826 (alias)
	r15b_461 = (byte) r15_826 (alias)
	branch r14b_463 != 0x00 l00000000004065B0
// DataOut: fs r11 r12 r13 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406594:
	word64 rsi_834
	eax = fn0000000000404CD0(0x0000000C, out rsi_834)
	edx_442 = 0x0000000C (alias)
	branch (byte) eax != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r13 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065AB:
// DataOut: fs r11 r12 r13 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065B0:
	word64 rax_490
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: fs r11 r12 r13 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406628:
	rax_490 = (uint64) ((word32) (uint64) r15d_464 & 0x0000F000)
	word32 eax_610 = (word32) rax_490
	branch eax_610 == 0x00008000 l0000000000406868
// DataOut: eax fs r11 r12 r13 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406868:
	branch (r15d_464 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406871:
	word64 rsi_800
	branch (byte) fn0000000000404CD0(0x00000010, out rsi_800) == 0x00 l00000000004068B8
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068B8:
	branch (r15d_464 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068C1:
	word64 rsi_788
	branch (byte) fn0000000000404CD0(0x00000011, out rsi_788) == 0x00 l000000000040693B
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040693B:
	word64 rsi_734
	branch (byte) fn0000000000404CD0(0x00000015, out rsi_734) == 0x00 l000000000040695C
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: fs r11 r12 r13 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040695C:
	branch (word32) (uint64) (r15d_464 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406962:
	word64 rsi_770
	branch (byte) fn0000000000404CD0(0x0000000E, out rsi_770) == 0x00 l000000000040697A
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406985:
	word64 rsi_758
	branch (byte) fn0000000000404CD0(0x00000016, out rsi_758) == 0x00 l00000000004065CF
// DataOut: fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406997:
	edx_442 = 0x00000016 (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406970:
	edx_442 = 0x0000000E (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406952:
	edx_442 = 0x00000015 (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068CF:
	edx_442 = 0x00000011 (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040687F:
	edx_442 = 0x00000010 (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040663B:
	branch eax_610 == 0x00004000 l00000000004068E0
// DataOut: eax fs r11 r12 r13 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_464 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: fs r11 r12 r13 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069A1:
	edx_442 = 0x00000014 (alias)
	word64 rsi_711
	branch (byte) fn0000000000404CD0(0x00000014, out rsi_711) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r13 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004069B8:
// DataOut: fs r11 r12 r13 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068F3:
	branch (r15b_461 & 0x02) == 0x00 l0000000000406910
// DataOut: fs r11 r12 r13 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068F9:
	edx_442 = 0x00000013 (alias)
	word64 rsi_699
	branch (byte) fn0000000000404CD0(0x00000013, out rsi_699) != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r13 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406910:
	edx_442 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_464 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406922:
	word64 rsi_683
	edx_442 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012, out rsi_683) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406646:
	branch eax_610 == 0x0000A000 l0000000000406859
// DataOut: eax fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406859:
	edx_442 = 0x00000007 (alias)
// DataOut: edx fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406651:
	edx_442 = 0x00000008 (alias)
	branch eax_610 == 0x00001000 l00000000004066B0
// DataOut: eax edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040665D:
	edx_442 = 0x00000009 (alias)
	branch eax_610 == 0x0000C000 l00000000004066B0
// DataOut: eax edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406666:
	edx_442 = 0x0000000A (alias)
	branch eax_610 == 0x00006000 l00000000004066B0
// DataOut: eax edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040666F:
	word64 rdx_640 = (uint64) (eax_610 != 0x00002000)
	edx_442 = rdx_640 + 0x000000000000000B + rdx_640
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065B9:
	rax_490 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	edx_442 = (word32) (uint64) Mem0[rax_490 * 0x0000000000000004 + 0x00412C60:word32] (alias)
	branch edx_442 != 0x00000005 l0000000000406680
// DataOut: edx fs r11 r12 r13 r14d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406680:
	r14b_463 = (byte) (uint64) (r14d_465 & DPB(eax, edx_442 == 0x00000007, 0)) (alias)
// DataOut: edx fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406689:
	branch r14b_463 == 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040668E:
	edx_442 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040669C:
	word64 rsi_575
	edx_442 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D, out rsi_575) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065CF:
	word64 rax_493 = DPB(rax_490, strlen(r12_158), 0)
	word64 rbp_494 = Mem0[0x000000000061B120:word64]
	word64 r15_499 = r12_158 + rax_493
	branch rbp_494 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065EA:
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065F0:
	word64 rdx_525 = Mem0[rbp_494:word64]
	branch rax_493 <u rdx_525 l0000000000406610
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004065F9:
	branch strncmp(r15_499 - rdx_525, Mem0[rbp_494 + 0x0000000000000008:word64], rdx_525) == 0x00000000 l00000000004068A0
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068A0:
	branch rbp_494 == 0x0000000000000000 l0000000000406619
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004068A9:
	rbp_406 = rbp_494 + 0x0000000000000010
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406610:
	rbp_494 = Mem0[rbp_494 + 0x0000000000000020:word64]
	branch rbp_494 != 0x0000000000000000 l00000000004065F0
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406619:
	edx_442 = 0x00000005 (alias)
// DataOut: edx fs r11 r12 r13 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> eax:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004066B0:
	rbp_406 = ((uint64) edx_442 << 0x0000000000000004) + 6398944
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004066C0:
	branch Mem0[rbp_406 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: edi fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406890:
	word64 rsi_428
	r14b_150 = (byte) (uint64) fn0000000000404CD0(0x00000004, out rsi_428) (alias)
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004066D0:
	word64 rsi_414
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_414) != 0x00 l0000000000406840
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_406)
	fn0000000000406440(0x000000000061A3F0)
	r14b_150 = 0x01 (alias)
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406570:
	r14b_150 = 0x00 (alias)
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004066FF:
	word64 rbp_183
	word64 r11_173
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004067D8:
	word64 r8_378
	word64 r9_379
	word64 r10_380
	byte r12b_382
	word64 rax_383 = fn00000000004052D0(0x0000000000000000, Mem0[0x000000000061B0E8:word64], r12_158, Mem0[0x000000000061A610:word64], r11, fs, out r8_378, out r9_379, out r10_380, out r11_173, out r12b_382)
	Mem387[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_383
	rbp_183 = rax_383
// DataOut: fs r11 r13 r14b rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406711:
	word64 rax_278 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_278 + 0x0000000000000008 l0000000000406820
// DataOut: fs r11 r12 r13 r14b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406820:
	word64 rsp_331
	word64 r15_332
	word64 r14_333
	word64 rcx_335
	word64 rbp_337
	word64 rdi_338
	word64 rdx_340
	byte SCZO_341
	byte sil_342
	byte SZO_343
	byte C_344
	byte Z_345
	word32 r14d_346
	word64 rax_347
	word32 r15d_348
	word32 ecx_349
	word64 rsi_350
	word32 esi_351
	word32 eax_352
	word32 edx_353
	word32 ebp_355
	word32 edi_356
	byte al_357
	byte dl_358
	byte r15b_359
	byte CZ_360
	word64 r8_363
	word64 r9_364
	word64 r10_365
	byte r12b_366
	call _obstack_newchunk (retsize: 8; depth: 64)
		uses: al_280,C_284,CZ_41,dl_51,eax_279,ebp_44,ecx,edi_43,edx_50,esi,fs,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_18,qwLoc30_24,r10,r11,r12_59,r12b_40,r13_12,r14_60,r14b_45,r14d_47,r15_61,r15b_42,r15d_46,r8,r9,rax_278,rbp_58,rbx_26,rcx,rdi_330,rdx_281,rsi_329,rsp_27,SCZO_283,sil,SZO_62,Z_141
		defs: al_357,C_344,CZ_360,dl_358,eax_352,ebp_355,ecx_349,edi_356,edx_353,esi_351,fs_362,r10_365,r11_361,r12_336,r12b_366,r13_334,r14_333,r14b_354,r14d_346,r15_332,r15b_359,r15d_348,r8_363,r9_364,rax_347,rbp_337,rbx_339,rcx_335,rdi_338,rdx_340,rsi_350,rsp_331,SCZO_341,sil_342,SZO_343,Z_345
	rax_278 = Mem0[rbx_157 + 0x0000000000000018:word64]
// DataOut: fs r11 r12 r13 r14b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406723:
	Mem325[rax_278:word64] = Mem0[0x000000000061B018:word64]
	Mem327[rbx_157 + 0x0000000000000018:word64] = Mem325[rbx_157 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r12 r13 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406732:
	word64 r8_170
	word64 r9_171
	word64 r10_172
	byte r12b_174
	word64 rax_175 = fn00000000004052D0(0x0000000000000000, Mem0[0x000000000061B0E8:word64], r12_158, Mem0[0x000000000061A610:word64], r11, fs, out r8_170, out r9_171, out r10_172, out r11_173, out r12b_174)
	word64 rdx_177 = rax_175 + Mem0[0x000000000061B018:word64]
	Mem185[0x000000000061B018:word64] = rdx_177
	rbp_183 = rax_175
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r13 r14b rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> eax:<invalid> dl:<invalid> edx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406767:
	word64 rax_186 = Mem185[rbx_157 + 0x0000000000000018:word64]
	branch Mem185[rbx_157 + 0x0000000000000020:word64] <u rax_186 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r13 r14b rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406800:
	word64 rsp_235
	word64 r15_236
	word64 r14_237
	word64 rcx_239
	word64 r12_240
	word64 rdi_242
	word64 rdx_244
	byte SCZO_245
	byte sil_246
	byte SZO_247
	byte C_248
	byte Z_249
	word32 r14d_250
	word64 rax_251
	word32 r15d_252
	word32 ecx_253
	word64 rsi_254
	word32 esi_255
	word32 eax_256
	word32 edx_257
	word32 ebp_259
	word32 edi_260
	byte al_261
	byte dl_262
	byte r15b_263
	byte CZ_264
	selector fs_266
	word64 r8_267
	word64 r9_268
	word64 r10_269
	byte r12b_270
	call _obstack_newchunk (retsize: 8; depth: 64)
		uses: al_189,C_192,CZ_147,dl_180,eax_188,ebp_184,ecx_166,edi_149,edx_179,esi_151,fs_145,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_18,qwLoc30_24,r10_172,r11_173,r12_158,r12b_174,r13_159,r14_160,r14b_150,r14d_153,r15_161,r15b_148,r15d_152,r8_170,r9_171,rax_186,rbp_183,rbx_157,rcx_190,rdi_234,rdx_177,rsi_233,rsp_162,SCZO_191,sil_154,SZO_167,Z_182
		defs: al_261,C_248,CZ_264,dl_262,eax_256,ebp_259,ecx_253,edi_260,edx_257,esi_255,fs_266,r10_269,r11_265,r12_240,r12b_270,r13_238,r14_237,r14b_258,r14d_250,r15_236,r15b_263,r15d_252,r8_267,r9_268,rax_251,rbp_241,rbx_243,rcx_239,rdi_242,rdx_244,rsi_254,rsp_235,SCZO_245,sil_246,SZO_247,Z_249
	rax_186 = Mem185[rbx_157 + 0x0000000000000018:word64]
	rdx_177 = Mem185[0x000000000061B018:word64]
// DataOut: fs r11 r13 r14b rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406779:
	Mem229[rax_186:word64] = rdx_177
	Mem231[rbx_157 + 0x0000000000000018:word64] = Mem229[rbx_157 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r13 r14b rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406781:
	word64 rsi_97
	fn0000000000406490(out rsi_97)
	branch r14b_150 != 0x00 l00000000004067A0
// DataOut: fs r11 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_123 = Mem0[0x000000000061B0C8:word64]
	branch (uint64) ((uint128) (uint64) r13_12 /u rcx_123) == (uint64) ((uint128) ((uint64) ((rbp_183 - 0x0000000000000001) + r13_12)) /u rcx_123) l000000000040678B
// DataOut: fs r11
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004067C6:
	fn0000000000406440(0x000000000061A550)
// DataOut: fs r11
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040678B:
	return r11_173
// DataOut: fs r11
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406540_exit:
// DataOut: r11
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 rbp:rbp rbx:rbx rdx:<invalid> r12:r12 r14:r14 rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r15:r15 r8:<invalid> r14d:<invalid> al:<invalid> eax:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	word64 rsi_36
	branch (byte) fn0000000000404CD0(0x00000004, out rsi_36) != 0x00 l0000000000406A58
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, selector fs, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs rdi rdx rsi
// LiveOut: r11 r8 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn0000000000406A80_entry:
// DataOut: ecx fs r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_145 = rdi
	word64 rbx_149 = rsi
	word64 rax_29 = Mem0[fs:0x00000028:word64]
	word64 rax_168 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(64)

l0000000000406AB8:
	rax_168 = strstr(rsi, 0x0000000000413766)
	branch rax_168 == 0x0000000000000000 l0000000000406ADB
// DataOut: fs r12 r13d r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406ACD:
	word32 eax_93 = strlen(rsi)
	rax_168 = DPB(rax_168, eax_93, 0) (alias)
	branch rax_168 <=u 0x0000000000000065 l0000000000406B20
// DataOut: fs r12 r13d r14 r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406B20:
	word64 rsp_108
	word64 r14_109
	word64 r13_110
	word32 r13d_111
	word32 ecx_112
	word64 r12_113
	word64 rdi_114
	word64 rbp_115
	word64 rdx_116
	word64 rbx_117
	word64 rsi_118
	byte SCZO_119
	word64 rax_120
	selector fs_121
	word32 eax_122
	byte SZO_123
	byte C_124
	byte Z_125
	word32 esi_126
	byte CZ_127
	word32 r8d_128
	word64 r8_129
	word64 rcx_130
	word32 r9d_131
	word64 r9_132
	word64 r11_133
	call __mempcpy_chk (retsize: 8; depth: 320)
		uses: C_90,CZ_96,eax_93,ecx,esi,fs,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_18,qwLoc28_23,qwLoc30_30,r11,r12_15,r13_9,r13d_10,r14_91,r8,r8d,r9,r9d,rax_94,rbp_20,rbx_103,rcx_99,rdi_102,rdx_100,rsi_98,rsp_26,SCZO_101,SZO_88,Z_89
		defs: C_124,CZ_127,eax_122,ecx_112,esi_126,fs_121,r11_133,r12_113,r13_110,r13d_111,r14_109,r8_129,r8d_128,r9_132,r9d_131,rax_120,rbp_115,rbx_117,rcx_130,rdi_114,rdx_116,rsi_118,rsp_108,SCZO_119,SZO_123,Z_125
	word64 rsp_140
	word64 r14_141
	word64 r13_142
	word32 r13d_143
	word32 ecx_144
	word64 rdi_146
	word64 rbp_147
	word64 rdx_148
	word64 rsi_150
	byte SCZO_151
	word64 rax_152
	word32 eax_154
	byte SZO_155
	byte C_156
	byte Z_157
	word32 esi_158
	byte CZ_159
	word32 r8d_160
	word64 r8_161
	word64 rcx_162
	word32 r9d_163
	word64 r9_164
	word64 r11_165
	call stpcpy (retsize: 8; depth: 320)
		uses: C_124,CZ_127,eax_122,ecx_112,esi_126,fs_121,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_18,qwLoc28_23,qwLoc30_30,r11_133,r12_113,r13_110,r13d_111,r14_109,r8_129,r8d_128,r9_132,r9d_131,rax_120,rbp_115,rbx_117,rcx_134,rdi_135,rdx_137,rsi_139,rsp_108,SCZO_138,SZO_123,Z_125
		defs: C_156,CZ_159,eax_154,ecx_144,esi_158,fs_153,r11_165,r12_145,r13_142,r13d_143,r14_141,r8_161,r8d_160,r9_164,r9d_163,rax_152,rbp_147,rbx_149,rcx_162,rdi_146,rdx_148,rsi_150,rsp_140,SCZO_151,SZO_155,Z_157
	rax_168 = strcpy(rax_152, rsi_150 + 0x0000000000000002)
// DataOut: fs r12 r13d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> eax:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64) Local -0030(64)

l0000000000406ADB:
	word64 r8_61
	word64 r11_62
	word64 rax_63 = fn0000000000410600(rax_168, rbx_149, 0x00000000000003E9, r12_145, 0x00000000, fs, out r8_61, out r11_62)
	branch (rax_29 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: fs r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l0000000000406B66:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l0000000000406B07:
	return rax_63
// DataOut: fs r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000138 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn0000000000406A80_exit:
// DataOut: r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbp:rbp rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> r14:r14 r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> eax:<invalid> r10:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> -48(fp):<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



void fn0000000000406B70(word64 rbp, word64 rdi, word64 r11, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rbp rdi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000406B70_entry:
// DataOut: fs r11 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012E8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x00000000000012A8
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc12A8 = al
	rax = 0x000000003F3F3F3F
	qwLoc12A7 = 0x000000003F3F3F3F
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc129D = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BA4:
	r13 = fp - 0x00000000000012A8
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x00000000000012A8
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407138:
	bLoc129E = 0x2E
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc129E = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E6D:
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):0x2B -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BC2:
	bLoc129E = 0x00
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:0x3F3F3F3F rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc12B0 = rax
	qwLoc12B8 = rdx
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E88
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r9 = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r15 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407078:
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r9 = rax
// DataOut: fs r11 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:fp - 0x00000000000012A8 rcx:0x0000000000003F3F eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:0x0000000000413764 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407085:
	r12 = fp - 0x0000000000000E88
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E88
	eax = __sprintf_chk(fp - 0x0000000000000E88, 0x0000000000000001, 0x0000000000000E3B, 0x0000000000413779)
	rdx = fp - 0x0000000000000E88
// DataOut: fs r11 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070D8_1:
	rbp = rdx
// DataOut: al fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	r14 = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001278
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	r14 = rax
// DataOut: fs r11 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:0x0000000000413764 r9:<invalid> r8:<invalid> al:al * 0x02 edx:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r8:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r14 r15 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):0x20 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r14 r15 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r14 r15 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> edx:<invalid> r9:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:<invalid> r9:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = fp - 0x0000000000001278
	rax = fn000000000040CD70(rsi, rdi, out rsi)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:0x0000000000413764 r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	qwLoc12E8 = rax
	r8 = fp - 0x00000000000012A8
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413769)
	rdi = rbp
	eax = strlen(rdi)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r14:<invalid> r15:<invalid> r8:<invalid> ax:0x3764 r9:<invalid> al:0x64 edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 4848)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:fp - 0x00000000000012A8 r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407155:
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D01:
// DataOut: fs r11 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = fp - 0x0000000000000E88
	rbp = rbp - (fp - 0x0000000000000E88)
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	fn00000000004057B0(dl, rsi, edi, r8, fs)
	rsp = fp - 0x00000000000012F0
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012E8 rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:fp - 0x0000000000000E88 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r15 r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r15 r8 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407238:
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = fp - 0x0000000000000E88
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	fn00000000004057B0(dl, rsi, edi, r8, fs)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = fp - 0x0000000000000E88
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	fn0000000000405700(edx, rdi, fs)
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:fp - 0x0000000000000E88 r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F60:
	r14 = 0x0000000000413764
// DataOut: fs r11 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	r13 = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r13d r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r14d r15 r8d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = rbp
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413774)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x00000000CCCCCCCD rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	r14 = rax
// DataOut: fs r11 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:fp - 0x00000000000012A8 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r13 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r13 r14 r15 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: ecx edi fs r13 r15 rax rbx rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: ecx edi fs r13 r15 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: ecx edi fs r13 r15 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	fn000000000040AB30(rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040727C:
// DataOut: ecx fs r13 r15 r8d rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r13 r15 r8d rax rbx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r13 r15 r8d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x01 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:0x00 r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs, out r8, out r11)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r13 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r13 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi)
	r9 = rax
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> r9d:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F7F:
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F80:
	r9 = 0x0000000000413764
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> r9d:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r13 r15 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> r9d:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r13 r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> r9d:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, fs, out r8, out r11)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r13 r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> r9d:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out rsi)
	rsp = rsp + 0x0000000000000008
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r13 r15 r8d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r15d:<invalid> r11d:<invalid> r14d:<invalid> ebp:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r15d:<invalid> r11d:<invalid> r14d:<invalid> ebp:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r14d:<invalid> ebp:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000413779)
	rdi = r13
	eax = strlen(rdi)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> ebp:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r13 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r10:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - (fp - 0x0000000000000E88)
	rdi = fp - 0x0000000000000E88
	eax = fputs_unlocked(fp - 0x0000000000000E88, rsi)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v39 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v39
	SCZO = cond(v39)
	r11 = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> r11d:<invalid> r14d:<invalid> ebp:<invalid> dl:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> ecx:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> r12d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v40 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v40
	SCZO = cond(v40)
	r11 = fn0000000000406540(rcx, rdx, sil, rdi, r11, r15, fs)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> ecx:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> r12d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> ecx:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> r12d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> ecx:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r9d:<invalid> edi:<invalid> r12d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040745A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000406B70_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r8:<invalid> dil:<invalid> r15:<invalid> r14:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r9d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4840(fp):<invalid> -4832(fp):<invalid> -4824(fp):<invalid> -4816(fp):<invalid> -4800(fp):0x0000000000000000 -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r13 r14 r15 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E88 rbp:<invalid> r9:<invalid> r8:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r15:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4840(fp):<invalid> -4824(fp):edx -4816(fp):<invalid> -4792(fp):<invalid> -4784(fp):<invalid> -4776(fp):al -4775(fp):0x000000003F3F3F3F -4766(fp):<invalid> -4765(fp):0x00 -3720(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rbp rbx rsp
fn0000000000407870_entry:
// DataOut: fs r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	word64 rax_15 = Mem0[fs:0x00000028:word64]
	fn0000000000406A30()
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040797E:
	word64 rdi_184 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_184 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407987:
	word64 rsi_191
	fn000000000040CD70(fp - 0x00000000000002B8, rdi_184, out rsi_191)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004079A0_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004079A7:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004079C0:
	word64 r8_155
	word64 r9_156
	word64 r10_157
	word32 r15d_159
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B8, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out r8_155, out r9_156, out r10_157, out r11, out r15d_159)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078CD_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078D4:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l00000000004078F9_1:
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407900:
	__printf_chk(0x0000000000000001, 0x0000000000413779)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407911:
	fn0000000000406540(rsi, 0x0000000000000000, 0x00, rdi, r11, r15, fs)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:rsi rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l000000000040792D:
	fn0000000000405D00((word32) (uint64) Mem0[rdi + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rdi + 0x0000000000000028:word32], (byte) (word32) Mem0[rdi + 0x00000000000000B0:byte])
// DataOut: fs
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> eax:<invalid> r8:<invalid> al:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64) Local -0020(64)

l0000000000407948:
	branch (rax_15 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B8 rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> r14d:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -32(fp):<invalid> -16(fp):rbx -8(fp):rbp



word32 fn00000000004079F0(ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax rsp
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	word64 rsp_1
	*rspOut = fp
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return eax
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_43 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_45
	byte SCZO_46
	byte CZ_47
	word64 r15_48
	word64 r14_49
	word64 r13_50
	word64 r12_51
	word64 rbp_52
	word64 rbx_53
	word32 eax_54
	word64 rax_55
	call Mem0[rax_43 * 0x0000000000000008 + 0x00412308:word64] (retsize: 4; depth: 108)
		uses: CZ_4,eax_44,qwLoc08_25,qwLoc10_28,qwLoc18_31,qwLoc20_34,qwLoc28_37,qwLoc30_40,r12,r13,r14,r15,rax_43,rbp,rbx,rsp_41,SCZO_42
		defs: CZ_47,eax_54,r12_51,r13_50,r14_49,r15_48,rax_55,rbp_52,rbx_53,rsp_45,SCZO_46
	return eax_54
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000407EA0(word64 rcx, word32 edx, word64 rsi, word64 rdi, word64 r8, word64 r10, word64 r11, word64 r14, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r10 r11 r14 r15 r8 rcx rdi rsi
// LiveOut: ebx r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edi edx esi fs r10 r11 r12 r12d r14 r15 r8 rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = rbp
	rbp = fp - 0x0000000000000008
	rsp = fp - 0x0000000000000010
	qwLoc10 = r15
	rsp = fp - 0x0000000000000018
	qwLoc18 = r14
	rsp = fp - 0x0000000000000020
	qwLoc20 = r13
	r13 = (uint64) esi
	rsp = fp - 0x0000000000000028
	qwLoc28 = r12
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000003A8
	dwLoc038C = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -038C(0)

l0000000000408400:
	rax = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x00000000AAAAAAAA)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r9 rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CEC:
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: ebx edx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut: fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rbp rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000405020:
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000008
	Mem0[rsp:word64] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000008
	rax = __errno_location()
	Mem0[rax:word32] = 0x00000000
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbx
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	call strcoll (retsize: 8; depth: 8)
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408CBC:
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0398 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0398
// DataOut: cl fs r10 r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000003A8 rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x00000000AAAAAAAA rcx:<invalid> r9:<invalid> rdi:<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004089F9:
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408374:
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408355:
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F46:
	SCZO = cond(bLoc038C - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l000000000040893D:
	rdi = 0x0000000000000012
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l0000000000408956:
	rdi = 0x0000000000000014
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040896F:
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040827E:
// DataOut: al eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0398 = rdx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0) Local -0398(64)

l0000000000408317:
	rdi = 0x0000000000000015
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0398
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408330:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> sil:Test(EQ,Z) r12:<invalid> al:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx esi fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r12:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F74:
	r15d = (word32) Mem0[r10:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx esi fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rbp rbx rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408670:
	rdi = rbx
	dwLoc039C = ecx
	dwLoc0390 = esi
	qwLoc0398 = rdx
	eax = strlen(rdi)
	rdx = qwLoc0398
	r12 = rax
	rdi = rdx
	eax = strlen(rdi)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0398
	rsi = (uint64) dwLoc0390
	rcx = (uint64) dwLoc039C
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408B3A:
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rax rbp rbx rdx sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> eax:<invalid> sil:<invalid> al:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)

l0000000000407FF0:
	SCZO = cond(bLoc038C - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0398 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0398
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B5E:
	dwLoc0398 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0398
	al = Test(EQ,Z)
// DataOut: al eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):ecx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408906:
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):rcx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc0390 = esi
	dwLoc0398 = edx
	eax = fn0000000000404CD0(edi, out rsi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0398
	rsi = (uint64) dwLoc0390
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0390(64) Local -0398(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc0390
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083C8:
	dwLoc0390 = esi
	dwLoc0398 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc0390
	rdx = (uint64) dwLoc0398
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0398 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040806D:
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -0398(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0398
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040846B:
	dwLoc0398 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0398
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089C9:
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B40:
	dwLoc0398 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0398
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408841:
	dwLoc0390 = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0398 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc0390
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):edx -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 -924(fp):ecx -920(fp):<invalid> -912(fp):edx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r10 r11 r12 r13d r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080D9:
	v45 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v45
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(r11, r15, fs, out rsp, out rbp, out r8, out r9, out r10, out r11, out r12, out r13, out r14, out r15)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004084F6:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0A:
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B98:
	rax = fn0000000000410E30(rdi, out rsi)
	r13 = rax
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408557:
	eax = strlen(rdi)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B8D:
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004085FC:
// DataOut: eax fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r10 r11 r13 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r10 r11 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: fs r10 r11 r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: fs r10 r11 r13 r13d r14 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: fs r10 r11 r12 r14 r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r10 r11 r12 r13d r15 r15d r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r10 r11 r12 r13d r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BC7_1:
	edx = eax
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408BCA:
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	eax = __sprintf_chk(rdi, 0x0000000000000001, 0x0000000000000015, 0x000000000041375A)
	rdx = r15
// DataOut: fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r10 r11 r12 r15d r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r10 r11 r12 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AE8_1:
	rdx = rcx
// DataOut: al edx fs r10 r11 r12 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rsi, edi, r8, fs, out rsi, out r8)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r10 r11 r12 r13 r13d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408765:
	rax = (uint64) Mem0[0xFFFFFFFFCCCCCCF5:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A30:
	rdi = Mem0[0xFFFFFFFFCCCCCD0D:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out r8, out r9, out r10, out r11, out r15d)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(esi, rdi, fs, out rsi)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408A68:
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408779:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r10 r11 r12 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r10 r11 r12 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087BA:
	rax = Mem0[0xFFFFFFFFCCCCCD05:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out rsi)
	rdi = rax
	eax = strlen(rdi)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r10 r11 r12 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000CCCCCCCD r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	eax = fn0000000000405810(edi, r11, r15, fs, out rsi, out r8, out r9, out r10, out r11, out r13, out r14, out r15)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407FE4:
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rdi, out rsi)
	v42 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v42
	SCZO = cond(v42)
	Mem0[rsi:word64] = rax
// DataOut: fs r10 r11 r12 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r10:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> r11d:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: fs r10 r11 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: ebx fs r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

fn0000000000407EA0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r10 (=> r10Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: ebx r10 r11 r12 r12d r13 r13d r14 r15 r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r11d:<invalid> r13b:<invalid> -924(fp):ecx -920(fp):<invalid> -912(fp):<invalid> -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r10 r11 r13 r13d r14 r15 r8 r9 rax rbp rbx rcx rdi rdx rsp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000008 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> -920(fp):rcx -908(fp):edx -64(fp):<invalid> -48(fp):rbx -40(fp):r12 -32(fp):r13 -24(fp):r14 -16(fp):r15 -8(fp):rbp
// LocalsOut: Local -038C(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005))
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005), Mem0[0x000000000061A610:word64])
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005))
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005))
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word32 eax_290 = fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005), rbp_283)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 32)
		uses: C_294,eax_290,ebx_11,ecx,edi_254,edx,esi,qwLoc08_4,qwLoc10_8,rax_291,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BB2:
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BFF:
	word64 rsi_341
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_341)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> eax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409BC8:
	word64 rsi_319
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_319)
	__printf_chk(0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

l0000000000409768:
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005))
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -16(fp):rbx -8(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax fs r10 r11 r12 r13 r13b r14 r15 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409D20_entry:
	*rsiOut = rsi
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 rbx_181 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r10 r11 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D55_1:
	rbx_181 = rsi + 0x0000000000000001
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D59:
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D60:
	branch malloc(rbx_181) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D70:
	word64 rsp_136
	word64 r15_137
	word64 rsi_138
	word64 rax_139
	word64 r14_140
	word64 r13_141
	word64 rdi_142
	word64 r12_143
	word64 rbp_144
	word64 rbx_145
	word32 ebx_146
	byte SCZO_147
	byte CZ_148
	byte SZO_149
	byte C_150
	byte Z_151
	word64 rdx_152
	byte S_153
	word32 eax_154
	word32 edx_155
	call readlink (retsize: 8; depth: 80)
		uses: C_55,CZ_41,dwLoc3C,eax_52,ebx_42,edx_40,qwLoc08_4,qwLoc10_11,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc48,r12_45,r13_132,r14_47,r15_48,rax_130,rbp_56,rbx_131,rdi_135,rdx_133,rsi_134,rsp_49,S_38,SCZO_43,SZO_53,Z_54
		defs: C_150,CZ_148,eax_154,ebx_146,edx_155,r12_143,r13_141,r14_140,r15_137,rax_139,rbp_144,rbx_145,rdi_142,rdx_152,rsi_138,rsp_136,S_153,SCZO_147,SZO_149,Z_151
	branch rax_139 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r10 r11 r12 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DD8:
	word64 rax_219 = __errno_location()
	word32 edx_223 = (word32) (uint64) Mem0[rax_219:word32]
	branch edx_223 == 0x00000022 l0000000000409D86
// DataOut: edx fs r10 r11 r12 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DE4:
	free(rbp_144)
	Mem232[rax_219:word32] = (word32) (uint64) edx_223
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D86:
	branch rbx_145 >u rax_139 l0000000000409E08
// DataOut: fs r10 r11 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E08:
	Mem202[rbp_144:byte] = 0x00
	return rbp_144
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409D8B:
	free(rbp_144)
	branch rbx_145 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DC0:
	branch rbx_145 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409E20:
	Mem184[__errno_location():word32] = 0x0000000C
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409DC5:
	rbx_181 = 0x00000000FFFFFFFF
// DataOut: fs r10 r11 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409D98:
	branch malloc(rbx_145 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r10 r11 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAB:
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000409DAD:
	return 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409D20_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx rdi:<invalid> rbp:rbp r12:r12 rdx:<invalid> rsi:<invalid> -72(fp):<invalid> -60(fp):edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409E50(word64 rcx, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx rdi rdx rsi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000409E50_entry:
// DataOut: ebp ebx fs r10 r11 r14b r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc50_109
	word64 rax_105
	word64 rax_32 = DPB(rax, strlen(rdi), 0)
	word64 rbp_126 = rdx
	word64 r14_127 = Mem0[rsi:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F72
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0058(64)

l0000000000409F72:
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409E81:
	byte bLoc41_108 = 0x00
	qwLoc50_109 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_110 = 0x0000000000000000
	rax_122 = rax_32
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:rdx eax:<invalid> r14:<invalid> -88(fp):rdi -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EE8:
	word64 rax_122
	branch strncmp(r14_127, rdi, rax_32) != 0x00000000 l0000000000409ED8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EFB:
	rax_122 = DPB(rax_122, strlen(r14_127), 0) (alias)
	branch rax_122 == rax_32 l0000000000409F60
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(0) Local -0058(64)

l0000000000409F60:
	return rbx_110
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000409F08:
	branch qwLoc50_109 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409EA0:
	rax_122 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(32) Local -0050(64) Local -0058(64)

l0000000000409F50:
	bLoc41_108 = 0x01
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409EAE:
	byte cl_198 = (byte) (word32) bLoc41_108
	rax_122 = 0x0000000000000001
	branch memcmp(qwLoc50_109 *s rcx + rdx, rbp_126, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:rdx ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED1_1:
	cl_198 = 0x01 (alias)
// DataOut: cl fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0050(0) Local -0058(64)

l0000000000409ED4:
	bLoc41_108 = cl_198
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:0x00000001 r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> rax:0x0000000000000001 ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409ED8:
	rbx_110 = rbx_110 + 0x0000000000000001
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 == 0x0000000000000000 l0000000000409F28
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F10:
	rbx_110 = rbx_110 + 0x0000000000000001
	qwLoc50_109 = rbx_110
	rbp_126 = rbp_126 + rcx
	r14_127 = Mem0[rsi + rbx_110 * 0x0000000000000008:word64]
	branch r14_127 != 0x0000000000000000 l0000000000409EE8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0040(64) Local -0041(0) Local -0050(0) Local -0058(64)

l0000000000409F25:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:rdi rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0041(0) Local -0050(64)

l0000000000409F28:
	rax_105 = 0xFFFFFFFFFFFFFFFE
	branch bLoc41_108 != 0x00 l0000000000409F3B
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32) Local -0050(64)

l0000000000409F36:
	rax_105 = qwLoc50_109
// DataOut: al eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:0xFFFFFFFFFFFFFFFE ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0030(32)

l0000000000409F3B:
	return rax_105
// DataOut: al eax ebp ebx fs r10 r11 r14b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:rsi r12:rcx rbp:<invalid> eax:<invalid> r14:<invalid> rax:<invalid> r13:rax rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000409E50_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r12:r12 rbp:rbp eax:<invalid> r14:r14 rax:<invalid> rbx:rbx r13:r13 rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -88(fp):rdi -80(fp):<invalid> -65(fp):<invalid> -64(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn0000000000409F80(word64 rdx, word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15 rdx
// LiveOut: r10 r11 r15 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000409FA4:
	word64 r15_27
	word64 r11_28 = fn000000000040EBF0(0x00000001, r11, r15, fs, out r15_27)
	word64 r9_37
	word64 r10_38
	word64 r11_39
	word64 r15_40
	fn000000000040E970(0x00000006, 0x00000000, r11_28, r15_27, fs, out r9_37, out r10_38, out r11_39, out r15_40)
	word64 rsp_57
	word64 r12_58
	word64 rdx_59
	byte SCZO_60
	word32 edx_61
	word64 rbp_62
	word64 rdi_63
	word64 rbx_64
	word64 rsi_65
	byte Z_66
	word32 esi_67
	word32 edi_68
	byte SZO_69
	byte C_70
	word64 rax_71
	word64 r8_72
	word64 rcx_73
	word32 eax_74
	word64 r11_75
	word64 r15_76
	selector fs_77
	word64 r9_78
	word64 r10_79
	call error (retsize: 8; depth: 8)
		uses: C_56,edi_33,esi_31,fs,qwLoc08_4,qwLoc10_11,qwLoc18_16,r10_38,r11_39,r12_50,r15_40,r8_45,r9_37,rax_54,rbp_48,rbx_43,rcx_47,rdi_53,rdx_46,rsi_52,rsp_51,SCZO_6,SZO_55,Z_7
		defs: C_70,eax_74,edi_68,edx_61,esi_67,fs_77,r10_79,r11_75,r12_58,r15_76,r8_72,r9_78,rax_71,rbp_62,rbx_64,rcx_73,rdi_63,rdx_59,rsi_65,rsp_57,SCZO_60,SZO_69,Z_66
	return rbx_64
// DataOut: fs r10 r11 r15 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000409F80_exit:
// DataOut: r10 r11 r15 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



void fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	fputs_unlocked(dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005), Mem0[0x000000000061A650:word64])
	word64 r15_180 = rdi
	word64 r14_11 = 0x0000000000000000
	word64 r13_17 = rdx
	word64 rbp_176 = rsi
	word64 rbx_175 = 0x0000000000000000
	branch Mem0[rdi:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_175 == 0x0000000000000000 l000000000040A050
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A08B:
	branch memcmp(r14_11, rbp_176, r13_17) != 0x00000000 l000000000040A050
// DataOut: fs r11 r13 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A050:
	word64 rbp_191
	word64 r8_192
	word64 r9_193
	word64 r10_194
	word64 r12_196
	fn000000000040EC10(r11, r15_180, fs, out rbx_175, out rbp_191, out r8_192, out r9_193, out r10_194, out r11, out r12_196, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E4A)
	rbp_176 = rbp_191 + r13_17
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] == 0x0000000000000000 l000000000040A0D0
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A09D:
	word64 r8_226
	word64 r9_227
	word64 r10_228
	word64 r12_230
	fn000000000040EC10(r11, r15_180, fs, out rbx_175, out rbp_176, out r8_226, out r9_227, out r10_228, out r11, out r12_230, out r13_17, out r14_11, out r15_180)
	__fprintf_chk(Mem0[0x000000000061A650:word64], 0x0000000000000001, 0x0000000000415E52)
	branch Mem0[r15_180 + rbx_175 * 0x0000000000000008:word64] != 0x0000000000000000 l000000000040A086
// DataOut: fs r11 r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:rdi rdi:<invalid> r14:<invalid> r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0D0:
	word64 rdi_67 = Mem0[0x000000000061A650:word64]
	word64 rax_69 = Mem0[rdi_67 + 0x0000000000000028:word64]
	branch rax_69 >=u Mem0[rdi_67 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0FB:
	word64 rsp_135
	word64 r15_136
	word64 rdi_137
	word32 edi_138
	byte SZO_139
	byte C_140
	word64 r14_141
	word32 r14d_142
	word64 r13_143
	word64 rdx_144
	word32 edx_145
	word64 r12_146
	word64 rbp_147
	word64 rsi_148
	word32 esi_149
	word64 rbx_150
	byte SCZO_151
	word64 rax_152
	word32 ebx_153
	word32 eax_154
	byte Z_155
	word64 rcx_156
	word64 r11_157
	selector fs_158
	word64 r8_159
	word64 r9_160
	word64 r10_161
	call __overflow (retsize: 8; depth: 8)
		uses: C_72,eax_70,ebx_56,edi_68,edx,esi,fs,qwLoc08_4,qwLoc10_10,qwLoc18_15,qwLoc20_21,qwLoc28_24,qwLoc30_30,r10_50,r11_53,r12_127,r13_129,r14_131,r14d_58,r15_133,r8_52,r9_51,rax_69,rbp_125,rbx_123,rcx_54,rdi_67,rdx_60,rsi_122,rsp_134,SCZO_121,SZO_59,Z_55
		defs: C_140,eax_154,ebx_153,edi_138,edx_145,esi_149,fs_158,r10_161,r11_157,r12_146,r13_143,r14_141,r14d_142,r15_136,r8_159,r9_160,rax_152,rbp_147,rbx_150,rcx_156,rdi_137,rdx_144,rsi_148,rsp_135,SCZO_151,SZO_139,Z_155
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A0E1:
	Mem101[rdi_67 + 0x0000000000000028:word64] = rax_69 + 0x0000000000000001
	Mem102[rax_69:byte] = 0x0A
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040A120(word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A120_entry:
// DataOut: fs r11 r8 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rax_38 = fn0000000000409E50(r8, rcx, rdx, rsi)
	branch rax_38 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rsp_77
	word64 rbp_78
	word64 r9_79
	word64 r10_80
	word64 r11_81
	word64 r15_82
	word64 rbx_83 = fn0000000000409F80(rax_38, r11, r8, fs, out rsp_77, out rbp_78, out r9_79, out r10_80, out r11_81, out r15_82)
	fn000000000040A000(r15_82, rbp_78, rbx_83, r11_81, fs)
	word64 rsp_87
	word64 r15_88
	word64 r8_89
	word64 r14_90
	word64 rdi_91
	word64 r13_92
	word64 r9_93
	word64 r12_94
	word64 rsi_95
	word64 rbp_96
	word64 rcx_97
	word64 rbx_98
	word64 rdx_99
	byte SCZO_100
	word64 rax_101
	byte SZO_102
	byte C_103
	byte S_104
	word64 r11_105
	selector fs_106
	word64 r10_107
	call r9 (retsize: 8; depth: 8)
		uses: C_41,fs,qwLoc08_4,qwLoc10_9,qwLoc18_14,qwLoc20_19,qwLoc28_25,qwLoc30_31,r10_80,r11_81,r12_21,r13_16,r14_11,r15_82,r8,r9_79,rax_38,rbp_78,rbx_83,rcx_28,rdi_86,rdx_84,rsi_85,rsp_77,S_40,SCZO_37,SZO_39
		defs: C_103,fs_106,r10_107,r11_105,r12_94,r13_92,r14_90,r15_88,r8_89,r9_93,rax_101,rbp_96,rbx_98,rcx_97,rdi_91,rdx_99,rsi_95,rsp_87,S_104,SCZO_100,SZO_102
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:r8 r14:rdi r13:r9 r12:rsi rdi:<invalid> rbp:rcx rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> ecx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> eax:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> al:0xFF cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040A2B0(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esi rax rbp rcx rdx rsi si sil
// Preserved: rbp rbx rsp
fn000000000040A2B0_entry:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2E0:
	word64 rax_50 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EB:
	rdx_27 = rax_50
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2DC:
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp
// LocalsOut: fp(64)

l000000000040A2F3:
	return rdx_27
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r10 r11 r12 r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: rbx rsp
fn000000000040A400_entry:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_24 = DPB(rax, strlen(rdi), 0)
	branch rax_24 <=u 0x0000000000000001 l000000000040A41A
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A40F:
	word64 rdx_33 = rax_24 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_24:byte] == 0x2F l000000000040A420
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A420:
	rax_24 = rdx_33
	branch rdx_33 != 0x0000000000000001 l000000000040A40F
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A429:
	return rdx_33
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

l000000000040A41A:
	return rax_24
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040A400_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid>

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsi_8
	word64 rdi_9
	word32 r14d_10
	word64 rax_11 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsi_8, out rdi_9, out r14d_10)
	branch rax_11 == 0x0000000000000000 l000000000040A623
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A623:
	fn0000000000410E50()
// DataOut: fs r10 r11 r12 r13 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_25
	word64 rsi_26
	word64 rdi_27
	word32 r14d_28
	return fn000000000040A630(rdx_7, rsi_8, rdi_9, out rdx_25, out rsi_26, out rdi_27, out r14d_28)
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_11
// DataOut: fs r10 r11 r12 r13 r14d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rdi rdx rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040A630_entry:
// DataOut: fs r10 r11 r14d r8 r9 rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_31
	word64 rax_32 = fn000000000040A390(rdi, out rsi_31)
	word64 rax_35 = fn000000000040A400(rax_32)
	word64 rdx_39 = rax_32 - rdi
	*rdxOut = rdx_39
	word64 r14_10 = 0x0000000000000000
	word64 rsi_43 = rdx_39 + rax_35
	*rsiOut = rsi_43
	branch rax_35 == 0x0000000000000000 l000000000040A679
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A66D:
	r14_10 = (uint64) (Mem0[rax_32 - 0x0000000000000001 + rax_35:byte] != 0x2F) (alias)
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A679:
	word64 rbx_131 = rsi + 0x0000000000000001
	branch Mem0[rsi:byte] == 0x2F l000000000040A700
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A700:
	rbx_131 = rbx_131 + 0x0000000000000000
	branch Mem0[rbx_131:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A70D:
	rbx_131 = rbx_131 + 0x0000000000000001
	branch Mem0[rbx_131 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A71A:
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0048(64)

l000000000040A682:
	word64 rax_114
	word64 rax_56 = DPB(rax_35, strlen(rbx_131), 0)
	word64 rdi_60 = rsi_43 + 0x0000000000000001 + r14_10 + rax_56
	*rdiOut = rdi_60
	word64 rax_61 = malloc(rdi_60)
	branch rax_61 == 0x0000000000000000 l000000000040A720
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> -72(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64) Local -0048(64)

l000000000040A720:
	rax_114 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6A8:
	word64 rax_101 = mempcpy(rax_61, rdi, rsi_43)
	Mem105[rax_101:byte] = 0x2F
	word64 rdi_106 = rax_101 + r14_10
	*rdiOut = rdi_106
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: fs r10 r11 r13 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6C3:
	Mem125[rdi_106:word64] = rdi_106 - (uint64) (Mem105[rsi:byte] == 0x2F)
// DataOut: fs r10 r11 r13 r8 r9 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32) Local -0040(64)

l000000000040A6D5:
	Mem113[mempcpy(rdi_106, rbx_131, rax_56):byte] = 0x00
	word64 rdx_110
	*rdxOut = rax_56
	word64 rsi_111
	*rsiOut = rbx_131
	rax_114 = rax_61
// DataOut: fs r10 r11 r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(32)

l000000000040A6E8:
	word32 r14d_89
	*r14dOut = (word32) r14
	return rax_114
// DataOut: fs r10 r11 r14d r8 r9 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) eax:<invalid> rcx:<invalid> rax:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040A630_exit:
// DataOut: r14d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 rbp:rbp rbx:rbx rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> eax:<invalid> rcx:<invalid> rax:<invalid> r13:r13 al:<invalid> edx:<invalid> ecx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040A730(word64 rdi, word32 r14d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
// DataOut: r14d rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_116 = Mem0[rdi:word64]
	byte cl_119 = (byte) (word32) Mem0[rdx_116:byte]
	branch cl_119 == 0x00 l000000000040A7CD
// DataOut: cl r14d rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_130 = 0x00
	word64 rax_100 = 0x0000000000000000
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_130 != 0x00 l000000000040A750
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_130 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_119 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_119 == 0x2E l000000000040A7B8
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_100 == 0x0000000000000000 l000000000040A7C8
// DataOut: r10 r14d rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
	rax_100 = rdx_116
// DataOut: r10 r14d rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	r8b_130 = 0x01 (alias)
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	word32 esi_104 = (int32) cl_119
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl esi r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	branch (word32) (uint64) ((word32) (uint64) (esi_104 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:(int32) cl r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A761:
	branch cl_119 == 0x7E l000000000040A768
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_100 = 0x0000000000000000
// DataOut: r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_116 = rdx_116 + 0x0000000000000001
	Mem85[rdi:word64] = rdx_116
	cl_119 = (byte) (word32) Mem85[rdx_116:byte] (alias)
	branch cl_119 == 0x00 l000000000040A7B0
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	rdx_116 = rdx_116 + 0x0000000000000001
	Mem117[rdi:word64] = rdx_116
	cl_119 = (byte) (word32) Mem117[rdx_116:byte] (alias)
	branch cl_119 != 0x00 l000000000040A776
// DataOut: cl r10 r14d r8b rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7A6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030 rsi:<invalid>

l000000000040A7B0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:<invalid> rax:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:<invalid> r10:<invalid> esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



void fn000000000040AB30(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AB30_entry:
// DataOut: fs r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB30:
	word32 eax_10 = clock_gettime(0x0000000000000000, rdi)
	branch eax_10 == 0x00000000 l000000000040AB67
// DataOut: fs r13 r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64) Local -0018(64)

l000000000040AB46:
	word64 rsp_36
	word64 rbx_37
	word64 rsi_38
	word64 rdi_39
	word32 edi_40
	byte SZO_41
	byte C_42
	byte SCZO_43
	word32 eax_44
	byte Z_45
	word32 esi_46
	word64 rax_47
	call gettimeofday (retsize: 8; depth: 32)
		uses: C_33,eax_10,edi,esi_31,qwLoc08_4,rax,rbx_7,rdi_34,rsi_30,rsp_9,SCZO,SZO_32,Z_12
		defs: C_42,eax_44,edi_40,esi_46,rax_47,rbx_37,rdi_39,rsi_38,rsp_36,SCZO_43,SZO_41,Z_45
	Mem50[rbx_37:word64] = qwLoc18
	Mem55[rbx_37 + 0x0000000000000008:word64] = qwLoc10 *s 1000
// DataOut: fs r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:rdi rbx:rdi rdi:<invalid> eax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return
// DataOut: fs r13 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rsi:<invalid> rbx:rdi rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx

fn000000000040AB30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rbx:rbx rdi:<invalid> eax:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040AB70(word64 rax, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return 0x0000000000000001
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	byte Z_42 = cond(Mem0[rax_13:byte] - 0x43)
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	Z_42 = cond(Mem0[rax_13 + 0x0000000000000001:byte]) (alias)
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_48
	*rsiOut = rax_13
	word64 rdi_50 = 0x0000000000415E6A
	word64 rcx_52 = 0x0000000000000006
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_52 == 0x0000000000000000 l000000000040ABA7
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	Z_42 = cond(Mem0[rsi_102:byte] - Mem0[rdi_103:byte]) (alias)
	*rsiOut = rsi_102 + 0x0000000000000001
	rdi_50 = rdi_103 + 0x0000000000000001
	rcx_52 = rcx_52 - 0x0000000000000001
	word64 rsi_102 = rsi_48
	word64 rdi_103 = rdi_50
	branch Mem0[rsi_102:byte] != Mem0[rdi_103:byte] l000000000040ABA5
// DataOut: ebx fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return DPB(rax_13, Z_42, 0)
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return 0x0000000000000000
// DataOut: al ebx fs r10 r11 r12 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



word64 fn000000000040ABC0(word64 rdi, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: r8 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_129
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_129 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_129 = 0x000000000000000B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
	word64 r9_29
	*r9Out = 0x00000000AAAAAAAB
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_102
	branch rdi_129 <=u 0x0000000000000009 l000000000040AC48
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC48:
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABE6:
	word64 rdx_rax_89 = rdi_129 *u 0x00000000AAAAAAAB
	branch rdi_129 == (rdx_rax_89 >>u 0x0000000000000001) + (rdx_rax_89 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040ABF8:
	word64 r8_103
	*r8Out = 0x0000000000000010
	word64 rsi_101 = 0x0000000000000009
	rcx_102 = 0x0000000000000003
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC21:
	rsi_101 = rsi_101 + r8_103
	*rsiOut = rsi_101
	rcx_102 = rcx_102 + 0x0000000000000002
	branch rsi_101 <u rdi_129 l000000000040AC10
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC10:
	*r8Out = r8_103 + 0x0000000000000008
	branch (uint64) (rdi_129 % rcx_102) == 0x0000000000000000 l000000000040AC3A
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_129 % rcx_102) != 0x0000000000000000 l000000000040AC44
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC3A:
	rdi_129 = rdi_129 + 0x0000000000000002
	branch rdi_129 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

l000000000040AC44:
	return rdi_129
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>

fn000000000040ABC0_exit:
// DataOut: r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> rsi:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rsi
// Trashed: SCZO ah al ax di dil eax edi esi rax rdi rsi si sil
// Preserved: rbx rsp
fn000000000040AC80_entry:
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word64] (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

l000000000040AC94:
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al fs r10 r11 r12 r13 r13b r14 r15 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rdi:<invalid> rsi:<invalid> -8(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rsiOut, ptr64 & r9Out, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: r10 r9 rax rsi
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi r10 r10b r10d r10w r9 r9b r9d r9w rax rcx rdi rsi si sil
// Preserved: r12 r13 r14 rbp rbx rsp
fn000000000040ACB0_entry:
	*r9Out = r9
	*r10Out = r10
// DataOut: cl ecx fs r10 r11 r15 r8 r9 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_28
	word64 rax_29 = fn000000000040AC80(rax, rdi, out rsi_28)
	Mem31[rsi_28:word64] = rax_29
	byte r13b_13 = (byte) r13_11
	word64 rbp_143 = rdi
	word64 rsi_109 = Mem31[rax_29:word64]
	*rsiOut = rsi_109
	word64 rbx_142 = rax_29
	branch rsi_109 == 0x0000000000000000 l000000000040AD4F
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACD7:
	branch rsi == rsi_109 l000000000040ACE9
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACDC:
	word64 rsp_168
	word64 r14_169
	word64 rdx_170
	word64 r13_171
	word32 r13d_172
	word32 ecx_173
	word64 rsi_175
	word64 rdi_177
	word64 rax_179
	byte SZO_180
	byte C_181
	byte Z_182
	byte SCZO_183
	byte al_184
	word32 esi_185
	word64 r9_187
	word64 r10_189
	word64 rcx_191
	word64 r12_174
	call Mem31[rdi + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_30,C_37,ecx,esi_33,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10,r11,r12_18,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_29,rbp_23,rbx_34,rcx,rdi_167,rdx,rsi_32,rsp_24,SCZO_99,SZO_35,Z_100
		defs: al_184,C_181,ecx_173,esi_185,r10_189,r11_190,r12_174,r13_171,r13b_186,r13d_172,r14_169,r8_188,r9_187,rax_179,rbp_176,rbx_178,rcx_191,rdi_177,rdx_170,rsi_175,rsp_168,SCZO_183,SZO_180,Z_182
	branch al_184 == 0x00 l000000000040AD46
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD46:
	word64 rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_216 != 0x0000000000000000 l000000000040AD30
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD30:
	rsi_109 = Mem31[rax_216:word64]
	*rsiOut = rsi_109
	branch rsi_109 == r12_174 l000000000040AD67
// DataOut: al fs r10 r11 r12 r13b r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD38:
	word64 rsp_268
	word64 r14_269
	word64 rdx_270
	word64 r13_271
	word32 r13d_272
	word32 ecx_273
	word64 rsi_275
	word64 rdi_277
	word64 rax_279
	byte SZO_280
	byte C_281
	byte Z_282
	byte SCZO_283
	byte al_284
	word32 esi_285
	word64 r9_287
	word64 r8_288
	word64 r10_289
	word64 r11_290
	word64 rcx_291
	call Mem31[rbp_143 + 0x0000000000000038:word64] (retsize: 8; depth: 48)
		uses: al_217,C_220,ecx_202,esi_222,qwLoc08_4,qwLoc10_9,qwLoc18_16,qwLoc20_21,qwLoc28_26,r10_208,r11_197,r12_212,r13_213,r13b_199,r13d_203,r14_214,r8_198,r9_207,rax_216,rbp_211,rbx_210,rcx_209,rdi_267,rdx_204,rsi_221,rsp_215,SCZO_223,SZO_218,Z_224
		defs: al_284,C_281,ecx_273,esi_285,r10_289,r11_290,r12_274,r13_271,r13b_286,r13d_272,r14_269,r8_288,r9_287,rax_279,rbp_276,rbx_278,rcx_291,rdi_277,rdx_270,rsi_275,rsp_268,SCZO_283,SZO_280,Z_282
	branch al_284 != 0x00 l000000000040AD60
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD60:
	rax_216 = Mem31[rbx_142 + 0x0000000000000008:word64]
	*rsiOut = Mem31[rax_216:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD6C:
	Mem250[rbx_142 + 0x0000000000000008:word64] = Mem31[rax_216 + 0x0000000000000008:word64]
	Mem251[rax_216:word64] = 0x0000000000000000
	Mem253[rax_216 + 0x0000000000000008:word64] = Mem251[rbp_143 + 0x0000000000000048:word64]
	Mem254[rbp_143 + 0x0000000000000048:word64] = rax_216
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040AD42:
	rbx_142 = Mem31[rbx_142 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD4F:
	word64 rsi_89
	*rsiOut = 0x0000000000000000
	return 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

l000000000040ACE6:
	*rsiOut = Mem31[rbx_142:word64]
// DataOut: fs r10 r11 r13b r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: fs r10 r11 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACEE:
	word64 rax_153 = Mem31[rbx_142 + 0x0000000000000008:word64]
	branch rax_153 == 0x0000000000000000 l000000000040AD98
// DataOut: fs r10 r11 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD98:
	Mem166[rbx_142:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040ACFB:
	word64 r9_158 = Mem31[r8:word64]
	*r9Out = r9_158
	word64 r10_159 = Mem31[r8 + 0x0000000000000008:word64]
	*r10Out = r10_159
	Mem160[r11:word64] = r9_158
	Mem161[r11 + 0x0000000000000008:word64] = r10_159
	Mem162[rax_153:word64] = 0x0000000000000000
	Mem164[rax_153 + 0x0000000000000008:word64] = Mem162[rbp_143 + 0x0000000000000048:word64]
	Mem165[rbp_143 + 0x0000000000000048:word64] = rax_153
// DataOut: fs r10 r11 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14
// LocalsOut: fp(64)

l000000000040AD1C:
	return rsi_109
// DataOut: fs r10 r11 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14

fn000000000040ACB0_exit:
// DataOut: r10 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 r13:r13 r12:r12 rbp:rbp rsi:<invalid> rbx:rbx rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -40(fp):rbx -32(fp):rbp -24(fp):r12 -16(fp):r13 -8(fp):r14



byte fn000000000040ADB0(word64 rdi, word64 r8, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi xmm0 xmm1 xmm2 xmm3
// LiveOut: al xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax eax rax xmm0 xmm1 xmm2 xmm3
// Preserved: rsp
fn000000000040ADB0_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ADB0:
	word64 rax_4 = Mem0[rdi:word64]
	branch r8 == 0x0000000000415EE0 l000000000040AE30
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE30:
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADBB:
	word128 xmm0_37 = DPB(xmm0, Mem0[rax_4 + 0x0000000000000008:real32], 0)
	*xmm0Out = xmm0_37
	branch Mem0[rax_4 + 0x0000000000000008:real32] <=u Mem0[0x0000000000415EF4:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

l000000000040ADC9:
	word128 xmm1_54
	*xmm1Out = DPB(xmm1, Mem0[0x0000000000415EF8:real32], 0)
	branch Mem0[0x0000000000415EF8:real32] <=u xmm0_37 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid>

l000000000040ADD6:
	word128 xmm1_57
	*xmm1Out = DPB(xmm1, Mem0[rax_4 + 0x000000000000000C:real32], 0)
	branch Mem0[rax_4 + 0x000000000000000C:real32] <=u Mem0[0x0000000000415EFC:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADE4:
	word128 xmm1_60
	*xmm1Out = DPB(xmm1, Mem0[rax_4:real32], 0)
	branch Mem0[rax_4:real32] <u Mem0[0x0000000000415F00:real32] l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rax rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040ADF1:
	word128 xmm1_64 = DPB(xmm1, Mem0[rax_4:real32] + Mem0[0x0000000000415EF4:real32], 0)
	*xmm1Out = xmm1_64
	word128 xmm2_65 = DPB(xmm2, Mem0[rax_4 + 0x0000000000000004:real32], 0)
	*xmm2Out = xmm2_65
	branch Mem0[rax_4 + 0x0000000000000004:real32] <=u xmm1_64 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid>

l000000000040AE03:
	word128 xmm3_68
	*xmm3Out = DPB(xmm3, Mem0[0x0000000000415F04:real32], 0)
	branch Mem0[0x0000000000415F04:real32] <u xmm2_65 l000000000040AE20
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid>

l000000000040AE10:
	branch Mem0[rax_4 + 0x0000000000000008:real32] >u xmm1_64 l000000000040AE35
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE35:
	return 0x01
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE1A:
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000001 xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

l000000000040AE20:
	Mem48[rdi:word64] = 0x0000000000415EE0
	return 0x00
// DataOut: al fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>

fn000000000040ADB0_exit:
// DataOut: al xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid>



word64 fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut: al eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040AE40_entry:
	*rsiOut = rsi
// DataOut: dl ebp edx fs r10 r11 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_113 = Mem0[rsi:word64]
	branch r13_113 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE64:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE71:
	word64 rbx_116 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_116 != 0x0000000000000000 l000000000040AE94
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE94:
	word64 rbp_204 = Mem0[rbx_116:word64]
	word64 rsi_207
	rax = fn000000000040AC80(rax, rdi, out rsi_207)
	word64 rdx_212 = Mem0[rbx_116 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE80:
	Mem243[rbx_116 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem244[rax + 0x0000000000000008:word64] = rbx_116
	branch rdx_212 == 0x0000000000000000 l000000000040AED0
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEAC:
	Mem228[rax:word64] = rbp_204
	Mem230[rdi + 0x0000000000000018:word64] = Mem228[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem234[rbx_116:word64] = 0x0000000000000000
	rax = Mem234[rdi + 0x0000000000000048:word64]
	Mem237[rbx_116 + 0x0000000000000008:word64] = rax
	Mem238[rdi + 0x0000000000000048:word64] = rbx_116
	branch rdx_212 != 0x0000000000000000 l000000000040AE91
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE91:
	rbx_116 = rdx_212
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AECF:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED0:
	rbp = Mem0[rbp_204:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AE7A:
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AED4:
	Mem133[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF08:
	word64 rsi_136
	rax = fn000000000040AC80(rax, rdi, out rsi_136)
	branch Mem133[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF5B:
	Mem195[rax:word64] = rbp
	Mem197[rdi + 0x0000000000000018:word64] = Mem195[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF1C:
	rax = Mem133[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF75:
	return 0x0000000000000000
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040AF26:
	Mem171[rdi + 0x0000000000000048:word64] = Mem133[rax + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF2F:
	word64 rdx_166 = Mem133[rax + 0x0000000000000008:word64]
	Mem167[rax:word64] = rbp
	Mem168[rax + 0x0000000000000008:word64] = rdx_166
	Mem169[rax + 0x0000000000000008:word64] = rax
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF3E:
	Mem149[rbp:word64] = 0x0000000000000000
	Mem151[rsi_136 + 0x0000000000000018:word64] = Mem149[rsi_136 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem151[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AF59:
// DataOut: fs r10 r11 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEE1:
	r13_113 = r13_113 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_113 l000000000040AE68
// DataOut: fs r10 r11 r12 r13 r14 r15b r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0028(32)

l000000000040AEEF:
	return 0x0000000000000001
// DataOut: al eax ebp fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040AE40_exit:
// DataOut: al eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r12:r12 r13:r13 rax:<invalid> rbx:rbx rbp:rbp rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: r13 r15 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return Mem0[rdi + 0x0000000000000020:word64]
// DataOut: r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040B400(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & r9Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r9 rax xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040B400_entry:
	*xmm0Out = xmm0
	*xmm1Out = xmm1
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r9Out = r9
// DataOut: ebx fs r10 r11 r12d r8 r9 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B400:
	word64 r15_193 = rdi
	word32 r15d_8 = (word32) rdi
	word64 r13_19 = rdx
	word64 r12_24 = rcx
	word64 rbp_119 = rsi
	branch rdx != 0x0000000000000000 l000000000040B42E
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42A_1:
	r13_19 = 0x000000000040AC60
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:rdx r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B42E:
	branch rcx != 0x0000000000000000 l000000000040B43A
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC60 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B436_1:
	r12_24 = 0x000000000040AC70
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:rcx rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B43A:
	word64 rax_226
	word64 rax_43 = malloc(0x0000000000000050)
	branch rax_43 == 0x0000000000000000 l000000000040B598
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x000000000040AC70 r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B598:
	rax_226 = 0x0000000000000000
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B44B:
	branch rsi != 0x0000000000000000 l000000000040B45B
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:0x0000000000000050 r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B457_1:
	rbp_119 = 0x0000000000415EE0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B45B:
	Mem120[rax_43 + 0x0000000000000028:word64] = rbp_119
	word128 xmm0_125
	word128 xmm1_126
	word128 xmm2_127
	word128 xmm3_128
	branch fn000000000040ADB0(rax_43 + 0x0000000000000028, r8, xmm0, xmm1, xmm2, xmm3, out xmm0_125, out xmm1_126, out xmm2_127, out xmm3_128) == 0x00 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x0000000000415EE0 r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B46C:
	word128 xmm1_170 = DPB(xmm1_126, Mem120[rbp_119 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_170
	branch Mem120[rbp_119 + 0x0000000000000010:byte] != 0x00 l000000000040B4C0
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B477:
	word128 xmm0_233
	branch rdi < 0x0000000000000000 l000000000040B578
// DataOut: fs r10 r11 r12 r13 r14 r15 r15d r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B578:
	r15_193 = (uint64) (r15d_8 & 0x00000001)
	real32 v33_262 = (real32) (rdi >>u 0x0000000000000001 | r15_193)
	xmm0_233 = DPB(xmm0_125, v33_262 + DPB(xmm0_125, v33_262, 0), 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B480:
	xmm0_233 = DPB(xmm0_125, (real32) rdi, 0)
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:rdi rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B485:
	real32 v26_237 = (real32) xmm0_233 / xmm1_170
	word128 xmm0_238
	*xmm0Out = DPB(xmm0_233, v26_237, 0)
	branch v26_237 >=u Mem120[0x0000000000415F08:real32] l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B496:
	branch v26_237 <u Mem120[0x0000000000415F0C:real32] l000000000040B568
// DataOut: fs r10 r11 r12 r13 r14 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B568:
	r15_193 = DPB(r15_193, v26_237, 0) (alias)
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4A3:
	real32 v28_243 = v26_237 - Mem120[0x0000000000415F0C:real32]
	word128 xmm0_244
	*xmm0Out = DPB(xmm0_233, v28_243, 0)
	r15_193 = DPB(r15_193, v28_243, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4C0:
	word64 rsi_195
	word64 r8_196
	word64 r9_197
	word64 rax_198 = fn000000000040ABC0(r15_193, out rsi_195, out r8_196, out r9_197)
	branch rax_198 >u 0x00000000FFFFFFFF l000000000040B540
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B540:
	Mem186[rax_43 + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4DA:
	Mem206[rax_43 + 0x0000000000000010:word64] = rax_198
	branch rax_198 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B4E3:
	word64 rax_209 = calloc(rax_198, 0x0000000000000010)
	Mem215[rax_43:word64] = rax_209
	branch rax_209 == 0x0000000000000000 l000000000040B548
// DataOut: fs r10 r11 r12 r13 r14 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:0x00000000FFFFFFFF r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> rsi:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B548:
	free(rax_43)
	return 0x0000000000000000
// DataOut: eax ebx fs r10 r11 r12d r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040B4F8:
	Mem217[rax_43 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem218[rax_43 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem221[r11 + 0x0000000000000030:word64] = r13_19
	Mem223[r11 + 0x0000000000000038:word64] = r12_24
	Mem224[rax_43 + 0x0000000000000008:word64] = rax_209 + (rax_198 << 0x0000000000000004)
	Mem225[r11 + 0x0000000000000040:word64] = r8
	Mem229[rax_43 + 0x0000000000000048:word64] = 0x0000000000000000
	rax_226 = rax_43
// DataOut: eax fs r10 r11 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32)

l000000000040B52A:
	return rax_226
// DataOut: eax ebx fs r10 r11 r12d r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 rax:<invalid> r15:<invalid> rdi:<invalid> r14:r8 r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:0x0000000000000010 r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> xmm2:<invalid> xmm3:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040B400_exit:
// DataOut: eax r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 rdi:<invalid> r14:r14 r13:r13 r12:r12 rbp:rbp rbx:rbx xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB rdx:<invalid> rcx:<invalid> r8:<invalid> r15d:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn000000000040B640(word64 rdi, word64 r13, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: r12 rbp rbx rdi rsp
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B640:
	word64 rax_117
	word64 rbp_114 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6C6:
	word64 r12_100 = Mem0[r15:word64]
	branch r12_100 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6D0:
	word64 rdi_102 = Mem0[r12_100:word64]
	branch rdi_102 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E3:
	word64 rsp_121
	word64 rdi_124
	word64 rbx_125
	byte SCZO_126
	byte Z_127
	word64 rax_128
	byte C_130
	byte SZO_131
	byte CZ_132
	word64 r15_133
	call Mem0[rbp_114 + 0x0000000000000040:word64] (retsize: 8; depth: 32)
		uses: C_106,CZ_98,qwLoc08_4,qwLoc10_7,qwLoc18_12,r12_100,r13_95,r15_94,rax_96,rbp_99,rbx_103,rdi_102,rsp_101,SCZO_97,SZO_104,Z_105
		defs: C_130,CZ_132,r12_122,r13_129,r15_133,rax_128,rbp_123,rbx_125,rdi_124,rsp_121,SCZO_126,SZO_131,Z_127
	branch Mem0[rbx_125 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6EF:
	rax_117 = Mem0[rbp_114 + 0x0000000000000008:word64]
	r12_100 = r12_100 + 0x0000000000000010
	branch rax_117 >u r12_100 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B655:
	rax_117 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B659:
	word64 r12_56 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_56 >=u rax_117 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B668:
	word64 rdi_63 = Mem0[r12_56 + 0x0000000000000000:word64]
	branch rdi_63 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B67B:
	word64 rbx_76 = Mem0[rdi_63 + 0x0000000000000008:word64]
	free(rdi_63)
	branch rbx_76 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B678:
	rdi_63 = rbx_76
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B689:
	r12_56 = r12_56 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_56 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B693:
	word64 rdi_25 = Mem0[rbp_114 + 0x0000000000000048:word64]
	branch rdi_25 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A3:
	word64 rbx_41 = Mem0[rdi_25 + 0x0000000000000008:word64]
	free(rdi_25)
	branch rbx_41 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6A0:
	rdi_25 = rbx_41
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B6B1:
	free(Mem0[rbp_114:word64])
	free(rbp_114)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rax:<invalid> rdi:rdi rbx:rbx -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040B710(word64 rsi, word64 rdi, word64 r11, word128 xmm0, word128 xmm1, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & xmm0Out, ptr64 & xmm1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi r11 rdi rsi xmm0 xmm1
// LiveOut: al r8 r9 rax rsi xmm0 xmm1
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1
// Preserved: r12 rbp rbx rsp
fn000000000040B710_entry:
	*xmm0Out = xmm0
	*rsiOut = rsi
	*r8Out = r8
	*r9Out = r9
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B710:
	word64 rbp_15 = Mem0[rdi + 0x0000000000000028:word64]
	word128 xmm1_20 = DPB(xmm1, Mem0[rbp_15 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_20
	branch Mem0[rbp_15 + 0x0000000000000010:byte] != 0x00 l000000000040B770
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040B72A:
	word128 xmm0_250
	branch rsi < 0x0000000000000000 l000000000040B8D0
// DataOut: esi fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B8D0:
	rsi = (uint64) (esi & 0x00000001)
	*rsiOut = rsi
	real32 v28_286 = (real32) (rsi >>u 0x0000000000000001 | rsi)
	xmm0_250 = DPB(xmm0, v28_286 + DPB(xmm0, v28_286, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B733:
	xmm0_250 = DPB(xmm0, (real32) rsi, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B738:
	real32 v16_255 = (real32) xmm0_250 / xmm1_20
	word128 xmm0_256
	*xmm0Out = DPB(xmm0_250, v16_255, 0)
	branch v16_255 >=u Mem0[0x0000000000415F08:real32] l000000000040B870
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B749:
	branch v16_255 <u Mem0[0x0000000000415F0C:real32] l000000000040B880
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B880:
	rsi = DPB(rsi, v16_255, 0) (alias)
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B756:
	real32 v18_265 = v16_255 - Mem0[0x0000000000415F0C:real32]
	word128 xmm0_266
	*xmm0Out = DPB(xmm0_250, v18_265, 0)
	rsi = DPB(rsi, v18_265, 0) ^ 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B770:
	word64 rsi_111
	word64 r8_112
	word64 r9_113
	word64 rax_114 = fn000000000040ABC0(rsi, out rsi_111, out r8_112, out r9_113)
	branch rax_114 >u 0xFFFFFFFFFFFFFFFF l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> xmm0:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B792:
	branch Mem0[r11 + 0x0000000000000010:word64] == rax_114 l000000000040B860
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B860:
	return 0x0000000000000001
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B79C:
	word64 rsi_124
	*rsiOut = 0x0000000000000010
	word64 rax_127 = calloc(rax_114, 0x0000000000000010)
	branch rax_127 == 0x0000000000000000 l000000000040B870
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:0x00000000FFFFFFFE xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B870:
	return 0x0000000000000000
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B7B6:
	word64 rax_153 = Mem0[rdi + 0x0000000000000048:word64]
	word64 rsi_155
	word64 rax_156 = fn000000000040AE40(rax_153, 0x00000000, rbp_15, rdi, fp - 0x0000000000000068, out rsi_155)
	word64 rbp_162 = (uint64) (word32) rax_156
	word64 rax_138 = rax_127 + (rax_114 << 0x0000000000000004)
	word32 ebp_163 = (word32) rbp_162
	branch (byte) rax_156 != 0x00 l000000000040B890
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:<invalid> xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:0x0000000000000010 xmm0:<invalid> esi:0x00000010 r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64) Local -0058(64) Local -0060(64) Local -0068(64)

l000000000040B890:
	free(Mem0[rdi:word64])
	Mem214[rdi:word64] = rax_127
	Mem216[rdi + 0x0000000000000008:word64] = rax_138
	Mem218[rdi + 0x0000000000000010:word64] = rax_114
	Mem220[rdi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem222[rdi + 0x0000000000000048:word64] = rax_153
	return (uint64) ebp_163
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B815:
	Mem169[rdi + 0x0000000000000048:word64] = rax_153
	word64 rsi_170
	word64 rax_171 = fn000000000040AE40(rax_153, 0x00000001, rbp_162, fp - 0x0000000000000068, rdi, out rsi_170)
	branch (byte) rax_171 == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B836:
	word64 rsi_194
	branch (byte) fn000000000040AE40(rax_171, 0x00000000, rbp_162, fp - 0x0000000000000068, rdi, out rsi_194) == 0x00 l000000000040B8EA
// DataOut: ebp fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0068(64)

l000000000040B8EA:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B84B:
	free(rax_127)
	return (uint64) ebp_163
// DataOut: al fs r10 r11 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbx:rdi rbp:(uint64) eax xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> xmm0:<invalid> esi:<invalid> rcx:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B710_exit:
// DataOut: al r8 r9 rax rsi xmm0 xmm1
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rbp:rbp xmm1:<invalid> rdi:<invalid> rdx:<invalid> r12:r12 rax:(uint64) ebp xmm0:<invalid> rsi:<invalid> esi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> r8:<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):0x0000000000000000 -72(fp):0x0000000000000000 -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040B8F0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r10 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 rbp rbx rsp
fn000000000040B8F0_entry:
	*xmm2Out = xmm2
	*xmm3Out = xmm3
	*r8Out = r8
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r13 r14 r15 r8 rax rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B8F0:
	branch rsi == 0x0000000000000000 l000000000040BA67
// DataOut: fs r11 r13 r14 r15 r8 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040B904:
	word32 eax_131
	word64 rsi_69
	word64 r9_70
	word64 r10_71
	word64 rax_72 = fn000000000040ACB0(rax, 0x00000000, rsi, rdi, r8, r11, out rsi_69, out r9_70, out r10_71)
	branch rax_72 == 0x0000000000000000 l000000000040B938
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B938:
	word128 xmm0_171
	word64 rax_165 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_166 = (word32) rax_165
	branch rax_165 < 0x0000000000000000 l000000000040BA70
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA70:
	real32 v26_411 = (real32) (rax_165 >>u 0x0000000000000001 | (uint64) (eax_166 & 0x00000001))
	*xmm0Out = DPB(xmm0, v26_411 + DPB(xmm0, v26_411, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B945:
	*xmm0Out = DPB(xmm0, (real32) rax_165, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B94A:
	word128 xmm1_179
	word64 rax_172 = Mem0[rdi + 0x0000000000000010:word64]
	word32 eax_173 = (word32) rax_172
	word64 rdx_175 = Mem0[rdi + 0x0000000000000028:word64]
	branch rax_172 < 0x0000000000000000 l000000000040BA90
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA90:
	real32 v45_399 = (real32) (rax_172 >>u 0x0000000000000001 | (uint64) (eax_173 & 0x00000001))
	xmm1_179 = DPB(xmm1, v45_399 + DPB(xmm1, v45_399, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B95B:
	xmm1_179 = DPB(xmm1, (real32) rax_172, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B960:
	word128 xmm1_185 = DPB(xmm1_179, (real32) xmm1_179 * Mem0[rdx_175 + 0x0000000000000008:real32], 0)
	*xmm1Out = xmm1_185
	branch (real32) xmm0_171 >u xmm1_185 l000000000040B9C8
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9C8:
	word128 xmm0_297
	word128 xmm0_284
	word128 xmm1_285
	word128 xmm2_286
	word128 xmm3_287
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_171, xmm1_185, xmm2, xmm3, out xmm0_284, out xmm1_285, out xmm2_286, out xmm3_287)
	word64 rax_289 = Mem0[rdi + 0x0000000000000010:word64]
	word64 rdx_292 = Mem0[rdi + 0x0000000000000028:word64]
	word32 eax_290 = (word32) rax_289
	word128 xmm2_296 = DPB(xmm2_286, Mem0[rdx_292 + 0x0000000000000008:real32], 0)
	*xmm2Out = xmm2_296
	branch rax_289 < 0x0000000000000000 l000000000040BAE7
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAE7:
	real32 v43_387 = (real32) (rax_289 >>u 0x0000000000000001 | (uint64) (eax_290 & 0x00000001))
	*xmm0Out = DPB(xmm0_284, v43_387 + DPB(xmm0_284, v43_387, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9E7:
	*xmm0Out = DPB(xmm0_284, (real32) rax_289, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9EC:
	word128 xmm1_305
	word64 rax_299 = Mem0[rdi + 0x0000000000000018:word64]
	word32 eax_300 = (word32) rax_299
	branch rax_299 < 0x0000000000000000 l000000000040BB01
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB01:
	real32 v40_375 = (real32) (rax_299 >>u 0x0000000000000001 | (uint64) (eax_300 & 0x00000001))
	*xmm1Out = DPB(xmm1_285, v40_375 + DPB(xmm1_285, v40_375, 0), 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9F9:
	*xmm1Out = DPB(xmm1_285, (real32) rax_299, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040B9FE:
	word128 xmm3_312 = DPB(xmm2_286, Mem0[rdx_292 + 0x0000000000000008:real32] * xmm0_297, 0)
	*xmm3Out = xmm3_312
	branch (real32) xmm1_305 <=u xmm3_312 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA0E:
	real32 v36_317 = (real32) xmm0_297 * Mem0[rdx_292 + 0x000000000000000C:real32]
	word128 xmm0_318
	*xmm0Out = DPB(xmm0_297, v36_317, 0)
	branch Mem0[rdx_292 + 0x0000000000000010:byte] != 0x00 l000000000040BA1D
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA19:
	*xmm0Out = DPB(xmm0_297, v36_317 * xmm2_296, 0)
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA1D:
	branch (real32) xmm0_318 >=u Mem0[0x0000000000415F08:real32] l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA2A:
	word64 rsi_326
	branch (real32) xmm0_318 >=u Mem0[0x0000000000415F0C:real32] l000000000040BAC8
// DataOut: fs r10 r11 r13 r14 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BAC8:
	real32 v42_356 = (real32) xmm0_318 - Mem0[0x0000000000415F0C:real32]
	xmm0_318 = DPB(xmm0_318, v42_356, 0)
	rsi_326 = DPB(rsi_69, v42_356, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA37:
	rsi_326 = DPB(rsi_69, (int32) xmm0_318, 0) (alias)
// DataOut: esi fs r10 r11 r13 r14 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA3C:
	word64 rsi_328
	word64 r8_329
	word64 r9_330
	word128 xmm0_331
	word128 xmm1_332
	word64 rax_333 = fn000000000040B710(rsi_326, rdi, r11, xmm0_318, xmm1_305, out rsi_328, out r8_329, out r9_330, out xmm0_331, out xmm1_332)
	branch (byte) rax_333 == 0x00 l000000000040BB2E
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA4C:
	word64 rsi_347
	word64 r9_348
	word64 r10_349
	branch fn000000000040ACB0(rax_333, 0x00000000, rsi, rdi, r8_329, r11, out rsi_347, out r9_348, out r10_349) == 0x0000000000000000 l000000000040B96A
// DataOut: fs r10 r11 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0020(64)

l000000000040BA67:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B96A:
	branch Mem0[qwLoc20:word64] == 0x0000000000000000 l000000000040BAB0
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BAB0:
	Mem274[qwLoc20:word64] = rsi
	Mem279[rdi + 0x0000000000000020:word64] = Mem274[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	Mem281[rdi + 0x0000000000000018:word64] = Mem279[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	eax_131 = 0x00000001 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B97A:
	word64 rax_237 = Mem0[rdi + 0x0000000000000048:word64]
	branch rax_237 == 0x0000000000000000 l000000000040BB1B
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB1B:
	rax_237 = malloc(0x0000000000000010)
	branch rax_237 != 0x0000000000000000 l000000000040B98F
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BB2E:
	eax_131 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B987:
	Mem266[rdi + 0x0000000000000048:word64] = Mem0[rax_237 + 0x0000000000000008:word64]
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B98F:
	word64 rdx_248 = Mem0[qwLoc20 + 0x0000000000000008:word64]
	Mem249[rax_237:word64] = rsi
	Mem250[rax_237 + 0x0000000000000008:word64] = rdx_248
	Mem251[qwLoc20 + 0x0000000000000008:word64] = rax_237
	Mem256[rdi + 0x0000000000000020:word64] = Mem251[rdi + 0x0000000000000020:word64] + 0x0000000000000001
	return 0x00000001
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> rsi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B91B:
	branch rdx == 0x0000000000000000 l000000000040B9B8
// DataOut: fs r10 r11 r12 r13 r14 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B9B8:
	return 0x00000000
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040B924:
	Mem146[rdx:word64] = rax_72
	eax_131 = 0x00000000 (alias)
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:rdx rdx:fp - 0x0000000000000020 rcx:<invalid> rbx:rdi rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040B92A:
	return eax_131
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rbp:rsi r12:<invalid> rdx:<invalid> rcx:<invalid> rbx:rdi rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040B8F0_exit:
// DataOut: eax r10 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp r12:r12 rdx:<invalid> rcx:<invalid> rbx:rbx rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BB50(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: eax r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: rbx rsp
fn000000000040BB50_entry:
// DataOut: ebx fs r11 r12 r13 r14 r15 r8 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(64)

l000000000040BB50:
	word64 rax_33
	word64 rsi_18
	word64 r8_19
	word64 r9_20
	word64 r10_21
	word128 xmm0_22
	word128 xmm1_23
	word128 xmm2_24
	word128 xmm3_25
	word32 eax_26 = fn000000000040B8F0(rax, fp - 0x0000000000000010, rsi, rdi, r8, r11, xmm0, xmm1, xmm2, xmm3, out rsi_18, out r8_19, out r9_20, out r10_21, out xmm0_22, out xmm1_23, out xmm2_24, out xmm3_25)
	branch eax_26 == 0xFFFFFFFF l000000000040BB80
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB80:
	rax_33 = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB67:
	rax_33 = rsi
	branch eax_26 != 0x00000000 l000000000040BB72
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rcx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32) Local -0010(64)

l000000000040BB6C_1:
	rax_33 = qwLoc10
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:rsi rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l000000000040BB72:
	return rax_33
// DataOut: eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rsi rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx

fn000000000040BB50_exit:
// DataOut: eax r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> xmm0:<invalid> xmm1:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -8(fp):rbx



word64 fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, word128 xmm0, word128 xmm1, word128 xmm2, word128 xmm3, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & xmm0Out, ptr64 & xmm1Out, ptr64 & xmm2Out, ptr64 & xmm3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// LiveOut: r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil xmm0 xmm1 xmm2 xmm3
// Preserved: r12 rbp rbx rsp
fn000000000040BB90_entry:
	*r8Out = r8
	*xmm3Out = xmm3
	*xmm2Out = xmm2
	*xmm0Out = xmm0
	*xmm1Out = xmm1
// DataOut: fs r11 r13 r15 r8 rax rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BB90:
	word64 rsi_22
	word64 r9_23
	word64 r10_24
	word64 rax_219 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rsi_22, out r9_23, out r10_24)
	branch rax_219 == 0x0000000000000000 l000000000040BD08
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(64)

l000000000040BD08:
	rax_219 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBB6:
	Mem101[rdi + 0x0000000000000020:word64] = Mem0[rdi + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem101[qwLoc20:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:fp - 0x0000000000000020 rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBD0:
	word128 xmm0_122
	word64 rax_114 = Mem101[rdi + 0x0000000000000018:word64]
	Mem121[rdi + 0x0000000000000018:word64] = rax_114 - 0x0000000000000001
	word32 eax_116 = (word32) (rax_114 - 0x0000000000000001)
	branch rax_114 < 0x0000000000000001 l000000000040BCE8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCE8:
	real32 v25_302 = (real32) (rax_114 - 0x0000000000000001 >>u 0x0000000000000001 | (uint64) (eax_116 & 0x00000001))
	*xmm0Out = DPB(xmm0, v25_302 + DPB(xmm0, v25_302, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBE5:
	*xmm0Out = DPB(xmm0, (real32) (rax_114 - 0x0000000000000001), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBEA:
	word128 xmm1_133
	word64 rax_123 = Mem121[rdi + 0x0000000000000010:word64]
	word32 eax_124 = (word32) rax_123
	word64 rdx_126 = Mem121[rdi + 0x0000000000000028:word64]
	branch rax_123 < 0x0000000000000000 l000000000040BCC8
// DataOut: eax fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCC8:
	real32 v33_290 = (real32) (rax_123 >>u 0x0000000000000001 | (uint64) (eax_124 & 0x00000001))
	xmm1_133 = DPB(xmm1, v33_290 + DPB(xmm1, v33_290, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BBFB:
	xmm1_133 = DPB(xmm1, (real32) rax_123, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC00:
	real32 v22_137 = (real32) xmm1_133 * Mem121[rdx_126:real32]
	word128 xmm1_138 = DPB(xmm1_133, v22_137, 0)
	*xmm1Out = xmm1_138
	branch v22_137 >u xmm0_122 l000000000040BC18
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC18:
	word128 xmm0_182
	word128 xmm0_167
	word128 xmm1_168
	word128 xmm2_169
	word128 xmm3_170
	fn000000000040ADB0(rdi + 0x0000000000000028, r8, xmm0_122, xmm1_138, xmm2, xmm3, out xmm0_167, out xmm1_168, out xmm2_169, out xmm3_170)
	word64 rdx_172 = Mem121[rdi + 0x0000000000000010:word64]
	word32 edx_173 = (word32) rdx_172
	word64 rax_175 = Mem121[rdi + 0x0000000000000028:word64]
	branch rdx_172 < 0x0000000000000000 l000000000040BD2F
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD2F:
	real32 v36_278 = (real32) (rdx_172 >>u 0x0000000000000001 | (uint64) (edx_173 & 0x00000001))
	*xmm0Out = DPB(xmm0_167, v36_278 + DPB(xmm0_167, v36_278, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC32:
	*xmm0Out = DPB(xmm0_167, (real32) rdx_172, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC37:
	word128 xmm1_190
	word64 rdx_183 = Mem121[rdi + 0x0000000000000018:word64]
	word32 edx_184 = (word32) rdx_183
	branch rdx_183 < 0x0000000000000000 l000000000040BD49
// DataOut: edx fs r10 r11 r13 r15 r8 r9 rax rbp rbx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD49:
	real32 v38_266 = (real32) (rdx_183 >>u 0x0000000000000001 | (uint64) (edx_184 & 0x00000001))
	*xmm1Out = DPB(xmm1_168, v38_266 + DPB(xmm1_168, v38_266, 0), 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC44:
	*xmm1Out = DPB(xmm1_168, (real32) rdx_183, 0)
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC49:
	real32 v30_195 = Mem121[rax_175:real32] * xmm0_182
	word128 xmm2_196
	*xmm2Out = DPB(xmm2_169, v30_195, 0)
	branch v30_195 <=u xmm1_190 l000000000040BC09
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC56:
	real32 v31_201 = (real32) xmm0_182 * Mem121[rax_175 + 0x0000000000000004:real32]
	word128 xmm0_202 = DPB(xmm0_182, v31_201, 0)
	branch Mem121[rax_175 + 0x0000000000000010:byte] != 0x00 l000000000040BC66
// DataOut: fs r10 r11 r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC61:
	xmm0_202 = DPB(xmm0_182, v31_201 * Mem121[rax_175 + 0x0000000000000008:real32], 0)
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC66:
	word64 rsi_207
	branch (real32) xmm0_202 >=u Mem121[0x0000000000415F0C:real32] l000000000040BD10
// DataOut: fs r10 r11 r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BD10:
	real32 v42_247 = (real32) xmm0_202 - Mem121[0x0000000000415F0C:real32]
	xmm0_202 = DPB(xmm0_202, v42_247, 0)
	rsi_207 = DPB(rsi_22, v42_247, 0) ^ 0x0000000000000000
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC73:
	rsi_207 = DPB(rsi_22, (int32) xmm0_202, 0) (alias)
// DataOut: esi fs r10 r11 r13 r15 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC78:
	word64 rsi_210
	word64 r8_211
	word64 r9_212
	word128 xmm0_213
	word128 xmm1_214
	branch (byte) (uint64) (word32) fn000000000040B710(rsi_207, rdi, r11, xmm0_202, xmm1_190, out rsi_210, out r8_211, out r9_212, out xmm0_213, out xmm1_214) != 0x00 l000000000040BBC6
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:rdi + 0x0000000000000028 xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC8D:
	word64 rdi_225 = Mem121[rdi + 0x0000000000000048:word64]
	branch rdi_225 != 0x0000000000000000 l000000000040BCA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA3:
	word64 r12_240 = Mem121[r15 + 0x0000000000000008:word64]
	free(rdi_225)
	branch r12_240 != 0x0000000000000000 l000000000040BCA0
// DataOut: fs r10 r11 r12 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCA0:
	rdi_225 = r12_240
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC96:
// DataOut: fs r10 r11 r13 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BCB1:
	Mem234[rdi + 0x0000000000000048:word64] = 0x0000000000000000
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:(uint64) eax rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> rsi:<invalid> r9:0x00000000AAAAAAAB r8:<invalid> r12:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040BC09:
	return rax_219
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> xmm0:<invalid> xmm1:<invalid> rsi:<invalid> rdi:<invalid> xmm2:<invalid> xmm3:<invalid> r9:<invalid> r10:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040BBC6:
	return rax_219
// DataOut: fs r10 r11 r13 r15 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rcx:<invalid> rbx:rdi rdx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm0:<invalid> xmm1:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> r12:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040BB90_exit:
// DataOut: r10 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rbx:rbx rdx:<invalid> rbp:rbp rax:<invalid> r12:r12 rsi:<invalid> xmm0:<invalid> xmm1:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> xmm2:<invalid> xmm3:<invalid> esi:<invalid> r8:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r10 r11 r15d r8 r9 rax
// Trashed: SCZOP ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsi rsp
fn000000000040BD70_entry:
	def fp
	def r15
	def edx
	def r14
	def rsi
	def r13
	def r12
	def rdi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocC8
	def r8Out
	def r9Out
	def r10Out
	def r11Out
	def r15dOut
	def dwLoc8C
	def qwLocA8
	def qwLocB0
	def rLoc4
	def wLoc82
	def wLoc84
	def rLocA8
	def rLoc3
	def rLoc2
	def qwLoc80
	def rLoc1
	def rLocE8
	def rdx_rax
	def edx_eax
// DataOut: edx fs r10 r15d r8 r9 rbp rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000008
	qwLoc08_4 = r15
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000010
	qwLoc10_12 = r14
	r14_14 = rsi
	r14d_15 = (word32) r14_14 (alias)
	rsp_16 = fp - 0x0000000000000018
	qwLoc18_18 = r13
	rsp_19 = fp - 0x0000000000000020
	qwLoc20_21 = r12
	r12_23 = rdi
	r12d_24 = (word32) r12_23 (alias)
	rsp_25 = fp - 0x0000000000000028
	qwLoc28_27 = rbp
	rsp_28 = fp - 0x0000000000000030
	qwLoc30_30 = rbx
	rbx_32 = rcx
	ebx_33 = (word32) rbx_32 (alias)
	rsp_34 = fp - 0x00000000000000E8
	dwLocB0_35 = eax_9
	rax_36 = (uint64) edx
	eax_37 = (word32) rax_36 (alias)
	qwLocB8_38 = rsi
	rax_39 = (uint64) (eax_37 & 0x00000020)
	eax_40 = (word32) rax_39 (alias)
	dwLocC8_41 = edx
	qwLocC0_43 = r8
	rcx_46 = Mem0[fs:0x00000028:word64]
	qwLoc40_47 = rcx_46
	rcx_48 = 0x0000000000000000
	SCZO_49 = cond(eax_40 - 0x00000001)
	C_50 = SCZO_49 (alias)
	dwLoc90_51 = eax_40
	rax_52 = (uint64) (0x00000000 - C_50)
	eax_53 = (word32) rax_52 (alias)
	dwLocC4_54 = eax_53
	v21_55 = dwLocC4_54 & 0xFFFFFFE8
	dwLocC4_56 = v21_55
	SZO_57 = cond(dwLocC4_56)
	v22_58 = dwLocC4_56 + 0x00000400
	dwLocC4_59 = v22_58
	SCZO_60 = cond(v22_58)
	call localeconv (retsize: 8; depth: 240)
		uses: C_50,dwLoc90_51,dwLocB0_35,dwLocC4_59,dwLocC8_41,eax_53,ebx_33,edx,fs,qwLoc08_4,qwLoc10_12,qwLoc18_18,qwLoc20_21,qwLoc28_27,qwLoc30_30,qwLoc40_47,qwLocB8_38,qwLocC0_43,r12_23,r12d_24,r13,r14_14,r14d_15,r15,r8,rax_52,rbp,rbx_32,rcx_48,rdi,rsi,rsp_34,SCZO_60,SZO_57
		defs: ah_95,al_101,ax_96,C_67,cl_88,CZ_82,CZP_93,dil_100,dl_98,eax_63,ebx_85,ecx_79,edi_87,edx_64,esi_91,fs_78,P_97,r10_86,r10b_104,r10d_103,r11_80,r12_71,r12d_92,r13_70,r14_68,r14d_94,r15_62,r15d_102,r8_77,r9_90,r9d_89,rax_65,rbp_73,rbx_74,rcx_75,rdi_72,rdx_81,rsi_69,rsp_61,S_84,SCZO_76,sil_99,SZO_66,Z_83
	r15_105 = Mem0[r8_77:word64]
	r15d_106 = (word32) r15_105 (alias)
	r13_107 = rax_65
	rdi_108 = r15_105
	eax_109 = strlen(rdi_108)
	rax_110 = DPB(rax_65, eax_109, 0) (alias)
	rbp_111 = Mem0[rbp_73 + 0x0000000000000010:word64]
	r11_112 = rax_110
	r13_113 = Mem0[r13_107 + 0x0000000000000008:word64]
	rax_114 = rax_110 - 0x0000000000000001
	rdx_115 = 0x0000000000000001
	SCZO_116 = cond(rax_114 - 0x0000000000000010)
	C_117 = SCZO_116 (alias)
	SZO_118 = SCZO_116 (alias)
	Z_119 = SCZO_116 (alias)
	CZ_120 = SCZO_116 (alias)
	S_121 = SCZO_116 (alias)
	CZP_122 = SCZO_116 (alias)
	rdi_123 = r13_113
	edi_124 = (word32) rdi_123 (alias)
	dil_125 = (byte) rdi_123 (alias)
	rax_126 = 0x0000000000413990
	branch rax_114 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE06_1:
	r11_1785 = 0x0000000000000001
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0A:
	r11_127 = PHI(r11_112, r11_1785)
	branch rax_114 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0A_1:
	r15_1783 = 0x0000000000413990
	r15d_1784 = (word32) r15_1783 (alias)
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE0E:
	r15_128 = PHI(r15_105, r15_1783)
	r15d_129 = PHI(r15d_106, r15d_1784)
	qwLoc98_130 = r11_127
	eax_131 = strlen(rdi_123)
	rax_132 = DPB(rax_126, eax_131, 0) (alias)
	SCZO_133 = cond(rax_132 - 0x0000000000000011)
	C_134 = SCZO_133 (alias)
	rax_135 = 0x0000000000416919
	r11_136 = qwLoc98_130
	branch rax_132 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00413990 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE26_1:
	r13_1782 = 0x0000000000416919
// DataOut: bx fs r10 r11 r12 r12d r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C8(32)

l000000000040BE2A:
	r13_137 = PHI(r13_113, r13_1782)
	rax_138 = r14_68
	r8_139 = r8_77 + 648
	SCZO_140 = cond(qwLocC0_43 - rbx_74)
	CZ_141 = SCZO_140 (alias)
	qwLocD0_142 = rax_138
	branch qwLocC0_43 >u rbx_74 l000000000040C0E0
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:0x00416919 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0E0:
	SZO_1718 = cond(rbx_74 & rbx_74)
	Z_1719 = SZO_1718 (alias)
	C_1720 = false
	branch Test(EQ,Z_1719) l000000000040BE59
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0E9:
	rax_1723 = qwLocC0_43
	rdx_1724 = 0x0000000000000000
	rdx_rax_1725 = SEQ(rdx_1724, rax_1723) (alias)
	v34_1726 = rdx_rax_1725
	rdx_1727 = (uint64) (v34_1726 % rbx_74)
	rax_1728 = (uint64) (v34_1726 /u rbx_74)
	SZO_1729 = cond(rdx_1727 & rdx_1727)
	Z_1730 = SZO_1729 (alias)
	C_1731 = false
	rsi_1732 = rax_1728
	sil_1733 = (byte) rsi_1732 (alias)
	esi_1734 = (word32) rsi_1732 (alias)
	branch Test(NE,Z_1730) l000000000040BE59
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C0FF:
	rdx_1735 = 0x0000000000000000
	rax_1736 = r12_71
	rdx_rax_1737 = SEQ(rdx_1735, rax_1736) (alias)
	v35_1738 = rdx_rax_1737
	rdx_1739 = (uint64) (v35_1738 % rsi_1732)
	rax_1740 = (uint64) (v35_1738 /u rsi_1732)
	rdi_1741 = rdx_1739 + rdx_1739 * 0x0000000000000004
	r10_1742 = rax_1740
	r10d_1743 = (word32) r10_1742 (alias)
	r10b_1744 = (byte) r10_1742 (alias)
	rdx_1745 = 0x0000000000000000
	rax_1746 = rdi_1741 + rdi_1741
	rdx_rax_1747 = SEQ(rdx_1745, rax_1746) (alias)
	v37_1748 = rdx_rax_1747
	rdx_1749 = (uint64) (v37_1748 % rsi_1732)
	rax_1750 = (uint64) (v37_1748 /u rsi_1732)
	eax_1751 = (word32) rax_1750 (alias)
	rdx_1752 = rdx_1749 + rdx_1749
	edx_1753 = (word32) rdx_1752 (alias)
	rdx_rax_1754 = SEQ(rdx_1752, rax_1750) (alias)
	edx_eax_1755 = rdx_1752 (alias)
	dl_1756 = (byte) rdx_1752 (alias)
	rdi_1757 = (uint64) eax_1751
	edi_1758 = (word32) rdi_1757 (alias)
	dil_1759 = (byte) rdi_1757 (alias)
	SCZO_1760 = cond(rsi_1732 - rdx_1752)
	C_1761 = SCZO_1760 (alias)
	SZO_1762 = SCZO_1760 (alias)
	Z_1763 = SCZO_1760 (alias)
	CZ_1764 = SCZO_1760 (alias)
	S_1765 = SCZO_1760 (alias)
	CZP_1766 = SCZO_1760 (alias)
	branch Test(ULE,CZ_1764) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r13 r15 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C6E0:
	rcx_1774 = (uint64) (0x00000000 - C_1761)
	ecx_1775 = (word32) rcx_1774 (alias)
	rcx_1776 = (uint64) ~ecx_1775
	ecx_1777 = (word32) rcx_1776 (alias)
	rcx_1778 = (uint64) (ecx_1777 + 0x00000003)
	ecx_1779 = (word32) rcx_1778 (alias)
	cl_1780 = (byte) rcx_1778 (alias)
	SCZO_1781 = cond(ecx_1779)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C125:
	rcx_1767 = 0x0000000000000000
	SZO_1768 = cond(rdx_1752 & rdx_1752)
	Z_1769 = SZO_1768 (alias)
	C_1770 = false
	cl_1771 = Test(NE,Z_1769)
	rcx_1772 = DPB(rcx_1767, cl_1771, 0) (alias)
	ecx_1773 = DPB(ecx_79, cl_1771, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040BE43:
	rdx_1680 = 0x0000000000000000
	rax_1681 = rbx_74
	rdx_rax_1682 = SEQ(rdx_1680, rax_1681) (alias)
	v27_1683 = rdx_rax_1682
	rdx_1684 = (uint64) (v27_1683 % qwLocC0_43)
	rax_1685 = (uint64) (v27_1683 /u qwLocC0_43)
	eax_1686 = (word32) rax_1685 (alias)
	rdx_rax_1687 = SEQ(rdx_1684, rax_1685) (alias)
	edx_eax_1688 = rax_1685 (alias)
	ah_1689 = SLICE(rax_1685, byte, 8) (alias)
	ax_1690 = (word16) rax_1685 (alias)
	al_1691 = (byte) rax_1685 (alias)
	SZO_1692 = cond(rdx_1684 & rdx_1684)
	Z_1693 = SZO_1692 (alias)
	C_1694 = false
	rcx_1695 = rax_1685
	ecx_1696 = (word32) rcx_1695 (alias)
	cl_1697 = (byte) rcx_1695 (alias)
	branch Test(EQ,Z_1693) l000000000040C2F0
// DataOut: bx fs r10 r11 r12 r12d r13 r15 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C2F0:
	r10_1698 = rax_1685
	rdx_1699 = 0x0000000000000000
	r10_1700 = r10_1698 *s r12_71
	r10d_1701 = (word32) r10_1700 (alias)
	r10b_1702 = (byte) r10_1700 (alias)
	rax_1703 = r10_1700
	rdx_rax_1704 = SEQ(rdx_1699, rax_1703) (alias)
	v71_1705 = rdx_rax_1704
	rdx_1706 = (uint64) (v71_1705 % rcx_1695)
	rax_1707 = (uint64) (v71_1705 /u rcx_1695)
	SCZO_1708 = cond(rax_1707 - r12_71)
	Z_1709 = SCZO_1708 (alias)
	branch Test(NE,Z_1709) l000000000040BE59
// DataOut: bx fs r10 r10b r10d r11 r12 r12d r13 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C308:
	rcx_1710 = 0x0000000000000000
	ecx_1711 = (word32) rcx_1710 (alias)
	cl_1712 = (byte) rcx_1710 (alias)
	rdi_1713 = 0x0000000000000000
	edi_1714 = (word32) rdi_1713 (alias)
	dil_1715 = (byte) rdi_1713 (alias)
	SZO_1716 = cond(edi_1714)
	C_1717 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C12D:
	r10b_1237 = PHI(r10b_1744, r10b_1744, r10b_1702)
	r10d_1238 = PHI(r10d_1743, r10d_1743, r10d_1701)
	dil_1239 = PHI(dil_1759, dil_1759, dil_1715)
	sil_1240 = PHI(sil_1733, sil_1733, sil_99)
	CZP_1241 = PHI(CZP_1766, CZP_1766, CZP_122)
	esi_1242 = PHI(esi_1734, esi_1734, esi_91)
	edi_1243 = PHI(edi_1758, edi_1758, edi_1714)
	r10_1244 = PHI(r10_1742, r10_1742, r10_1700)
	S_1245 = PHI(S_1765, S_1765, S_121)
	CZ_1246 = PHI(CZ_1764, CZ_1764, CZ_141)
	rsi_1247 = PHI(rsi_1732, rsi_1732, rsi_69)
	ecx_1248 = PHI(ecx_1773, ecx_1779, ecx_1711)
	rcx_1249 = PHI(rcx_1772, rcx_1778, rcx_1710)
	cl_1250 = PHI(cl_1771, cl_1780, cl_1712)
	rdx_1251 = PHI(rdx_1752, rdx_1752, rdx_1706)
	edx_1252 = PHI(edx_1753, edx_1753, edx_64)
	dl_1253 = PHI(dl_1756, dl_1756, dl_98)
	rdi_1254 = PHI(rdi_1757, rdi_1757, rdi_1713)
	rax_1255 = PHI(rax_1750, rax_1750, rax_1707)
	eax_1256 = PHI(eax_1751, eax_1751, eax_1686)
	rdx_rax_1257 = PHI(rdx_rax_1754, rdx_rax_1754, rdx_rax_1704)
	edx_eax_1258 = PHI(edx_eax_1755, edx_eax_1755, edx_eax_1688)
	ah_1259 = PHI(ah_95, ah_95, ah_1689)
	ax_1260 = PHI(ax_96, ax_96, ax_1690)
	al_1261 = PHI(al_101, al_101, al_1691)
	SCZO_1262 = PHI(SCZO_1760, SCZO_1781, SCZO_1708)
	r9_1263 = (uint64) dwLocC8_41
	r9d_1264 = (word32) r9_1263 (alias)
	r8_1265 = qwLocD0_142
	rbx_1266 = 0x00000000FFFFFFFF
	ebx_1267 = (word32) rbx_1266 (alias)
	r9_1268 = (uint64) (r9d_1264 & 0x00000010)
	r9d_1269 = (word32) r9_1268 (alias)
	SZO_1270 = cond(r9d_1269)
	Z_1271 = SZO_1270 (alias)
	C_1272 = false
	branch Test(EQ,Z_1271) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C146:
	rsi_1456 = (uint64) dwLocC4_59
	sil_1457 = (byte) rsi_1456 (alias)
	esi_1458 = (word32) rsi_1456 (alias)
	SCZO_1459 = cond(r10_1244 - rsi_1456)
	C_1460 = SCZO_1459 (alias)
	branch Test(ULT,C_1460) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C710:
	r8_1675 = qwLocD0_142
	rbx_1676 = 0x0000000000000000
	ebx_1677 = (word32) rbx_1676 (alias)
	SZO_1678 = cond(ebx_1677)
	C_1679 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C153:
	rbx_1461 = 0x0000000000000000
	ebx_1462 = (word32) rbx_1461 (alias)
	SZO_1463 = cond(ebx_1462)
	C_1464 = false
	r12_1465 = (uint64) dwLocC4_59
	r12d_1466 = (word32) r12_1465 (alias)
// DataOut: ebx ecx edi fs r10 r11 r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:<invalid> rsi:<invalid> cl:Test(NE,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C17D:
	r10_1467 = PHI(r10_1244, r10_1486)
	ebx_1468 = PHI(ebx_1462, ebx_1520)
	ecx_1469 = PHI(ecx_1248, ecx_1513)
	edx_1470 = PHI(edx_1252, edx_1495)
	rdi_1471 = PHI(rdi_1254, rdi_1505)
	SZO_1472 = PHI(SZO_1463, SZO_1516)
	Z_1473 = PHI(Z_1271, Z_1528)
	C_1474 = PHI(C_1464, C_1518)
	rbx_1475 = PHI(rbx_1461, rbx_1519)
	rax_1476 = r10_1467
	rdx_1477 = 0x0000000000000000
	rdx_rax_1478 = SEQ(rdx_1477, rax_1476) (alias)
	v47_1479 = rdx_rax_1478
	rdx_1480 = (uint64) (v47_1479 % rsi_1456)
	rax_1481 = (uint64) (v47_1479 /u rsi_1456)
	r8_1482 = rax_1481
	eax_1483 = rdx_1480 + rdx_1480 * 0x0000000000000004
	rax_1484 = DPB(rax_1481, eax_1483, 0) (alias)
	rdx_1485 = 0x0000000000000000
	r10_1486 = r8_1482
	r10d_1487 = (word32) r10_1486 (alias)
	r10b_1488 = (byte) r10_1486 (alias)
	eax_1489 = rdi_1471 + rax_1484 * 0x0000000000000002
	edx_eax_1490 = SEQ(edx_1470, eax_1489) (alias)
	rdi_1491 = (uint64) ecx_1469
	edi_1492 = (word32) rdi_1491 (alias)
	rdi_1493 = (uint64) (edi_1492 >> 0x00000001)
	v49_1494 = edx_eax_1490
	edx_1495 = (uint32) (v49_1494 % r12d_1466)
	rdx_1496 = DPB(rdx_1485, edx_1495, 0) (alias)
	eax_1497 = (uint32) (v49_1494 /u r12d_1466)
	rax_1498 = DPB(rax_1484, eax_1497, 0) (alias)
	rdx_rax_1499 = DPB(rdx_rax_1478, eax_1497, 0) (alias)
	edx_eax_1500 = SEQ(edx_1495, eax_1497) (alias)
	ah_1501 = SLICE(eax_1497, byte, 8) (alias)
	ax_1502 = (word16) eax_1497 (alias)
	al_1503 = (byte) eax_1497 (alias)
	r14d_1504 = rdi_1493 + rdx_1496 * 0x0000000000000002
	rdi_1505 = (uint64) eax_1497
	edi_1506 = (word32) rdi_1505 (alias)
	dil_1507 = (byte) rdi_1505 (alias)
	rcx_1508 = (uint64) (ecx_1469 + r14d_1504)
	ecx_1509 = (word32) rcx_1508 (alias)
	cl_1510 = (byte) rcx_1508 (alias)
	SCZO_1511 = cond(r12d_1466 - r14d_1504)
	CZ_1512 = SCZO_1511 (alias)
	branch Test(UGT,CZ_1512) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C160:
	SZO_1668 = cond(ecx_1509 & ecx_1509)
	Z_1669 = SZO_1668 (alias)
	C_1670 = false
	cl_1671 = Test(NE,Z_1669)
	ecx_1672 = (word32) cl_1671
	rcx_1673 = DPB(rcx_1508, ecx_1672, 0) (alias)
	cl_1674 = (byte) ecx_1672 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1A8:
	SCZO_1658 = cond(r12d_1466 - ecx_1509)
	C_1659 = SCZO_1658 (alias)
	rcx_1660 = (uint64) (0x00000000 - C_1659)
	ecx_1661 = (word32) rcx_1660 (alias)
	rcx_1662 = (uint64) ~ecx_1661
	ecx_1663 = (word32) rcx_1662 (alias)
	rcx_1664 = (uint64) (ecx_1663 + 0x00000003)
	ecx_1665 = (word32) rcx_1664 (alias)
	cl_1666 = (byte) rcx_1664 (alias)
	SCZO_1667 = cond(ecx_1665)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C168:
	ecx_1513 = PHI(ecx_1665, ecx_1672)
	rcx_1514 = PHI(rcx_1664, rcx_1673)
	cl_1515 = PHI(cl_1666, cl_1674)
	SZO_1516 = PHI(SZO_1472, SZO_1668)
	Z_1517 = PHI(Z_1473, Z_1669)
	C_1518 = PHI(C_1659, C_1670)
	rbx_1519 = (uint64) (ebx_1468 + 0x00000001)
	ebx_1520 = (word32) rbx_1519 (alias)
	SCZO_1521 = cond(rsi_1456 - r8_1482)
	CZ_1522 = SCZO_1521 (alias)
	branch Test(UGT,CZ_1522) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r8 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C49F:
	SCZO_1529 = cond(r8_1482 - 0x0000000000000009)
	CZ_1530 = SCZO_1529 (alias)
	branch Test(UGT,CZ_1530) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4A9:
	SCZO_1531 = cond(dwLocB0_35 - 0x00000001)
	Z_1532 = SCZO_1531 (alias)
	branch Test(EQ,Z_1532) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7B0:
	rdx_1645 = (uint64) eax_1497
	edx_1646 = (word32) rdx_1645 (alias)
	rdx_1647 = (uint64) (edx_1646 & 0x00000001)
	edx_1648 = (word32) rdx_1647 (alias)
	rdx_1649 = (uint64) (edx_1648 + ecx_1513)
	edx_1650 = (word32) rdx_1649 (alias)
	SCZO_1651 = cond(edx_1650 - 0x00000002)
	SZO_1652 = SCZO_1651 (alias)
	dl_1653 = Test(GT,SZO_1652)
	edx_1654 = DPB(edx_1650, dl_1653, 0) (alias)
	rdx_1655 = DPB(rdx_1649, dl_1653, 0) (alias)
	rdx_rax_1656 = DPB(rdx_rax_1499, dl_1653, 64) (alias)
	edx_eax_1657 = DPB(edx_eax_1500, dl_1653, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4B4:
	r12_1629 = (uint64) dwLocB0_35
	r12d_1630 = (word32) r12_1629 (alias)
	SZO_1631 = cond(ecx_1513 & ecx_1513)
	dl_1632 = Test(GT,SZO_1631)
	edx_1633 = DPB(edx_1495, dl_1632, 0) (alias)
	SZO_1634 = cond(r12d_1630 & r12d_1630)
	Z_1635 = SZO_1634 (alias)
	sil_1636 = Test(EQ,Z_1635)
	esi_1637 = DPB(esi_1458, sil_1636, 0) (alias)
	rdx_1638 = (uint64) (edx_1633 & esi_1637)
	edx_1639 = (word32) rdx_1638 (alias)
	rdx_rax_1640 = SEQ(rdx_1638, rax_1498) (alias)
	edx_eax_1641 = rdx_1638 (alias)
	dl_1642 = (byte) rdx_1638 (alias)
	SZO_1643 = cond(edx_1639)
	C_1644 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4C7:
	sil_1533 = PHI(sil_1636, sil_1457)
	esi_1534 = PHI(esi_1637, esi_1458)
	r12d_1535 = PHI(r12d_1630, r12d_1466)
	rdx_1536 = PHI(rdx_1638, rdx_1655)
	edx_1537 = PHI(edx_1639, edx_1654)
	dl_1538 = PHI(dl_1642, dl_1653)
	rdx_rax_1539 = PHI(rdx_rax_1640, rdx_rax_1656)
	edx_eax_1540 = PHI(edx_eax_1641, edx_eax_1657)
	SCZO_1541 = PHI(SCZO_1531, SCZO_1651)
	r12_1542 = PHI(r12_1629, r12_1465)
	SZO_1543 = cond(dl_1538 & dl_1538)
	Z_1544 = SZO_1543 (alias)
	C_1545 = false
	branch Test(EQ,Z_1544) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C788:
	SZO_1626 = cond(eax_1497 & eax_1497)
	Z_1627 = SZO_1626 (alias)
	C_1628 = false
	branch Test(NE,Z_1627) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4CF:
	edi_1602 = rax_1498 + 0x0000000000000001
	rdi_1603 = DPB(rdi_1505, edi_1602, 0) (alias)
	dil_1604 = (byte) edi_1602 (alias)
	SCZO_1605 = cond(edi_1602 - 0x0000000A)
	Z_1606 = SCZO_1605 (alias)
	branch Test(EQ,Z_1606) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7CE:
	r10_1607 = r8_1482 + 0x0000000000000001
	r10d_1608 = (word32) r10_1607 (alias)
	r10b_1609 = (byte) r10_1607 (alias)
	SCZO_1610 = cond(r10_1607 - 0x000000000000000A)
	Z_1611 = SCZO_1610 (alias)
	branch Test(NE,Z_1611) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7FF:
	rcx_1621 = 0x0000000000000000
	ecx_1622 = (word32) rcx_1621 (alias)
	cl_1623 = (byte) rcx_1621 (alias)
	SZO_1624 = cond(0x00000000)
	C_1625 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C790:
	r10b_1578 = PHI(r10b_1609, r10b_1488)
	r10d_1579 = PHI(r10d_1608, r10d_1487)
	dil_1580 = PHI(dil_1604, dil_1507)
	edi_1581 = PHI(edi_1602, edi_1506)
	r10_1582 = PHI(r10_1607, r10_1486)
	ecx_1583 = PHI(ecx_1622, ecx_1513)
	rcx_1584 = PHI(rcx_1621, rcx_1514)
	cl_1585 = PHI(cl_1623, cl_1515)
	rdi_1586 = PHI(rdi_1603, rdi_1505)
	SCZO_1587 = PHI(SCZO_1610, SCZO_1541)
	SZO_1588 = cond(bLocC8 & 0x08)
	Z_1589 = SZO_1588 (alias)
	C_1590 = false
	branch Test(NE,Z_1589) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7C2:
	r8_1596 = qwLocD0_142
	rdi_1597 = 0x0000000000000000
	edi_1598 = (word32) rdi_1597 (alias)
	dil_1599 = (byte) rdi_1597 (alias)
	SZO_1600 = cond(0x00000000)
	C_1601 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C797:
	rdi_1591 = 0x0000000000000000
	edi_1592 = (word32) rdi_1591 (alias)
	dil_1593 = (byte) rdi_1591 (alias)
	SZO_1594 = cond(0x00000000)
	C_1595 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C7D8:
	r8_1612 = qwLocD0_142
	rcx_1613 = 0x0000000000000000
	ecx_1614 = (word32) rcx_1613 (alias)
	cl_1615 = (byte) rcx_1613 (alias)
	rdi_1616 = 0x0000000000000000
	edi_1617 = (word32) rdi_1616 (alias)
	dil_1618 = (byte) rdi_1616 (alias)
	SZO_1619 = cond(0x00000000)
	C_1620 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C4DB:
	edi_1546 = PHI(edi_1602, edi_1506, edi_1592)
	r10_1547 = PHI(r10_1486, r10_1486, r10_1582)
	Z_1548 = PHI(Z_1606, Z_1627, Z_1589)
	SCZO_1549 = PHI(SCZO_1605, SCZO_1541, SCZO_1587)
	rax_1550 = qwLocB8_38
	rdi_1551 = (uint64) (edi_1546 + 0x00000030)
	dil_1552 = (byte) rdi_1551 (alias)
	rdx_1553 = r11_136
	rsi_1554 = r15_128
	dwLoc8C_1555 = r9d_1269
	qwLocA8_1556 = r10_1547
	qwLoc98_1557 = r11_136
	r8_1558 = r8_1482 + 0x0000000000000287
	Mem1559[rax_1550 + 0x0000000000000287:byte] = dil_1552
	r8_1560 = r8_1558 - r11_136
	rdi_1561 = r8_1560
	rax_1562 = memcpy(rdi_1561, rsi_1554, rdx_1553)
	r11_1563 = qwLoc98_1557
	r10_1564 = qwLocA8_1556
	r10d_1565 = (word32) r10_1564 (alias)
	r10b_1566 = (byte) r10_1564 (alias)
	r8_1567 = rax_1562
	r9_1568 = (uint64) dwLoc8C_1555
	r9d_1569 = (word32) r9_1568 (alias)
	rcx_1570 = 0x0000000000000000
	ecx_1571 = (word32) rcx_1570 (alias)
	cl_1572 = (byte) rcx_1570 (alias)
	rdi_1573 = 0x0000000000000000
	edi_1574 = (word32) rdi_1573 (alias)
	dil_1575 = (byte) rdi_1573 (alias)
	SZO_1576 = cond(0x00000000)
	C_1577 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C174:
	SCZO_1527 = cond(ebx_1520 - 0x00000008)
	Z_1528 = SCZO_1527 (alias)
	branch Test(EQ,Z_1528) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r12d r13 r15 r9 r9d rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C768:
	CZ_1523 = PHI(CZ_1522, CZ_1530)
	Z_1524 = PHI(Z_1528, Z_1517)
	SCZO_1525 = PHI(SCZO_1527, SCZO_1529)
	r8_1526 = qwLocD0_142
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C530:
	dwLoc8C_1273 = PHI(dwLoc8C, dwLoc8C, dwLoc8C_1555, dwLoc8C, dwLoc8C, dwLoc8C)
	qwLocA8_1274 = PHI(qwLocA8, qwLocA8, qwLocA8_1556, qwLocA8, qwLocA8, qwLocA8)
	qwLoc98_1275 = PHI(qwLoc98_130, qwLoc98_130, qwLoc98_1557, qwLoc98_130, qwLoc98_130, qwLoc98_130)
	r10b_1276 = PHI(r10b_1237, r10b_1488, r10b_1566, r10b_1609, r10b_1578, r10b_1237)
	r10d_1277 = PHI(r10d_1238, r10d_1487, r10d_1565, r10d_1608, r10d_1579, r10d_1238)
	dil_1278 = PHI(dil_1239, dil_1507, dil_1575, dil_1618, dil_1599, dil_1239)
	sil_1279 = PHI(sil_1457, sil_1457, sil_1533, sil_1533, sil_1533, sil_1240)
	esi_1280 = PHI(esi_1458, esi_1458, esi_1534, esi_1534, esi_1534, esi_1242)
	edi_1281 = PHI(edi_1243, edi_1506, edi_1574, edi_1617, edi_1598, edi_1243)
	r10_1282 = PHI(r10_1244, r10_1486, r10_1564, r10_1607, r10_1582, r10_1244)
	r11_1283 = PHI(r11_136, r11_136, r11_1563, r11_136, r11_136, r11_136)
	r8_1284 = PHI(r8_1675, r8_1526, r8_1567, r8_1612, r8_1596, r8_1265)
	r9_1285 = PHI(r9_1268, r9_1268, r9_1568, r9_1268, r9_1268, r9_1268)
	r9d_1286 = PHI(r9d_1269, r9d_1269, r9d_1569, r9d_1269, r9d_1269, r9d_1269)
	r12d_1287 = PHI(r12d_92, r12d_1466, r12d_1535, r12d_1535, r12d_1535, r12d_92)
	r14d_1288 = PHI(r14d_94, r14d_1504, r14d_1504, r14d_1504, r14d_1504, r14d_94)
	CZ_1289 = PHI(CZ_1246, CZ_1523, CZ_1530, CZ_1530, CZ_1530, CZ_1246)
	ebx_1290 = PHI(ebx_1677, ebx_1520, ebx_1520, ebx_1520, ebx_1520, ebx_1267)
	rsi_1291 = PHI(rsi_1456, rsi_1456, rsi_1554, rsi_1456, rsi_1456, rsi_1247)
	ecx_1292 = PHI(ecx_1248, ecx_1513, ecx_1571, ecx_1614, ecx_1583, ecx_1248)
	rcx_1293 = PHI(rcx_1249, rcx_1514, rcx_1570, rcx_1613, rcx_1584, rcx_1249)
	cl_1294 = PHI(cl_1250, cl_1515, cl_1572, cl_1615, cl_1585, cl_1250)
	rdx_1295 = PHI(rdx_1251, rdx_1496, rdx_1553, rdx_1536, rdx_1536, rdx_1251)
	edx_1296 = PHI(edx_1252, edx_1495, edx_1537, edx_1537, edx_1537, edx_1252)
	dl_1297 = PHI(dl_1253, dl_1253, dl_1538, dl_1538, dl_1538, dl_1253)
	rdi_1298 = PHI(rdi_1254, rdi_1505, rdi_1573, rdi_1616, rdi_1597, rdi_1254)
	SZO_1299 = PHI(SZO_1678, SZO_1516, SZO_1576, SZO_1619, SZO_1600, SZO_1270)
	C_1300 = PHI(C_1679, C_1518, C_1577, C_1620, C_1601, C_1272)
	rax_1301 = PHI(rax_1255, rax_1498, rax_1562, rax_1498, rax_1498, rax_1255)
	eax_1302 = PHI(eax_1256, eax_1497, eax_1497, eax_1497, eax_1497, eax_1256)
	rdx_rax_1303 = PHI(rdx_rax_1257, rdx_rax_1499, rdx_rax_1539, rdx_rax_1539, rdx_rax_1539, rdx_rax_1257)
	edx_eax_1304 = PHI(edx_eax_1258, edx_eax_1500, edx_eax_1540, edx_eax_1540, edx_eax_1540, edx_eax_1258)
	ah_1305 = PHI(ah_1259, ah_1501, ah_1501, ah_1501, ah_1501, ah_1259)
	ax_1306 = PHI(ax_1260, ax_1502, ax_1502, ax_1502, ax_1502, ax_1260)
	al_1307 = PHI(al_1261, al_1503, al_1503, al_1503, al_1503, al_1261)
	rbx_1308 = PHI(rbx_1676, rbx_1519, rbx_1519, rbx_1519, rbx_1519, rbx_1266)
	r12_1309 = PHI(r12_71, r12_1465, r12_1542, r12_1542, r12_1542, r12_71)
	SCZO_1310 = cond(dwLocB0_35 - 0x00000001)
	Z_1311 = SCZO_1310 (alias)
	branch Test(EQ,Z_1311) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6F0:
	rax_1437 = r10_1282
	eax_1438 = (word32) rax_1437 (alias)
	rcx_1439 = (int64) ecx_1292
	rax_1440 = (uint64) (eax_1438 & 0x00000001)
	rax_1441 = rax_1440 + rcx_1439
	SCZO_1442 = cond(rax_1441)
	Z_1443 = SCZO_1442 (alias)
	al_1444 = Test(NE,Z_1443)
	eax_1445 = (word32) al_1444
	rdi_1446 = (uint64) (edi_1281 + eax_1445)
	edi_1447 = (word32) rdi_1446 (alias)
	SCZO_1448 = cond(edi_1447 - 0x00000005)
	SZO_1449 = SCZO_1448 (alias)
	al_1450 = Test(GT,SZO_1449)
	eax_1451 = DPB(eax_1445, al_1450, 0) (alias)
	rax_1452 = DPB(rax_1441, al_1450, 0) (alias)
	rdx_rax_1453 = DPB(rdx_rax_1303, al_1450, 0) (alias)
	edx_eax_1454 = DPB(edx_eax_1304, al_1450, 0) (alias)
	ax_1455 = DPB(ax_1306, al_1450, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C53B:
	rsi_1416 = (uint64) dwLocB0_35
	esi_1417 = (word32) rsi_1416 (alias)
	rax_1418 = 0x0000000000000000
	eax_1419 = (word32) rax_1418 (alias)
	rdx_rax_1420 = SEQ(rdx_1295, rax_1418) (alias)
	edx_eax_1421 = rax_1418 (alias)
	ax_1422 = (word16) rax_1418 (alias)
	al_1423 = (byte) rax_1418 (alias)
	SZO_1424 = cond(esi_1417 & esi_1417)
	Z_1425 = SZO_1424 (alias)
	C_1426 = false
	branch Test(NE,Z_1425) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C545:
	rcx_1427 = (uint64) (ecx_1292 + edi_1281)
	ecx_1428 = (word32) rcx_1427 (alias)
	SZO_1429 = cond(ecx_1428 & ecx_1428)
	C_1430 = false
	al_1431 = Test(GT,SZO_1429)
	eax_1432 = DPB(eax_1419, al_1431, 0) (alias)
	rax_1433 = DPB(rax_1418, al_1431, 0) (alias)
	rdx_rax_1434 = DPB(rdx_rax_1420, al_1431, 0) (alias)
	edx_eax_1435 = DPB(edx_eax_1421, al_1431, 0) (alias)
	ax_1436 = DPB(ax_1422, al_1431, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C54C:
	esi_1312 = PHI(esi_1417, esi_1417, esi_1280)
	edi_1313 = PHI(edi_1281, edi_1281, edi_1447)
	rsi_1314 = PHI(rsi_1416, rsi_1416, rsi_1291)
	ecx_1315 = PHI(ecx_1292, ecx_1428, ecx_1292)
	rcx_1316 = PHI(rcx_1293, rcx_1427, rcx_1439)
	rdi_1317 = PHI(rdi_1298, rdi_1298, rdi_1446)
	rax_1318 = PHI(rax_1418, rax_1433, rax_1452)
	eax_1319 = PHI(eax_1419, eax_1432, eax_1451)
	rdx_rax_1320 = PHI(rdx_rax_1420, rdx_rax_1434, rdx_rax_1453)
	edx_eax_1321 = PHI(edx_eax_1421, edx_eax_1435, edx_eax_1454)
	ax_1322 = PHI(ax_1422, ax_1436, ax_1455)
	al_1323 = PHI(al_1423, al_1431, al_1450)
	SCZO_1324 = PHI(SCZO_1310, SCZO_1310, SCZO_1448)
	SZO_1325 = cond(al_1323 & al_1323)
	Z_1326 = SZO_1325 (alias)
	C_1327 = false
	branch Test(EQ,Z_1326) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 r9d rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C550:
	r10_1378 = r10_1282 + 0x0000000000000001
	r10d_1379 = (word32) r10_1378 (alias)
	r10b_1380 = (byte) r10_1378 (alias)
	SZO_1381 = cond(r9d_1286 & r9d_1286)
	Z_1382 = SZO_1381 (alias)
	C_1383 = false
	branch Test(EQ,Z_1382) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C559:
	rax_1384 = (uint64) dwLocC4_59
	eax_1385 = (word32) rax_1384 (alias)
	rdx_rax_1386 = SEQ(rdx_1295, rax_1384) (alias)
	edx_eax_1387 = rax_1384 (alias)
	ah_1388 = SLICE(rax_1384, byte, 8) (alias)
	ax_1389 = (word16) rax_1384 (alias)
	al_1390 = (byte) rax_1384 (alias)
	SCZO_1391 = cond(rax_1384 - r10_1378)
	Z_1392 = SCZO_1391 (alias)
	branch Test(NE,Z_1392) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C562:
	SCZO_1393 = cond(ebx_1290 - 0x00000008)
	Z_1394 = SCZO_1393 (alias)
	branch Test(EQ,Z_1394) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C567:
	rbx_1395 = (uint64) (ebx_1290 + 0x00000001)
	ebx_1396 = (word32) rbx_1395 (alias)
	SZO_1397 = cond(bLocC8 & 0x08)
	Z_1398 = SZO_1397 (alias)
	C_1399 = false
	r10_1400 = 0x0000000000000001
	r10d_1401 = (word32) r10_1400 (alias)
	r10b_1402 = (byte) r10_1400 (alias)
	branch Test(NE,Z_1398) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r13 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C577:
	rax_1403 = rax_1384 - 0x0000000000000001
	Mem1404[rax_1403 - 0x0000000000000001:byte] = 0x30
	rdx_1405 = r11_1283
	rsi_1406 = r15_128
	qwLocB0_1407 = 0x0000000000000001
	rax_1408 = rax_1403 - r11_1283
	SCZO_1409 = cond(rax_1408)
	rdi_1410 = rax_1408
	rax_1411 = memcpy(rdi_1410, rsi_1406, rdx_1405)
	r10_1412 = 0x0000000000000001
	r10d_1413 = (word32) r10_1412 (alias)
	r10b_1414 = (byte) r10_1412 (alias)
	r8_1415 = rax_1411
// DataOut: ebx fs r10 r10b r11 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:0x0000000000000001 r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5A0:
	qwLocB0_1328 = PHI(qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0, qwLocB0_1407)
	r10b_1329 = PHI(r10b_1276, r10b_1380, r10b_1380, r10b_1380, r10b_1402, r10b_1414)
	r10d_1330 = PHI(r10d_1277, r10d_1379, r10d_1379, r10d_1379, r10d_1401, r10d_1413)
	r10_1331 = PHI(r10_1282, r10_1378, r10_1378, r10_1378, r10_1400, r10_1412)
	r8_1332 = PHI(r8_1284, r8_1284, r8_1284, r8_1284, r8_1284, r8_1415)
	ebx_1333 = PHI(ebx_1290, ebx_1290, ebx_1290, ebx_1290, ebx_1396, ebx_1396)
	rsi_1334 = PHI(rsi_1314, rsi_1314, rsi_1314, rsi_1314, rsi_1314, rsi_1406)
	rdx_1335 = PHI(rdx_1295, rdx_1295, rdx_1295, rdx_1295, rdx_1295, rdx_1405)
	rdi_1336 = PHI(rdi_1317, rdi_1317, rdi_1317, rdi_1317, rdi_1317, rdi_1410)
	SZO_1337 = PHI(SZO_1325, SZO_1381, SZO_1381, SZO_1381, SZO_1397, SZO_1397)
	Z_1338 = PHI(Z_1326, Z_1382, Z_1392, Z_1394, Z_1398, Z_1398)
	C_1339 = PHI(C_1327, C_1383, C_1383, C_1383, C_1399, C_1399)
	rax_1340 = PHI(rax_1318, rax_1318, rax_1384, rax_1384, rax_1384, rax_1411)
	eax_1341 = PHI(eax_1319, eax_1319, eax_1385, eax_1385, eax_1385, eax_1385)
	rdx_rax_1342 = PHI(rdx_rax_1320, rdx_rax_1320, rdx_rax_1386, rdx_rax_1386, rdx_rax_1386, rdx_rax_1386)
	edx_eax_1343 = PHI(edx_eax_1321, edx_eax_1321, edx_eax_1387, edx_eax_1387, edx_eax_1387, edx_eax_1387)
	ah_1344 = PHI(ah_1305, ah_1305, ah_1388, ah_1388, ah_1388, ah_1388)
	ax_1345 = PHI(ax_1322, ax_1322, ax_1389, ax_1389, ax_1389, ax_1389)
	al_1346 = PHI(al_1323, al_1323, al_1390, al_1390, al_1390, al_1390)
	SCZO_1347 = PHI(SCZO_1324, SCZO_1324, SCZO_1391, SCZO_1393, SCZO_1393, SCZO_1409)
	rbx_1348 = PHI(rbx_1308, rbx_1308, rbx_1308, rbx_1308, rbx_1395, rbx_1395)
	r12_1349 = r8_1332
	r12d_1350 = (word32) r12_1349 (alias)
	rcx_1351 = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r11 r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5B0:
	r10_1352 = PHI(r10_1331, r10_1370)
	r12_1353 = PHI(r12_1349, r12_1355)
	rax_1354 = r10_1352
	r12_1355 = r12_1353 - 0x0000000000000001
	r12d_1356 = (word32) r12_1355 (alias)
	rdx_rax_1357 = 0x00000000CCCCCCCD *u rax_1354
	rdx_1358 = SLICE(rdx_rax_1357, word64, 64) (alias)
	rdx_1359 = rdx_1358 >>u 0x0000000000000003
	rax_1360 = rdx_1359 + rdx_1359 * 0x0000000000000004
	rax_1361 = rax_1360 + rax_1360
	r10_1362 = r10_1352 - rax_1361
	r10d_1363 = (word32) r10_1362 (alias)
	r10_1364 = (uint64) (r10d_1363 + 0x00000030)
	r10b_1365 = (byte) r10_1364 (alias)
	SZO_1366 = cond(rdx_1359 & rdx_1359)
	Z_1367 = SZO_1366 (alias)
	C_1368 = false
	Mem1369[r12_1355:byte] = r10b_1365
	r10_1370 = rdx_1359
	r10d_1371 = (word32) r10_1370 (alias)
	r10b_1372 = (byte) r10_1370 (alias)
	branch Test(NE,Z_1367) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C5D8:
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x00000000CCCCCCCD r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0xCD edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BE59:
	r10b_587 = PHI(r10b_104, r10b_104, r10b_104, r10b_1702)
	r10d_588 = PHI(r10d_103, r10d_103, r10d_103, r10d_1701)
	sil_589 = PHI(sil_99, sil_99, sil_1733, sil_99)
	esi_590 = PHI(esi_91, esi_91, esi_1734, esi_91)
	r10_591 = PHI(r10_86, r10_86, r10_86, r10_1700)
	rsi_592 = PHI(rsi_69, rsi_69, rsi_1732, rsi_69)
	ecx_593 = PHI(ecx_1696, ecx_79, ecx_79, ecx_1696)
	rcx_594 = PHI(rcx_1695, rcx_75, rcx_75, rcx_1695)
	cl_595 = PHI(cl_1697, cl_88, cl_88, cl_1697)
	rdx_596 = PHI(rdx_1684, rdx_115, rdx_1727, rdx_1706)
	Z_597 = PHI(Z_1693, Z_1719, Z_1730, Z_1709)
	rax_598 = PHI(rax_1685, rax_138, rax_1728, rax_1707)
	eax_599 = PHI(eax_1686, eax_131, eax_131, eax_1686)
	rdx_rax_600 = PHI(rdx_rax_1687, rdx_rax, rdx_rax_1725, rdx_rax_1704)
	edx_eax_601 = PHI(edx_eax_1688, edx_eax, edx_eax, edx_eax_1688)
	ah_602 = PHI(ah_1689, ah_95, ah_95, ah_1689)
	ax_603 = PHI(ax_1690, ax_96, ax_96, ax_1690)
	al_604 = PHI(al_1691, al_101, al_101, al_1691)
	SCZO_605 = PHI(SCZO_140, SCZO_140, SCZO_140, SCZO_1708)
	qwLoc80_606 = r12_71
	SZO_607 = cond(r12_71 & r12_71)
	S_608 = SZO_607 (alias)
	C_609 = false
	rLoc1_610 = (real64) qwLoc80_606
	branch (r12_71 & r12_71) < 0x0000000000000000 l000000000040C5F0
// DataOut: bx fs r10 r11 r13 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C5F0:
	rLoc1_1231 = rLoc1_610 + Mem0[0x0000000000415F08:real32]
	qwLoc80_1232 = rbx_74
	SZO_1233 = cond(rbx_74 & rbx_74)
	S_1234 = SZO_1233 (alias)
	C_1235 = false
	rLoc2_1236 = (real64) qwLoc80_1232
	branch Test(NS,S_1234) l000000000040BE7D
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE6B:
	qwLoc80_1226 = rbx_74
	SZO_1227 = cond(rbx_74 & rbx_74)
	S_1228 = SZO_1227 (alias)
	C_1229 = false
	rLoc2_1230 = (real64) qwLoc80_1226
	branch Test(SG,S_1228) l000000000040C608
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rdi -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C608:
	rLoc2_1219 = PHI(rLoc2_1230, rLoc2_1236)
	qwLoc80_1220 = PHI(qwLoc80_1226, qwLoc80_1232)
	rLoc1_1221 = PHI(rLoc1_610, rLoc1_1231)
	S_1222 = PHI(S_1228, S_1234)
	SZO_1223 = PHI(SZO_1227, SZO_1233)
	C_1224 = PHI(C_1229, C_1235)
	rLoc2_1225 = rLoc2_1219 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE7D:
	rLoc2_611 = PHI(rLoc2_1230, rLoc2_1225, rLoc2_1236)
	rLoc1_612 = PHI(rLoc1_610, rLoc1_1221, rLoc1_1231)
	rax_613 = qwLocC0_43
	qwLoc80_614 = rax_613
	SZO_615 = cond(rax_613 & rax_613)
	S_616 = SZO_615 (alias)
	C_617 = false
	rLoc3_618 = (real64) qwLoc80_614
	branch (rax_613 & rax_613) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):rcx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C5E0:
	rLoc3_1218 = rLoc3_618 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040BE94:
	rLoc3_619 = PHI(rLoc3_618, rLoc3_1218)
	SZO_620 = cond(bLocC8 & 0x10)
	Z_621 = SZO_620 (alias)
	C_622 = false
	rLoc2_623 = rLoc2_611 / rLoc3_619
	rLoc1_624 = rLoc1_612 * rLoc2_623
	branch (bLocC8 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(32) Local -00C8(0) Local -00D0(64)

l000000000040C1B8:
	SCZO_1055 = cond(dwLocB0_35 - 0x00000001)
	Z_1056 = SCZO_1055 (alias)
	branch Test(EQ,Z_1056) l000000000040C1CD
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1BF:
	rLoc2_1097 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1098 = cond(rLoc2_1097 - rLoc1_624)
	CZ_1099 = CZP_1098 (alias)
	branch Test(UGT,CZ_1099) l000000000040C408
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C408:
	rLoc2_1100 = (real64) Mem0[0x0000000000415F0C:real32]
	v69_1101 = rLoc2_1100
	rLoc2_1102 = rLoc1_624
	rLoc1_1103 = v69_1101
	CZP_1104 = cond(rLoc2_1102 - rLoc1_1103)
	C_1105 = CZP_1104 (alias)
	branch Test(UGE,C_1105) l000000000040C6A0
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C6A0:
	wLoc82_1196 = __fstcw()
	eax_1197 = (word32) wLoc82_1196
	ah_1198 = SLICE(eax_1197, byte, 8) (alias)
	rLoc2_1199 = rLoc2_1102 - rLoc1_1103
	v70_1200 = rLoc2_1199
	rLoc2_1201 = rLoc1_1103
	rLoc1_1202 = v70_1200
	rdx_1203 = 0x0000000000000000
	ah_1204 = ah_1198 | 0x0C
	ax_1205 = DPB(ax_603, ah_1204, 8) (alias)
	wLoc84_1206 = ax_1205
	__fldcw(wLoc84_1206)
	qwLoc80_1207 = (int64) rLoc2_1201
	__fldcw(wLoc82_1196)
	rax_1208 = qwLoc80_1207
	rax_1209 = rax_1208 ^ 0x0000000000000000
	eax_1210 = (word32) rax_1209 (alias)
	rdx_rax_1211 = SEQ(rdx_1203, rax_1209) (alias)
	edx_eax_1212 = rax_1209 (alias)
	ah_1213 = SLICE(rax_1209, byte, 8) (alias)
	ax_1214 = (word16) rax_1209 (alias)
	al_1215 = (byte) rax_1209 (alias)
	SZO_1216 = cond(rax_1209)
	C_1217 = false
// DataOut: ax fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C418:
	rLoc1_1178 = rLoc2_1102
	wLoc82_1179 = __fstcw()
	eax_1180 = (word32) wLoc82_1179
	ah_1181 = SLICE(eax_1180, byte, 8) (alias)
	ah_1182 = ah_1181 | 0x0C
	ax_1183 = DPB(ax_603, ah_1182, 8) (alias)
	SZO_1184 = cond(ah_1182)
	C_1185 = false
	wLoc84_1186 = ax_1183
	rLoc2_1187 = rLoc2_1102
	__fldcw(wLoc84_1186)
	qwLoc80_1188 = (int64) rLoc2_1187
	__fldcw(wLoc82_1179)
	rax_1189 = qwLoc80_1188
	eax_1190 = (word32) rax_1189 (alias)
	rdx_rax_1191 = SEQ(rdx_596, rax_1189) (alias)
	edx_eax_1192 = rax_1189 (alias)
	ah_1193 = SLICE(rax_1189, byte, 8) (alias)
	ax_1194 = (word16) rax_1189 (alias)
	al_1195 = (byte) rax_1189 (alias)
// DataOut: ax fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C43E:
	wLoc82_1106 = PHI(wLoc82_1179, wLoc82_1196)
	wLoc84_1107 = PHI(wLoc84_1186, wLoc84_1206)
	rLoc2_1108 = PHI(rLoc2_1187, rLoc2_1201)
	qwLoc80_1109 = PHI(qwLoc80_1188, qwLoc80_1207)
	rLoc1_1110 = PHI(rLoc1_1178, rLoc1_1202)
	rax_1111 = PHI(rax_1189, rax_1209)
	eax_1112 = PHI(eax_1190, eax_1210)
	ah_1113 = PHI(ah_1193, ah_1213)
	ax_1114 = PHI(ax_1194, ax_1214)
	al_1115 = PHI(al_1195, al_1215)
	rsi_1116 = (uint64) dwLocB0_35
	esi_1117 = (word32) rsi_1116 (alias)
	rdx_1118 = 0x0000000000000000
	edx_1119 = (word32) rdx_1118 (alias)
	rdx_rax_1120 = SEQ(rdx_1118, rax_1111) (alias)
	edx_eax_1121 = rdx_1118 (alias)
	dl_1122 = (byte) rdx_1118 (alias)
	SZO_1123 = cond(esi_1117 & esi_1117)
	Z_1124 = SZO_1123 (alias)
	C_1125 = false
	branch Test(NE,Z_1124) l000000000040C470
// DataOut: ax fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C470:
	rLoc1_1177 = rLoc1_1110
// DataOut: fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C448:
	qwLoc80_1145 = rax_1111
	SZO_1146 = cond(rax_1111 & rax_1111)
	S_1147 = SZO_1146 (alias)
	C_1148 = false
	rLoc2_1149 = (real64) qwLoc80_1145
	branch Test(SG,S_1147) l000000000040C772
// DataOut: fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C772:
	rLoc2_1176 = rLoc2_1149 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C45A:
	rLoc2_1150 = PHI(rLoc2_1149, rLoc2_1176)
	rcx_1151 = 0x0000000000000000
	ecx_1152 = (word32) rcx_1151 (alias)
	SZO_1153 = cond(ecx_1152)
	rdx_1154 = 0x0000000000000001
	edx_1155 = (word32) rdx_1154 (alias)
	rdx_rax_1156 = SEQ(rdx_1154, rax_1111) (alias)
	edx_eax_1157 = rdx_1154 (alias)
	dl_1158 = (byte) rdx_1154 (alias)
	CZP_1159 = cond(rLoc2_1150 - rLoc1_1110)
	Z_1160 = CZP_1159 (alias)
	P_1161 = CZP_1159 (alias)
	rLoc1_1162 = rLoc1_1110
	cl_1163 = Test(PE,P_1161)
	rcx_1164 = DPB(rcx_1151, cl_1163, 0) (alias)
	ecx_1165 = DPB(ecx_1152, cl_1163, 0) (alias)
	branch Test(NE,Z_1160) l000000000040C46C
// DataOut: fs r10 r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C468_1:
	rdx_1171 = rcx_1164
	edx_1172 = (word32) rdx_1171 (alias)
	rdx_rax_1173 = SEQ(rdx_1171, rax_1111) (alias)
	edx_eax_1174 = rdx_1171 (alias)
	dl_1175 = (byte) rdx_1171 (alias)
// DataOut: fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C46C:
	rdx_1166 = PHI(rdx_1154, rdx_1171)
	edx_1167 = PHI(edx_1155, edx_1172)
	dl_1168 = PHI(dl_1158, dl_1175)
	rdx_rax_1169 = PHI(rdx_rax_1156, rdx_rax_1173)
	edx_eax_1170 = PHI(edx_eax_1157, edx_eax_1174)
// DataOut: fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> cl:Test(PE,P) r10:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C472:
	rLoc2_1126 = PHI(rLoc2_1150, rLoc2_1108)
	P_1127 = PHI(P_1161, P_97)
	CZP_1128 = PHI(CZP_1159, CZP_1104)
	ecx_1129 = PHI(ecx_1165, ecx_593)
	rcx_1130 = PHI(rcx_1164, rcx_594)
	cl_1131 = PHI(cl_1163, cl_595)
	rdx_1132 = PHI(rdx_1166, rdx_1118)
	edx_1133 = PHI(edx_1167, edx_1119)
	dl_1134 = PHI(dl_1168, dl_1122)
	Z_1135 = PHI(Z_1160, Z_1124)
	rdx_rax_1136 = PHI(rdx_rax_1169, rdx_rax_1120)
	edx_eax_1137 = PHI(edx_eax_1170, edx_eax_1121)
	rax_1138 = rax_1111 + rdx_1132
	qwLoc80_1139 = rax_1138
	SZO_1140 = cond(rax_1138 & rax_1138)
	S_1141 = SZO_1140 (alias)
	C_1142 = false
	rLoc1_1143 = (real64) qwLoc80_1139
	branch Test(NS,S_1141) l000000000040C1CD
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C487:
	rLoc1_1144 = rLoc1_1143 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> rsi:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C1CD:
	wLoc82_1057 = PHI(wLoc82, wLoc82, wLoc82_1106, wLoc82_1106)
	wLoc84_1058 = PHI(wLoc84, wLoc84, wLoc84_1107, wLoc84_1107)
	rLoc2_1059 = PHI(rLoc2_623, rLoc2_1097, rLoc2_1126, rLoc2_1126)
	qwLoc80_1060 = PHI(qwLoc80_614, qwLoc80_614, qwLoc80_1139, qwLoc80_1139)
	rLoc1_1061 = PHI(rLoc1_624, rLoc1_624, rLoc1_1143, rLoc1_1144)
	P_1062 = PHI(P_97, P_97, P_1127, P_1127)
	CZP_1063 = PHI(CZP_122, CZP_1098, CZP_1128, CZP_1128)
	esi_1064 = PHI(esi_590, esi_590, esi_1117, esi_1117)
	S_1065 = PHI(S_616, S_616, S_1141, S_1141)
	CZ_1066 = PHI(CZ_141, CZ_1099, CZ_1099, CZ_1099)
	ecx_1067 = PHI(ecx_593, ecx_593, ecx_1129, ecx_1129)
	cl_1068 = PHI(cl_595, cl_595, cl_1131, cl_1131)
	edx_1069 = PHI(edx_64, edx_64, edx_1133, edx_1133)
	dl_1070 = PHI(dl_98, dl_98, dl_1134, dl_1134)
	Z_1071 = PHI(Z_1056, Z_1056, Z_1135, Z_1135)
	rdx_rax_1072 = PHI(rdx_rax_600, rdx_rax_600, rdx_rax_1136, rdx_rax_1136)
	edx_eax_1073 = PHI(edx_eax_601, edx_eax_601, edx_eax_1137, edx_eax_1137)
	ah_1074 = PHI(ah_602, ah_602, ah_1113, ah_1113)
	ax_1075 = PHI(ax_603, ax_603, ax_1114, ax_1114)
	al_1076 = PHI(al_604, al_604, al_1115, al_1115)
	rLocE8_1077 = (real80) rLoc1_1061
	rbx_1078 = qwLocB8_38
	rcx_1079 = 0x0000000000415F18
	rdx_1080 = 0xFFFFFFFFFFFFFFFF
	rsi_1081 = 0x0000000000000001
	rax_1082 = 0x0000000000000000
	r14_1083 = 0x0000000000000000
	r14d_1084 = (word32) r14_1083 (alias)
	SZO_1085 = cond(r14d_1084)
	C_1086 = false
	rdi_1087 = rbx_1078
	eax_1088 = __sprintf_chk(rdi_1087, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_1089 = rbx_1078
	rbx_1090 = 0x00000000FFFFFFFF
	ebx_1091 = (word32) rbx_1090 (alias)
	eax_1092 = strlen(rdi_1089)
	rax_1093 = DPB(rax_1082, eax_1092, 0) (alias)
	r15_1094 = rax_1093
	r15d_1095 = (word32) r15_1094 (alias)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEA3:
	rLoc2_674 = (real64) dwLocC4_59
	rbx_675 = 0x0000000000000000
	ebx_676 = (word32) rbx_675 (alias)
	SZO_677 = cond(ebx_676)
	C_678 = false
	rLoc3_679 = rLoc3_619
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEB4:
	rLoc4_681 = PHI(rLoc4, rLoc4_692)
	rLoc3_682 = PHI(rLoc3_679, rLoc3_1051)
	rLoc1_683 = PHI(rLoc1_624, rLoc1_1052)
	ebx_684 = PHI(ebx_676, ebx_688)
	Z_685 = PHI(Z_621, Z_1046)
	rLoc4_686 = rLoc4_681
	rbx_687 = (uint64) (ebx_684 + 0x00000001)
	ebx_688 = (word32) rbx_687 (alias)
	SCZO_689 = cond(ebx_688)
	rLoc4_690 = rLoc4_686 * rLoc2_674
	v45_691 = rLoc4_690
	rLoc4_692 = rLoc1_683
	rLoc1_693 = v45_691
	CZP_694 = cond(rLoc4_692 - rLoc1_693)
	C_695 = CZP_694 (alias)
	branch rLoc4_692 <u rLoc1_693 l000000000040BED0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BED0:
	rLoc2_1053 = rLoc4_692
	rLoc1_1054 = rLoc3_682
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEC1:
	SCZO_1045 = cond(ebx_688 - 0x00000008)
	Z_1046 = SCZO_1045 (alias)
	branch Test(NE,Z_1046) l000000000040BEB0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEB0:
	rLoc3_1049 = rLoc4_692
	v55_1050 = rLoc3_1049
	rLoc3_1051 = rLoc1_693
	rLoc1_1052 = v55_1050
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEC6:
	rLoc2_1047 = rLoc4_692
	rLoc1_1048 = rLoc3_682
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BED4:
	rLoc2_696 = PHI(rLoc2_1047, rLoc2_1053)
	rLoc1_697 = PHI(rLoc1_1048, rLoc1_1054)
	rLoc1_698 = rLoc2_696 / rLoc1_697
	SCZO_699 = cond(dwLocB0_35 - 0x00000001)
	Z_700 = SCZO_699 (alias)
	rLoc2_701 = rLoc2_696
	branch dwLocB0_35 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF70:
	v66_1042 = rLoc2_701
	rLoc2_1043 = rLoc1_698
	rLoc1_1044 = v66_1042
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEE3:
	rLoc2_919 = rLoc2_701
	rLoc2_920 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_921 = cond(rLoc2_920 - rLoc1_698)
	CZ_922 = CZP_921 (alias)
	branch Test(ULE,CZ_922) l000000000040C498
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C498:
	rLoc2_1039 = rLoc2_920
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BEF3:
	rLoc2_923 = (real64) Mem0[0x0000000000415F0C:real32]
	v51_924 = rLoc2_923
	rLoc2_925 = rLoc1_698
	rLoc1_926 = v51_924
	CZP_927 = cond(rLoc2_925 - rLoc1_926)
	C_928 = CZP_927 (alias)
	branch Test(UGE,C_928) l000000000040C660
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C660:
	wLoc82_1017 = __fstcw()
	eax_1018 = (word32) wLoc82_1017
	ah_1019 = SLICE(eax_1018, byte, 8) (alias)
	rLoc2_1020 = rLoc2_925 - rLoc1_926
	v60_1021 = rLoc2_1020
	rLoc2_1022 = rLoc1_926
	rLoc1_1023 = v60_1021
	rdx_1024 = 0x0000000000000000
	ah_1025 = ah_1019 | 0x0C
	ax_1026 = DPB(ax_603, ah_1025, 8) (alias)
	wLoc84_1027 = ax_1026
	__fldcw(wLoc84_1027)
	qwLoc80_1028 = (int64) rLoc2_1022
	__fldcw(wLoc82_1017)
	rax_1029 = qwLoc80_1028
	rax_1030 = rax_1029 ^ 0x0000000000000000
	eax_1031 = (word32) rax_1030 (alias)
	rdx_rax_1032 = SEQ(rdx_1024, rax_1030) (alias)
	edx_eax_1033 = rax_1030 (alias)
	ah_1034 = SLICE(rax_1030, byte, 8) (alias)
	ax_1035 = (word16) rax_1030 (alias)
	al_1036 = (byte) rax_1030 (alias)
	SZO_1037 = cond(rax_1030)
	C_1038 = false
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF03:
	rLoc1_999 = rLoc2_925
	wLoc82_1000 = __fstcw()
	eax_1001 = (word32) wLoc82_1000
	ah_1002 = SLICE(eax_1001, byte, 8) (alias)
	ah_1003 = ah_1002 | 0x0C
	ax_1004 = DPB(ax_603, ah_1003, 8) (alias)
	SZO_1005 = cond(ah_1003)
	C_1006 = false
	wLoc84_1007 = ax_1004
	rLoc2_1008 = rLoc2_925
	__fldcw(wLoc84_1007)
	qwLoc80_1009 = (int64) rLoc2_1008
	__fldcw(wLoc82_1000)
	rax_1010 = qwLoc80_1009
	eax_1011 = (word32) rax_1010 (alias)
	rdx_rax_1012 = SEQ(rdx_596, rax_1010) (alias)
	edx_eax_1013 = rax_1010 (alias)
	ah_1014 = SLICE(rax_1010, byte, 8) (alias)
	ax_1015 = (word16) rax_1010 (alias)
	al_1016 = (byte) rax_1010 (alias)
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -128(fp):r8 + 648 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF29:
	wLoc82_929 = PHI(wLoc82_1000, wLoc82_1017)
	wLoc84_930 = PHI(wLoc84_1007, wLoc84_1027)
	rLoc2_931 = PHI(rLoc2_1008, rLoc2_1022)
	qwLoc80_932 = PHI(qwLoc80_1009, qwLoc80_1028)
	rLoc1_933 = PHI(rLoc1_999, rLoc1_1023)
	rax_934 = PHI(rax_1010, rax_1030)
	eax_935 = PHI(eax_1011, eax_1031)
	ah_936 = PHI(ah_1014, ah_1034)
	ax_937 = PHI(ax_1015, ax_1035)
	al_938 = PHI(al_1016, al_1036)
	rcx_939 = (uint64) dwLocB0_35
	ecx_940 = (word32) rcx_939 (alias)
	rdx_941 = 0x0000000000000000
	edx_942 = (word32) rdx_941 (alias)
	rdx_rax_943 = SEQ(rdx_941, rax_934) (alias)
	edx_eax_944 = rdx_941 (alias)
	dl_945 = (byte) rdx_941 (alias)
	SZO_946 = cond(ecx_940 & ecx_940)
	Z_947 = SZO_946 (alias)
	C_948 = false
	branch Test(NE,Z_947) l000000000040BF55
// DataOut: al eax ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF33:
	qwLoc80_973 = rax_934
	SZO_974 = cond(rax_934 & rax_934)
	S_975 = SZO_974 (alias)
	C_976 = false
	rLoc2_977 = (real64) qwLoc80_973
	branch Test(SG,S_975) l000000000040C77D
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C77D:
	rLoc2_998 = rLoc2_977 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF45:
	rLoc2_978 = PHI(rLoc2_977, rLoc2_998)
	rcx_979 = 0x0000000000000000
	ecx_980 = (word32) rcx_979 (alias)
	SZO_981 = cond(ecx_980)
	rdx_982 = 0x0000000000000001
	edx_983 = (word32) rdx_982 (alias)
	rdx_rax_984 = SEQ(rdx_982, rax_934) (alias)
	edx_eax_985 = rdx_982 (alias)
	dl_986 = (byte) rdx_982 (alias)
	CZP_987 = cond(rLoc2_978 - rLoc1_933)
	Z_988 = CZP_987 (alias)
	P_989 = CZP_987 (alias)
	cl_990 = Test(PE,P_989)
	rcx_991 = DPB(rcx_979, cl_990, 0) (alias)
	ecx_992 = DPB(ecx_980, cl_990, 0) (alias)
	branch Test(NE,Z_988) l000000000040BF55
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF51_1:
	rdx_993 = rcx_991
	edx_994 = (word32) rdx_993 (alias)
	rdx_rax_995 = SEQ(rdx_993, rax_934) (alias)
	edx_eax_996 = rdx_993 (alias)
	dl_997 = (byte) rdx_993 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 ah:<invalid> cl:Test(PE,P) r10:<invalid> rsi:<invalid> -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF55:
	P_949 = PHI(P_989, P_989, P_97)
	CZP_950 = PHI(CZP_987, CZP_987, CZP_927)
	ecx_951 = PHI(ecx_992, ecx_992, ecx_940)
	rcx_952 = PHI(rcx_991, rcx_991, rcx_939)
	cl_953 = PHI(cl_990, cl_990, cl_595)
	rdx_954 = PHI(rdx_982, rdx_993, rdx_941)
	edx_955 = PHI(edx_983, edx_994, edx_942)
	dl_956 = PHI(dl_986, dl_997, dl_945)
	Z_957 = PHI(Z_988, Z_988, Z_947)
	rdx_rax_958 = PHI(rdx_rax_984, rdx_rax_995, rdx_rax_943)
	edx_eax_959 = PHI(edx_eax_985, edx_eax_996, edx_eax_944)
	rax_960 = rax_934 + rdx_954
	qwLoc80_961 = rax_960
	SZO_962 = cond(rax_960 & rax_960)
	S_963 = SZO_962 (alias)
	C_964 = false
	rLoc2_965 = (real64) qwLoc80_961
	branch Test(SG,S_963) l000000000040C758
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C758:
	rLoc2_969 = rLoc2_965 + Mem0[0x0000000000415F08:real32]
	v62_970 = rLoc2_969
	rLoc2_971 = rLoc1_933
	rLoc1_972 = v62_970
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF6A:
	v59_966 = rLoc2_965
	rLoc2_967 = rLoc1_933
	rLoc1_968 = v59_966
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 ah:<invalid> r10:<invalid> rsi:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BF72:
	wLoc82_702 = PHI(wLoc82_929, wLoc82_929, wLoc82, wLoc82)
	wLoc84_703 = PHI(wLoc84_930, wLoc84_930, wLoc84, wLoc84)
	rLoc2_704 = PHI(rLoc2_967, rLoc2_971, rLoc2_1039, rLoc2_1043)
	qwLoc80_705 = PHI(qwLoc80_961, qwLoc80_961, qwLoc80_614, qwLoc80_614)
	rLoc1_706 = PHI(rLoc1_968, rLoc1_972, rLoc1_698, rLoc1_1044)
	P_707 = PHI(P_949, P_949, P_97, P_97)
	CZP_708 = PHI(CZP_950, CZP_950, CZP_921, CZP_694)
	S_709 = PHI(S_963, S_963, S_616, S_616)
	ecx_710 = PHI(ecx_951, ecx_951, ecx_593, ecx_593)
	cl_711 = PHI(cl_953, cl_953, cl_595, cl_595)
	dl_712 = PHI(dl_956, dl_956, dl_98, dl_98)
	C_713 = PHI(C_964, C_964, C_695, C_695)
	rdx_rax_714 = PHI(rdx_rax_958, rdx_rax_958, rdx_rax_600, rdx_rax_600)
	edx_eax_715 = PHI(edx_eax_959, edx_eax_959, edx_eax_601, edx_eax_601)
	ah_716 = PHI(ah_936, ah_936, ah_602, ah_602)
	ax_717 = PHI(ax_937, ax_937, ax_603, ax_603)
	r14_718 = qwLocB8_38
	rdx_719 = 0xFFFFFFFFFFFFFFFF
	rcx_720 = 0x0000000000415F1E
	rsi_721 = 0x0000000000000001
	rax_722 = 0x0000000000000000
	qwLoc98_723 = r11_136
	rdi_724 = r14_718
	rLocA8_725 = (real80) rLoc2_704
	rLocE8_726 = (real80) rLoc1_706
	eax_727 = __sprintf_chk(rdi_724, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F1E)
	rdi_728 = r14_718
	eax_729 = strlen(rdi_728)
	rax_730 = DPB(rax_722, eax_729, 0) (alias)
	r11_731 = qwLoc98_723
	rdx_732 = (uint64) dwLoc90_51
	edx_733 = (word32) rdx_732 (alias)
	r15_734 = rax_730
	r15d_735 = (word32) r15_734 (alias)
	rax_736 = 0x0000000000000000
	rLoc1_737 = (real64) rLocA8_725
	SZO_738 = cond(edx_733 & edx_733)
	Z_739 = SZO_738 (alias)
	r14_740 = r11_731 + 0x0000000000000001
	r14d_741 = (word32) r14_740 (alias)
	al_742 = (edx_733 & edx_733) == 0x00000000
	rax_743 = DPB(rax_736, al_742, 0) (alias)
	rax_744 = r14_740 + 0x0000000000000001 + rax_743
	SCZO_745 = cond(r15_734 - rax_744)
	CZ_746 = SCZO_745 (alias)
	branch r15_734 >u rax_744 l000000000040BFF0
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> ah:<invalid> cl:Test(PE,P) -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFCB:
	SZO_911 = cond(bLocC8 & 0x08)
	Z_912 = SZO_911 (alias)
	C_913 = false
	branch Test(EQ,Z_912) l000000000040C208
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C208:
	rLoc1_918 = rLoc1_737
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFD6:
	rax_914 = qwLocB8_38
	SCZO_915 = cond(Mem0[rax_914 - 0x0000000000000001 + r15_734:byte] - 0x30)
	Z_916 = SCZO_915 (alias)
	branch Test(NE,Z_916) l000000000040C210
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C210:
	rLoc1_917 = rLoc1_737
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFE7:
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:rsi r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(0) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040BFF0:
	SZO_747 = PHI(SZO_738, SZO_911)
	C_748 = PHI(C_713, C_913)
	rax_749 = PHI(rax_744, rax_914)
	SCZO_750 = cond(dwLocB0_35 - 0x00000001)
	Z_751 = SCZO_750 (alias)
	rLoc1_752 = rLoc1_737 * Mem0[0x0000000000415F84:real32]
	branch dwLocB0_35 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C001:
	rLoc2_790 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_791 = cond(rLoc2_790 - rLoc1_752)
	CZ_792 = CZP_791 (alias)
	branch rLoc2_790 <=u rLoc1_752 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C00F:
	rLoc2_793 = (real64) Mem0[0x0000000000415F0C:real32]
	v63_794 = rLoc2_793
	rLoc2_795 = rLoc1_752
	rLoc1_796 = v63_794
	CZP_797 = cond(rLoc2_795 - rLoc1_796)
	C_798 = CZP_797 (alias)
	branch rLoc2_795 >=u rLoc1_796 l000000000040C720
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C720:
	wLoc82_889 = __fstcw()
	eax_890 = (word32) wLoc82_889
	ah_891 = SLICE(eax_890, byte, 8) (alias)
	rLoc2_892 = rLoc2_795 - rLoc1_796
	v64_893 = rLoc2_892
	rLoc2_894 = rLoc1_796
	rLoc1_895 = v64_893
	rdx_896 = 0x0000000000000000
	ah_897 = ah_891 | 0x0C
	ax_898 = DPB(ax_717, ah_897, 8) (alias)
	wLoc84_899 = ax_898
	__fldcw(wLoc84_899)
	qwLoc80_900 = (int64) rLoc2_894
	__fldcw(wLoc82_889)
	rax_901 = qwLoc80_900
	rax_902 = rax_901 ^ 0x0000000000000000
	eax_903 = (word32) rax_902 (alias)
	rdx_rax_904 = SEQ(rdx_896, rax_902) (alias)
	edx_eax_905 = rax_902 (alias)
	ah_906 = SLICE(rax_902, byte, 8) (alias)
	ax_907 = (word16) rax_902 (alias)
	al_908 = (byte) rax_902 (alias)
	SZO_909 = cond(rax_902)
	C_910 = false
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C01F:
	rLoc1_871 = rLoc2_795
	wLoc82_872 = __fstcw()
	eax_873 = (word32) wLoc82_872
	ah_874 = SLICE(eax_873, byte, 8) (alias)
	ah_875 = ah_874 | 0x0C
	ax_876 = DPB(ax_717, ah_875, 8) (alias)
	SZO_877 = cond(ah_875)
	C_878 = false
	wLoc84_879 = ax_876
	rLoc2_880 = rLoc2_795
	__fldcw(wLoc84_879)
	qwLoc80_881 = (int64) rLoc2_880
	__fldcw(wLoc82_872)
	rax_882 = qwLoc80_881
	eax_883 = (word32) rax_882 (alias)
	rdx_rax_884 = SEQ(rdx_732, rax_882) (alias)
	edx_eax_885 = rax_882 (alias)
	ah_886 = SLICE(rax_882, byte, 8) (alias)
	ax_887 = (word16) rax_882 (alias)
	al_888 = (byte) rax_882 (alias)
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B0(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C045:
	wLoc82_799 = PHI(wLoc82_872, wLoc82_889)
	wLoc84_800 = PHI(wLoc84_879, wLoc84_899)
	rLoc2_801 = PHI(rLoc2_880, rLoc2_894)
	qwLoc80_802 = PHI(qwLoc80_881, qwLoc80_900)
	rLoc1_803 = PHI(rLoc1_871, rLoc1_895)
	rax_804 = PHI(rax_882, rax_902)
	eax_805 = PHI(eax_883, eax_903)
	ah_806 = PHI(ah_886, ah_906)
	ax_807 = PHI(ax_887, ax_907)
	al_808 = PHI(al_888, al_908)
	r14_809 = (uint64) dwLocB0_35
	r14d_810 = (word32) r14_809 (alias)
	rdx_811 = 0x0000000000000000
	edx_812 = (word32) rdx_811 (alias)
	rdx_rax_813 = SEQ(rdx_811, rax_804) (alias)
	edx_eax_814 = rdx_811 (alias)
	dl_815 = (byte) rdx_811 (alias)
	SZO_816 = cond(r14d_810 & r14d_810)
	Z_817 = SZO_816 (alias)
	C_818 = false
	branch (r14d_810 & r14d_810) != 0x00000000 l000000000040C080
// DataOut: ax eax ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C080:
	rLoc1_870 = rLoc1_803
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C051:
	qwLoc80_838 = rax_804
	SZO_839 = cond(rax_804 & rax_804)
	S_840 = SZO_839 (alias)
	C_841 = false
	rLoc2_842 = (real64) qwLoc80_838
	branch (rax_804 & rax_804) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):(int64) rLoc2 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C79E:
	rLoc2_869 = rLoc2_842 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C063:
	rLoc2_843 = PHI(rLoc2_842, rLoc2_869)
	rcx_844 = 0x0000000000000000
	ecx_845 = (word32) rcx_844 (alias)
	SZO_846 = cond(ecx_845)
	rdx_847 = 0x0000000000000001
	edx_848 = (word32) rdx_847 (alias)
	rdx_rax_849 = SEQ(rdx_847, rax_804) (alias)
	edx_eax_850 = rdx_847 (alias)
	dl_851 = (byte) rdx_847 (alias)
	CZP_852 = cond(rLoc2_843 - rLoc1_803)
	Z_853 = CZP_852 (alias)
	P_854 = CZP_852 (alias)
	rLoc1_855 = rLoc1_803
	cl_856 = Test(PE,P_854)
	rcx_857 = DPB(rcx_844, cl_856, 0) (alias)
	ecx_858 = DPB(ecx_845, cl_856, 0) (alias)
	branch rLoc2_843 != rLoc1_803 l000000000040C075
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C071_1:
	rdx_864 = rcx_857
	edx_865 = (word32) rdx_864 (alias)
	rdx_rax_866 = SEQ(rdx_864, rax_804) (alias)
	edx_eax_867 = rdx_864 (alias)
	dl_868 = (byte) rdx_864 (alias)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C075:
	rdx_859 = PHI(rdx_847, rdx_864)
	edx_860 = PHI(edx_848, edx_865)
	dl_861 = PHI(dl_851, dl_868)
	rdx_rax_862 = PHI(rdx_rax_849, rdx_rax_866)
	edx_eax_863 = PHI(edx_eax_850, edx_eax_867)
// DataOut: ebx fs r10 r11 r13 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> cl:Test(PE,P) r10:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C082:
	rLoc2_819 = PHI(rLoc2_843, rLoc2_801)
	P_820 = PHI(P_854, P_707)
	CZP_821 = PHI(CZP_852, CZP_797)
	ecx_822 = PHI(ecx_858, ecx_710)
	rcx_823 = PHI(rcx_857, rcx_720)
	cl_824 = PHI(cl_856, cl_711)
	rdx_825 = PHI(rdx_859, rdx_811)
	edx_826 = PHI(edx_860, edx_812)
	dl_827 = PHI(dl_861, dl_815)
	Z_828 = PHI(Z_853, Z_817)
	rdx_rax_829 = PHI(rdx_rax_862, rdx_rax_813)
	edx_eax_830 = PHI(edx_eax_863, edx_eax_814)
	rax_831 = rax_804 + rdx_825
	qwLoc80_832 = rax_831
	SZO_833 = cond(rax_831 & rax_831)
	S_834 = SZO_833 (alias)
	C_835 = false
	rLoc1_836 = (real64) qwLoc80_832
	branch (rax_831 & rax_831) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C093:
	rLoc1_837 = rLoc1_836 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r10 r11 r13 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C0A0:
	wLoc82_753 = PHI(wLoc82_702, wLoc82_702, wLoc82_799, wLoc82_799)
	wLoc84_754 = PHI(wLoc84_703, wLoc84_703, wLoc84_800, wLoc84_800)
	rLoc2_755 = PHI(rLoc2_704, rLoc2_790, rLoc2_819, rLoc2_819)
	qwLoc80_756 = PHI(qwLoc80_705, qwLoc80_705, qwLoc80_832, qwLoc80_832)
	rLoc1_757 = PHI(rLoc1_752, rLoc1_752, rLoc1_836, rLoc1_837)
	P_758 = PHI(P_707, P_707, P_820, P_820)
	CZP_759 = PHI(CZP_708, CZP_791, CZP_821, CZP_821)
	S_760 = PHI(S_709, S_709, S_834, S_834)
	CZ_761 = PHI(CZ_746, CZ_792, CZ_792, CZ_792)
	ecx_762 = PHI(ecx_710, ecx_710, ecx_822, ecx_822)
	cl_763 = PHI(cl_711, cl_711, cl_824, cl_824)
	edx_764 = PHI(edx_733, edx_733, edx_826, edx_826)
	dl_765 = PHI(dl_712, dl_712, dl_827, dl_827)
	Z_766 = PHI(Z_751, Z_751, Z_828, Z_828)
	rdx_rax_767 = PHI(rdx_rax_714, rdx_rax_714, rdx_rax_829, rdx_rax_829)
	edx_eax_768 = PHI(edx_eax_715, edx_eax_715, edx_eax_830, edx_eax_830)
	ah_769 = PHI(ah_716, ah_716, ah_806, ah_806)
	ax_770 = PHI(ax_717, ax_717, ax_807, ax_807)
	al_771 = PHI(al_742, al_742, al_808, al_808)
	rLoc1_772 = rLoc1_757 / Mem0[0x0000000000415F84:real32]
	r14_773 = qwLocB8_38
	rcx_774 = 0x0000000000415F18
	rdx_775 = 0xFFFFFFFFFFFFFFFF
	rsi_776 = 0x0000000000000001
	rax_777 = 0x0000000000000000
	rdi_778 = r14_773
	rLocE8_779 = (real80) rLoc1_772
	eax_780 = __sprintf_chk(rdi_778, 0x0000000000000001, 0xFFFFFFFFFFFFFFFF, 0x0000000000415F18)
	rdi_781 = r14_773
	r14_782 = 0x0000000000000000
	r14d_783 = (word32) r14_782 (alias)
	SZO_784 = cond(r14d_783)
	C_785 = false
	eax_786 = strlen(rdi_781)
	rax_787 = DPB(rax_777, eax_786, 0) (alias)
	r15_788 = rax_787
	r15d_789 = (word32) r15_788 (alias)
// DataOut: ebx fs r10 r11 r13 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C218:
	rLoc4_625 = PHI(rLoc4_692, rLoc4_692, rLoc4_692, rLoc4)
	rLoc3_626 = PHI(rLoc3_682, rLoc3_682, rLoc3_682, rLoc3_619)
	qwLoc98_627 = PHI(qwLoc98_723, qwLoc98_723, qwLoc98_723, qwLoc98_130)
	rLocA8_628 = PHI(rLocA8_725, rLocA8_725, rLocA8_725, rLocA8)
	wLoc82_629 = PHI(wLoc82_702, wLoc82_702, wLoc82_753, wLoc82_1057)
	wLoc84_630 = PHI(wLoc84_703, wLoc84_703, wLoc84_754, wLoc84_1058)
	rLoc2_631 = PHI(rLoc2_704, rLoc2_704, rLoc2_755, rLoc2_1059)
	qwLoc80_632 = PHI(qwLoc80_705, qwLoc80_705, qwLoc80_756, qwLoc80_1060)
	rLoc1_633 = PHI(rLoc1_917, rLoc1_918, rLoc1_772, rLoc1_1061)
	rLocE8_634 = PHI(rLocE8_726, rLocE8_726, rLocE8_779, rLocE8_1077)
	P_635 = PHI(P_707, P_707, P_758, P_1062)
	CZP_636 = PHI(CZP_708, CZP_708, CZP_759, CZP_1063)
	esi_637 = PHI(esi_590, esi_590, esi_590, esi_1064)
	S_638 = PHI(S_709, S_709, S_760, S_1065)
	r11_639 = PHI(r11_731, r11_731, r11_731, r11_136)
	r14d_640 = PHI(r14d_741, r14d_741, r14d_783, r14d_1084)
	CZ_641 = PHI(CZ_746, CZ_746, CZ_761, CZ_1066)
	ebx_642 = PHI(ebx_688, ebx_688, ebx_688, ebx_1091)
	ecx_643 = PHI(ecx_710, ecx_710, ecx_762, ecx_1067)
	rcx_644 = PHI(rcx_720, rcx_720, rcx_774, rcx_1079)
	cl_645 = PHI(cl_711, cl_711, cl_763, cl_1068)
	edx_646 = PHI(edx_733, edx_733, edx_764, edx_1069)
	dl_647 = PHI(dl_712, dl_712, dl_765, dl_1070)
	SZO_648 = PHI(SZO_911, SZO_911, SZO_784, SZO_1085)
	Z_649 = PHI(Z_916, Z_912, Z_766, Z_1071)
	C_650 = PHI(C_913, C_913, C_785, C_1086)
	eax_651 = PHI(eax_729, eax_729, eax_786, eax_1092)
	rdx_rax_652 = PHI(rdx_rax_714, rdx_rax_714, rdx_rax_767, rdx_rax_1072)
	edx_eax_653 = PHI(edx_eax_715, edx_eax_715, edx_eax_768, edx_eax_1073)
	ah_654 = PHI(ah_716, ah_716, ah_769, ah_1074)
	ax_655 = PHI(ax_717, ax_717, ax_770, ax_1075)
	al_656 = PHI(al_742, al_742, al_771, al_1076)
	rbx_657 = PHI(rbx_687, rbx_687, rbx_687, rbx_1090)
	r14_658 = PHI(r14_740, r14_740, r14_782, r14_1083)
	r15_659 = PHI(r15_734, r15_734, r15_788, r15_1094)
	r15d_660 = PHI(r15d_735, r15d_735, r15d_789, r15d_1095)
	r12_661 = qwLocD0_142
	rsi_662 = qwLocB8_38
	rdx_663 = r15_659
	r12_664 = r12_661 - r15_659
	r12d_665 = (word32) r12_664 (alias)
	r15_666 = r15_659 - r14_658
	SCZO_667 = cond(r15_666)
	rdi_668 = r12_664
	rax_669 = memmove(rdi_668, rsi_662, rdx_663)
	r8_670 = r12_664 + r15_666
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):eax -168(fp):(real80) rLoc2 -152(fp):<invalid> -144(fp):eax -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C237:
	dwLoc8C_143 = PHI(dwLoc8C, dwLoc8C_1273)
	qwLocA8_144 = PHI(qwLocA8, qwLocA8_1274)
	rLoc4_145 = PHI(rLoc4_625, rLoc4)
	rLoc3_146 = PHI(rLoc3_626, rLoc3)
	qwLoc98_147 = PHI(qwLoc98_627, qwLoc98_1275)
	rLocA8_148 = PHI(rLocA8_628, rLocA8)
	wLoc82_149 = PHI(wLoc82_629, wLoc82)
	wLoc84_150 = PHI(wLoc84_630, wLoc84)
	rLoc2_151 = PHI(rLoc2_631, rLoc2)
	qwLoc80_152 = PHI(qwLoc80_632, qwLoc80)
	rLoc1_153 = PHI(rLoc1_633, rLoc1)
	rLocE8_154 = PHI(rLocE8_634, rLocE8)
	qwLocB0_155 = PHI(qwLocB0, qwLocB0_1328)
	r10b_156 = PHI(r10b_587, r10b_1372)
	r10d_157 = PHI(r10d_588, r10d_1371)
	dil_158 = PHI(dil_125, dil_1278)
	sil_159 = PHI(sil_589, sil_1279)
	P_160 = PHI(P_635, P_97)
	CZP_161 = PHI(CZP_636, CZP_1241)
	esi_162 = PHI(esi_637, esi_1312)
	edi_163 = PHI(edi_124, edi_1313)
	r10_164 = PHI(r10_591, r10_1370)
	S_165 = PHI(S_638, S_1245)
	r11_166 = PHI(r11_639, r11_1283)
	r8_167 = PHI(r8_670, r8_1332)
	r9_168 = PHI(r9_90, r9_1285)
	r9d_169 = PHI(r9d_89, r9d_1286)
	r12d_170 = PHI(r12d_665, r12d_1356)
	r14d_171 = PHI(r14d_640, r14d_1288)
	CZ_172 = PHI(CZ_641, CZ_1289)
	ebx_173 = PHI(ebx_642, ebx_1333)
	rsi_174 = PHI(rsi_662, rsi_1334)
	ecx_175 = PHI(ecx_643, ecx_1315)
	rcx_176 = PHI(rcx_644, rcx_1351)
	cl_177 = PHI(cl_645, cl_1294)
	rdx_178 = PHI(rdx_663, rdx_1359)
	edx_179 = PHI(edx_646, edx_1296)
	dl_180 = PHI(dl_647, dl_1297)
	rdi_181 = PHI(rdi_668, rdi_1336)
	rax_182 = PHI(rax_669, rax_1361)
	eax_183 = PHI(eax_651, eax_1341)
	rdx_rax_184 = PHI(rdx_rax_652, rdx_rax_1357)
	edx_eax_185 = PHI(edx_eax_653, edx_eax_1343)
	ah_186 = PHI(ah_654, ah_1344)
	ax_187 = PHI(ax_655, ax_1345)
	al_188 = PHI(al_656, al_1346)
	SCZO_189 = PHI(SCZO_667, SCZO_1347)
	rbx_190 = PHI(rbx_657, rbx_1348)
	r12_191 = PHI(r12_664, r12_1355)
	r14_192 = PHI(r14_658, r14_68)
	r15_193 = PHI(r15_666, r15_128)
	r15d_194 = PHI(r15d_660, r15d_129)
	SZO_196 = cond(bLocC8 & 0x04)
	Z_197 = SZO_196 (alias)
	C_198 = false
	branch (bLocC8 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r10 r11 r12 r13 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C318:
	r8_450 = r8_167 - r12_191
	SCZO_451 = cond(r8_450)
	rdi_452 = r13_137
	r15_453 = 0xFFFFFFFFFFFFFFFF
	r15d_454 = (word32) r15_453 (alias)
	r14_455 = r8_450
	r14d_456 = (word32) r14_455 (alias)
	eax_457 = strlen(rdi_452)
	rax_458 = DPB(rax_182, eax_457, 0) (alias)
	rdi_459 = fp - 0x0000000000000078
	rsi_460 = r12_191
	rcx_461 = 0x0000000000000029
	rdx_462 = r14_455
	qwLocB0_463 = rax_458
	call __memcpy_chk (retsize: 8; depth: 240)
		uses: ah_186,al_188,ax_187,bLocC8,C_198,cl_177,CZ_172,CZP_161,dil_158,dl_180,dwLoc8C_143,dwLoc90_51,dwLocB0_35,dwLocC4_59,dwLocC8_41,eax_457,ebx_173,ecx_175,edi_163,edx_179,esi_162,fs_78,P_160,qwLoc08_4,qwLoc10_12,qwLoc18_18,qwLoc20_21,qwLoc28_27,qwLoc30_30,qwLoc40_47,qwLoc80_152,qwLoc98_147,qwLocA8_144,qwLocB0_463,qwLocB8_38,qwLocC0_43,qwLocD0_142,r10_164,r10b_156,r10d_157,r11_166,r12_191,r12d_170,r13_137,r14_455,r14d_456,r15_453,r15d_454,r8_450,r9_168,r9d_169,rax_458,rbp_111,rbx_190,rcx_461,rdi_459,rdx_462,rLocA8_148,rLocE8_154,rsi_460,rsp_61,S_165,SCZO_451,sil_159,SZO_196,wLoc82_149,wLoc84_150,Z_197
		defs: ah_498,al_504,ax_499,C_470,cl_491,CZ_485,CZP_496,dil_503,dl_501,eax_466,ebx_488,ecx_482,edi_490,edx_467,esi_494,fs_481,P_500,r10_489,r10b_507,r10d_506,r11_483,r12_474,r12d_495,r13_473,r14_471,r14d_497,r15_465,r15d_505,r8_480,r9_493,r9d_492,rax_468,rbp_476,rbx_477,rcx_478,rdi_475,rdx_484,rsi_472,rsp_464,S_487,SCZO_479,sil_502,SZO_469,Z_486
	r9_508 = r12_474 + r14_471
	r9d_509 = (word32) r9_508 (alias)
	r12_510 = r13_473
	r12d_511 = (word32) r12_510 (alias)
	r13_512 = qwLocB0_463
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:0xCCCCCCCD dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C36C:
	r9_513 = PHI(r9_508, r9_573)
	r9d_514 = PHI(r9d_509, r9d_574)
	r14d_515 = PHI(r14d_497, r14d_548)
	CZ_516 = PHI(CZ_485, CZ_543)
	rsi_517 = PHI(rsi_472, rsi_570)
	rdx_518 = PHI(rdx_484, rdx_569)
	rdi_519 = PHI(rdi_475, rdi_571)
	rax_520 = PHI(rax_468, rax_572)
	eax_521 = PHI(eax_466, eax_554)
	rdx_rax_522 = PHI(rdx_rax_184, rdx_rax_555)
	ah_523 = PHI(ah_498, ah_557)
	ax_524 = PHI(ax_499, ax_558)
	al_525 = PHI(al_504, al_559)
	SCZO_526 = PHI(SCZO_479, SCZO_568)
	rbp_527 = PHI(rbp_476, rbp_539)
	r14_528 = PHI(r14_471, r14_547)
	r15_529 = PHI(r15_465, r15_545)
	r15d_530 = PHI(r15d_505, r15d_546)
	edx_531 = (word32) Mem0[rbp_527 + 0x0000000000000000:byte]
	rdx_532 = DPB(rdx_518, edx_531, 0) (alias)
	rdx_rax_533 = DPB(rdx_rax_522, edx_531, 64) (alias)
	edx_eax_534 = SEQ(edx_531, eax_521) (alias)
	dl_535 = (byte) edx_531 (alias)
	SZO_536 = cond(dl_535 & dl_535)
	Z_537 = SZO_536 (alias)
	C_538 = false
	branch (dl_535 & dl_535) == 0x00 l000000000040C383
// DataOut: dl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C374:
	SCZO_577 = cond(dl_535 - 0x7E)
	CZ_578 = SCZO_577 (alias)
	r15d_579 = (word32) dl_535
	r15_580 = DPB(r15_529, r15d_579, 0) (alias)
	branch dl_535 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37B_1:
	r15_585 = r14_528
	r15d_586 = (word32) r15_585 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C37F:
	r15_581 = PHI(r15_580, r15_585)
	r15d_582 = PHI(r15d_579, r15d_586)
	rbp_583 = rbp_527 + 0x0000000000000001
	SCZO_584 = cond(rbp_583)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C383:
	rbp_539 = PHI(rbp_527, rbp_583)
	r15_540 = PHI(r15_529, r15_581)
	r15d_541 = PHI(r15d_530, r15d_582)
	SCZO_542 = cond(r15_540 - r14_528)
	CZ_543 = SCZO_542 (alias)
	rax_544 = fp - 0x0000000000000078
	branch r15_540 <=u r14_528 l000000000040C38F
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38B_1:
	r15_575 = r14_528
	r15d_576 = (word32) r15_575 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C38F:
	r15_545 = PHI(r15_540, r15_575)
	r15d_546 = PHI(r15d_541, r15d_576)
	r14_547 = r14_528 - r15_545
	r14d_548 = (word32) r14_547 (alias)
	r9_549 = r9_513 - r15_545
	rdx_550 = r15_545
	rsi_551 = fp - 0x0000000000000078 + r14_547
	rdi_552 = r9_549
	rax_553 = memcpy(rdi_552, rsi_551, rdx_550)
	eax_554 = (word32) rax_553 (alias)
	rdx_rax_555 = SEQ(rdx_550, rax_553) (alias)
	edx_eax_556 = rax_553 (alias)
	ah_557 = SLICE(rax_553, byte, 8) (alias)
	ax_558 = (word16) rax_553 (alias)
	al_559 = (byte) rax_553 (alias)
	SZO_560 = cond(r14_547 & r14_547)
	Z_561 = SZO_560 (alias)
	C_562 = false
	r9_563 = rax_553
	r9d_564 = (word32) r9_563 (alias)
	branch (r14_547 & r14_547) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:fp - 0x0000000000000078 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C358:
	r9_567 = r9_563 - r13_512
	SCZO_568 = cond(r9_567)
	rdx_569 = r13_512
	rsi_570 = r12_510
	rdi_571 = r9_567
	rax_572 = memcpy(rdi_571, rsi_570, rdx_569)
	r9_573 = rax_572
	r9d_574 = (word32) r9_573 (alias)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C3AC:
	r12_565 = rax_553
	r12d_566 = (word32) r12_565 (alias)
// DataOut: ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(0) Local -00D0(64)

l000000000040C242:
	qwLocB0_199 = PHI(qwLocB0_463, qwLocB0_155)
	r10b_200 = PHI(r10b_507, r10b_156)
	r10d_201 = PHI(r10d_506, r10d_157)
	dil_202 = PHI(dil_503, dil_158)
	sil_203 = PHI(sil_502, sil_159)
	P_204 = PHI(P_500, P_160)
	CZP_205 = PHI(CZP_496, CZP_161)
	esi_206 = PHI(esi_494, esi_162)
	edi_207 = PHI(edi_490, edi_163)
	r10_208 = PHI(r10_489, r10_164)
	S_209 = PHI(S_487, S_165)
	r11_210 = PHI(r11_483, r11_166)
	fs_211 = PHI(fs_481, fs_78)
	r8_212 = PHI(r8_480, r8_167)
	r9_213 = PHI(r9_563, r9_168)
	r9d_214 = PHI(r9d_564, r9d_169)
	r12d_215 = PHI(r12d_566, r12d_170)
	r14d_216 = PHI(r14d_548, r14d_171)
	CZ_217 = PHI(CZ_543, CZ_172)
	ebx_218 = PHI(ebx_488, ebx_173)
	rsi_219 = PHI(rsi_551, rsi_174)
	ecx_220 = PHI(ecx_482, ecx_175)
	rcx_221 = PHI(rcx_478, rcx_176)
	cl_222 = PHI(cl_491, cl_177)
	rdx_223 = PHI(rdx_550, rdx_178)
	edx_224 = PHI(edx_531, edx_179)
	dl_225 = PHI(dl_535, dl_180)
	rdi_226 = PHI(rdi_552, rdi_181)
	rax_227 = PHI(rax_553, rax_182)
	eax_228 = PHI(eax_554, eax_183)
	rdx_rax_229 = PHI(rdx_rax_555, rdx_rax_184)
	edx_eax_230 = PHI(edx_eax_556, edx_eax_185)
	ah_231 = PHI(ah_557, ah_186)
	ax_232 = PHI(ax_558, ax_187)
	al_233 = PHI(al_559, al_188)
	SCZO_234 = PHI(SCZO_542, SCZO_189)
	rbx_235 = PHI(rbx_477, rbx_190)
	rbp_236 = PHI(rbp_539, rbp_111)
	r12_237 = PHI(r12_565, r12_191)
	r13_238 = PHI(r13_512, r13_137)
	r14_239 = PHI(r14_547, r14_192)
	r15_240 = PHI(r15_545, r15_193)
	r15d_241 = PHI(r15d_546, r15d_194)
	rsp_242 = PHI(rsp_464, rsp_61)
	SZO_243 = cond(bLocC8 & 0x80)
	Z_244 = SZO_243 (alias)
	C_245 = false
	branch (bLocC8 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C249:
	SCZO_294 = cond(ebx_218 - 0xFFFFFFFF)
	Z_295 = SCZO_294 (alias)
	branch ebx_218 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C0(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C618:
	rdx_411 = qwLocC0_43
	edx_412 = (word32) rdx_411 (alias)
	rdx_rax_413 = SEQ(rdx_411, rax_227) (alias)
	edx_eax_414 = rdx_411 (alias)
	dl_415 = (byte) rdx_411 (alias)
	SCZO_416 = cond(rdx_411 - 0x0000000000000001)
	CZ_417 = SCZO_416 (alias)
	branch rdx_411 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C4(64) Local -00C8(32) Local -00D0(64)

l000000000040C7A9:
	rbx_446 = 0x0000000000000000
	ebx_447 = (word32) rbx_446 (alias)
	SZO_448 = cond(ebx_447)
	C_449 = false
// DataOut: ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C627:
	r14_418 = (uint64) dwLocC4_59
	r14d_419 = (word32) r14_418 (alias)
	rbx_420 = 0x0000000000000001
	ebx_421 = (word32) rbx_420 (alias)
	rax_422 = 0x0000000000000001
	eax_423 = (word32) rax_422 (alias)
	rdx_rax_424 = SEQ(rdx_411, rax_422) (alias)
	edx_eax_425 = rax_422 (alias)
	ah_426 = SLICE(rax_422, byte, 8) (alias)
	ax_427 = (word16) rax_422 (alias)
	al_428 = (byte) rax_422 (alias)
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C640:
	ebx_429 = PHI(ebx_421, ebx_443)
	Z_430 = PHI(Z_295, Z_445)
	rax_431 = PHI(rax_422, rax_433)
	rbx_432 = PHI(rbx_420, rbx_442)
	rax_433 = rax_431 *s r14_418
	eax_434 = (word32) rax_433 (alias)
	rdx_rax_435 = SEQ(rdx_411, rax_433) (alias)
	edx_eax_436 = rax_433 (alias)
	ah_437 = SLICE(rax_433, byte, 8) (alias)
	ax_438 = (word16) rax_433 (alias)
	al_439 = (byte) rax_433 (alias)
	SCZO_440 = cond(rdx_411 - rax_433)
	CZ_441 = SCZO_440 (alias)
	branch rdx_411 <=u rax_433 l000000000040C252
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C64D:
	rbx_442 = (uint64) (ebx_429 + 0x00000001)
	ebx_443 = (word32) rbx_442 (alias)
	SCZO_444 = cond(ebx_443 - 0x00000008)
	Z_445 = SCZO_444 (alias)
	branch ebx_443 != 0x00000008 l000000000040C640
// DataOut: ebx fs r10 r11 r12 r14 r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C655:
// DataOut: ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(32) Local -00D0(64)

l000000000040C252:
	r14d_296 = PHI(r14d_216, r14d_419, r14d_419, r14d_216)
	CZ_297 = PHI(CZ_217, CZ_441, CZ_441, CZ_417)
	ebx_298 = PHI(ebx_218, ebx_429, ebx_443, ebx_447)
	rdx_299 = PHI(rdx_223, rdx_411, rdx_411, rdx_411)
	edx_300 = PHI(edx_224, edx_412, edx_412, edx_412)
	dl_301 = PHI(dl_225, dl_415, dl_415, dl_415)
	SCZO_302 = PHI(SCZO_294, SCZO_440, SCZO_444, SCZO_416)
	rbx_303 = PHI(rbx_235, rbx_432, rbx_442, rbx_446)
	r14_304 = PHI(r14_239, r14_418, r14_418, r14_239)
	rax_305 = (uint64) dwLocC8_41
	eax_306 = (word32) rax_305 (alias)
	rcx_307 = (uint64) ebx_298
	ecx_308 = (word32) rcx_307 (alias)
	rax_309 = (uint64) (eax_306 & 0x00000100)
	eax_310 = (word32) rax_309 (alias)
	rdx_rax_311 = SEQ(rdx_299, rax_309) (alias)
	edx_eax_312 = rax_309 (alias)
	ah_313 = SLICE(rax_309, byte, 8) (alias)
	ax_314 = (word16) rax_309 (alias)
	al_315 = (byte) rax_309 (alias)
	rcx_316 = (uint64) (ecx_308 | eax_310)
	ecx_317 = (word32) rcx_316 (alias)
	SZO_318 = cond(ecx_317)
	Z_319 = SZO_318 (alias)
	C_320 = false
	branch ecx_317 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00C8(0) Local -00D0(64)

l000000000040C261:
	SZO_321 = cond(bLocC8 & 0x40)
	Z_322 = SZO_321 (alias)
	C_323 = false
	branch (bLocC8 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00B8(64) Local -00D0(64)

l000000000040C3E8:
	rcx_407 = qwLocB8_38
	rsi_408 = rcx_407 + 0x0000000000000289
	Mem409[rcx_407 + 0x0000000000000288:byte] = 0x20
	qwLocD0_410 = rsi_408
// DataOut: eax ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):rsi -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C26C:
	rsi_324 = PHI(rsi_219, rsi_408)
	rcx_325 = PHI(rcx_316, rcx_407)
	qwLocD0_326 = PHI(qwLocD0_142, qwLocD0_410)
	SZO_327 = cond(ebx_298 & ebx_298)
	Z_328 = SZO_327 (alias)
	C_329 = false
	branch (ebx_298 & ebx_298) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C7EB:
	rdx_402 = qwLocD0_326
	edx_403 = (word32) rdx_402 (alias)
	rdx_rax_404 = SEQ(rdx_402, rax_309) (alias)
	edx_eax_405 = rdx_402 (alias)
	dl_406 = (byte) rdx_402 (alias)
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C274:
	rcx_373 = qwLocD0_326
	rdx_374 = rcx_373 + 0x0000000000000001
	edx_375 = (word32) rdx_374 (alias)
	rdx_rax_376 = SEQ(rdx_374, rax_309) (alias)
	edx_eax_377 = rdx_374 (alias)
	dl_378 = (byte) rdx_374 (alias)
	rcx_379 = (uint64) dwLoc90_51
	ecx_380 = (word32) rcx_379 (alias)
	SZO_381 = cond(ecx_380 & ecx_380)
	Z_382 = SZO_381 (alias)
	C_383 = false
	branch (ecx_380 & ecx_380) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3D0:
	SCZO_397 = cond(ebx_298 - 0x00000001)
	Z_398 = SCZO_397 (alias)
	rcx_399 = 0x000000000000006B
	ecx_400 = (word32) rcx_399 (alias)
	cl_401 = (byte) rcx_399 (alias)
	branch ebx_298 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C289:
	Z_391 = PHI(Z_382, Z_398)
	SCZO_392 = PHI(SCZO_302, SCZO_397)
	rcx_393 = (int64) ebx_298
	ecx_394 = (word32) Mem0[rcx_393 + 0x0000000000415F78:byte]
	rcx_395 = DPB(rcx_393, ecx_394, 0) (alias)
	cl_396 = (byte) ecx_394 (alias)
// DataOut: cl eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32) Local -00D0(64)

l000000000040C293:
	ecx_384 = PHI(ecx_394, ecx_400)
	rcx_385 = PHI(rcx_395, rcx_399)
	cl_386 = PHI(cl_396, cl_401)
	Z_387 = PHI(Z_391, Z_398)
	SCZO_388 = PHI(SCZO_392, SCZO_397)
	rdi_389 = qwLocD0_326
	Mem390[rdi_389:byte] = cl_386
// DataOut: eax ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C29A:
	ecx_330 = PHI(ecx_384, ecx_317)
	rcx_331 = PHI(rcx_385, rcx_325)
	cl_332 = PHI(cl_386, cl_222)
	rdx_333 = PHI(rdx_374, rdx_402)
	edx_334 = PHI(edx_375, edx_403)
	dl_335 = PHI(dl_378, dl_406)
	rdi_336 = PHI(rdi_389, rdi_226)
	rdx_rax_337 = PHI(rdx_rax_376, rdx_rax_404)
	edx_eax_338 = PHI(edx_eax_377, edx_eax_405)
	SCZO_339 = PHI(SCZO_388, SCZO_302)
	SZO_340 = cond(eax_310 & eax_310)
	Z_341 = SZO_340 (alias)
	C_342 = false
	branch (eax_310 & eax_310) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -0090(32)

l000000000040C7F5:
	qwLocD0_372 = rdx_333
// DataOut: fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2A2:
	rax_343 = (uint64) dwLoc90_51
	eax_344 = (word32) rax_343 (alias)
	rdx_rax_345 = SEQ(rdx_333, rax_343) (alias)
	edx_eax_346 = rax_343 (alias)
	SZO_347 = cond(eax_344 & eax_344)
	Z_348 = SZO_347 (alias)
	C_349 = false
	branch (eax_344 & eax_344) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3B8:
	SZO_362 = cond(ebx_298 & ebx_298)
	Z_363 = SZO_362 (alias)
	C_364 = false
	branch (ebx_298 & ebx_298) == 0x00000000 l000000000040C2AE
// DataOut: fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C3C0:
	Mem365[rdx_333:byte] = 0x69
	rdx_366 = rdx_333 + 0x0000000000000001
	edx_367 = (word32) rdx_366 (alias)
	rdx_rax_368 = SEQ(rdx_366, rax_343) (alias)
	edx_eax_369 = rdx_366 (alias)
	dl_370 = (byte) rdx_366 (alias)
	SCZO_371 = cond(rdx_366)
// DataOut: fs r10 r11 r12 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64)

l000000000040C2AE:
	rdx_350 = PHI(rdx_333, rdx_333, rdx_366)
	edx_351 = PHI(edx_334, edx_334, edx_367)
	dl_352 = PHI(dl_335, dl_335, dl_370)
	SZO_353 = PHI(SZO_347, SZO_362, SZO_362)
	Z_354 = PHI(Z_348, Z_363, Z_363)
	C_355 = PHI(C_349, C_364, C_364)
	rdx_rax_356 = PHI(rdx_rax_345, rdx_rax_345, rdx_rax_368)
	edx_eax_357 = PHI(edx_eax_346, edx_eax_346, edx_eax_369)
	SCZO_358 = PHI(SCZO_339, SCZO_339, SCZO_371)
	rax_359 = rdx_350 + 0x0000000000000001
	Mem360[rdx_350:byte] = 0x42
	qwLocD0_361 = rax_359
// DataOut: fs r10 r11 r12 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> ecx:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0040(64) Local -00D0(64)

l000000000040C2BA:
	r14d_246 = PHI(r14d_216, r14d_296, r14d_296, r14d_296)
	CZ_247 = PHI(CZ_217, CZ_297, CZ_297, CZ_297)
	ebx_248 = PHI(ebx_218, ebx_298, ebx_298, ebx_298)
	rsi_249 = PHI(rsi_219, rsi_219, rsi_324, rsi_324)
	ecx_250 = PHI(ecx_220, ecx_317, ecx_330, ecx_330)
	rcx_251 = PHI(rcx_221, rcx_316, rcx_331, rcx_331)
	cl_252 = PHI(cl_222, cl_222, cl_332, cl_332)
	rdx_253 = PHI(rdx_223, rdx_299, rdx_350, rdx_333)
	edx_254 = PHI(edx_224, edx_300, edx_351, edx_334)
	dl_255 = PHI(dl_225, dl_301, dl_352, dl_335)
	qwLocD0_256 = PHI(qwLocD0_142, qwLocD0_142, qwLocD0_361, qwLocD0_372)
	SCZO_257 = PHI(SCZO_234, SCZO_302, SCZO_358, SCZO_339)
	rbx_258 = PHI(rbx_235, rbx_303, rbx_303, rbx_303)
	r14_259 = PHI(r14_239, r14_304, r14_304, r14_304)
	rax_260 = qwLocD0_256
	rdi_261 = qwLoc40_47
	rdi_262 = rdi_261 ^ Mem0[fs_211:0x00000028:word64]
	SZO_263 = cond(rdi_262)
	Z_264 = SZO_263 (alias)
	C_265 = false
	Mem266[rax_260:byte] = 0x00
	rax_267 = r12_237
	eax_268 = (word32) rax_267 (alias)
	rdx_rax_269 = SEQ(rdx_253, rax_267) (alias)
	edx_eax_270 = rax_267 (alias)
	ah_271 = SLICE(rax_267, byte, 8) (alias)
	ax_272 = (word16) rax_267 (alias)
	al_273 = (byte) rax_267 (alias)
	branch rdi_262 != 0x0000000000000000 l000000000040C7E6
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040C2DC:
	rsp_274 = fp - 0x0000000000000030
	SCZO_275 = cond(fp - 0x0000000000000030)
	rbx_276 = qwLoc30_30
	rsp_277 = fp - 0x0000000000000028
	rbp_278 = qwLoc28_27
	rsp_279 = fp - 0x0000000000000020
	r12_280 = qwLoc20_21
	rsp_281 = fp - 0x0000000000000018
	r13_282 = qwLoc18_18
	rsp_283 = fp - 0x0000000000000010
	r14_284 = qwLoc10_12
	rsp_285 = fp - 0x0000000000000008
	r15_286 = qwLoc08_4
	r15d_287 = (word32) r15_286 (alias)
	rsp_288 = fp
	return rax_267
// DataOut: fs r10 r11 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E8 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> eax:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040BD70_exit:
	use r8_212 (=> r8Out)
	use r9_213 (=> r9Out)
	use r10_208 (=> r10Out)
	use r11_210 (=> r11Out)
	use r15d_287 (=> r15dOut)
// DataOut: r10 r11 r15d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r14:r14 r12:r12 rbx:rbx rcx:<invalid> r15:r15 r13:r13 rdi:<invalid> eax:<invalid> rbp:rbp r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -232(fp):(real80) rLoc1 -208(fp):<invalid> -200(fp):edx -196(fp):(eax & 0xFFFFFFE8) + 0x00000400 -192(fp):r8 -184(fp):rsi -176(fp):<invalid> -168(fp):<invalid> -152(fp):<invalid> -144(fp):eax -140(fp):r9d -132(fp):ax -130(fp):<invalid> -128(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040C810(word64 rdx, word64 rdi, word64 r8, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi rdx
// LiveOut: ebx r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040C810_entry:
	*r9Out = r9
	*r8Out = r8
// DataOut: ebx fs r10 r11 r13b r14 r14b r15 r8 r9 rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(64)

l000000000040C810:
	word32 ebp_139
	word64 rbp_110
	word64 rdx_136
	word64 rbx_108 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C910:
	word64 rax_235 = getenv(0x00000000004138E4)
	rbx_108 = rax_235
	branch rax_235 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:rdi -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C926:
	word64 rax_242 = getenv(0x0000000000415F24)
	rbx_108 = rax_242
	branch rax_242 != 0x0000000000000000 l000000000040C82C
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C93C:
	word64 rdx_257 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem261[rdx:word64] = rdx_257 + 512
	rbp_110 = 0x0000000000000000
	ebp_139 = 0x00000000 (alias)
	rdx_136 = rdx_257 + 512
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C82C:
	rbp_110 = 0x0000000000000000
	word32 ebp_111 = 0x00000000
	branch Mem0[rbx_108:byte] == 0x27 l000000000040C8A0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8A0:
	rbx_108 = rbx_108 + 0x0000000000000001
	rbp_110 = 0x0000000000000004 (alias)
	ebp_111 = 0x00000004 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C833:
	word64 rax_126 = fn0000000000409E50(0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_108)
	byte al_129 = (byte) rax_126
	branch (word32) rax_126 < 0x00000000 l000000000040C8B0
// DataOut: al ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8B0:
	word64 r9_158
	branch fn0000000000411360(0x00000000, fp - 0x0000000000000030, rbx_108, 0x0000000000415F3E, out ebp_139, out r8, out r9_158) != 0x00000000 l000000000040C968
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C968:
	Mem225[rbp_110:word32] = 0x00000000
	rdx_136 = Mem225[rdx:word64]
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32) Local -0030(64)

l000000000040C8DA:
	branch rbx_108 != qwLoc30 l000000000040C8F9
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8F9:
	rbx_108 = rbx_108 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8F0:
	branch rbx_108 == qwLoc30 l000000000040C980
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C8E4:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C980:
	branch Mem0[qwLoc30 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C998:
	rbp_110 = (uint64) (ebp_139 | 0x00000180)
	ebp_139 = (word32) rbp_110 (alias)
	branch Mem0[qwLoc30 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C9A8:
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C986:
	ebp_139 = DPB(ebp_139, 0x84, 0) (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:0x04 ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C98A:
	rbp_110 = (uint64) (ebp_139 | 0x00000020)
	ebp_139 = (word32) rbp_110 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C907:
	rdx_136 = Mem0[rdx:word64]
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> rax:<invalid> bpl:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C84E:
	Mem135[rdx:word64] = 0x0000000000000001
	rbp_110 = (uint64) (ebp_111 | Mem135[DPB(rax_126, (int16) al_129, 0) * 0x0000000000000004 + 0x00415F50:word32])
	rdx_136 = 0x0000000000000001
	ebp_139 = (word32) rbp_110 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r14b r15 r8 r9 rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> eax:<invalid> ecx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C864:
	Mem100[rbp_110:word32] = ebp_139
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> r8:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C86A:
	branch rdx_136 != 0x0000000000000000 l000000000040C894
// DataOut: fs r10 r11 r12 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C86F:
	Mem78[rdx:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	word64 r8_75
	*r8Out = r8 + 512
// DataOut: fs r10 r11 r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0008(8) Local -0020(32)

l000000000040C894:
	return (word32) rbx
// DataOut: ebx fs r10 r11 r13b r14 r14b r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040C810_exit:
// DataOut: ebx r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx rbp:rbp rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040C9B0_entry:
// DataOut: ebp edi fs r10 r11 r14 r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rbx_15 = Mem0[0x000000000061B1F8:word64]
	branch rbx_15 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D1:
	branch Mem0[rbx_15:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C8:
	rbx_15 = Mem0[rbx_15 + 0x0000000000000008:word64]
	branch rbx_15 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9C2:
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9F0:
	word64 r12_45 = 0x0000000000416919
	word64 rax_47 = getpwuid((uint64) ebp_10)
	word64 rdi_51 = 0x0000000000000011
	branch rax_47 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA07:
	r12_45 = Mem0[r8:word64]
	rdi_51 = DPB(rax_47, strlen(r12_45), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r12 r14 r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040CA16:
	word64 rax_60 = fn0000000000410C40(rsi, rdi_51)
	Mem62[rax_60:word32] = ebp_10
	strcpy(rax_60 + 0x0000000000000010, r12_45)
	word64 rax_66 = Mem62[0x000000000061B1F8:word64]
	Mem67[0x000000000061B1F8:word64] = rax_60
	Mem68[rax_60 + 0x0000000000000008:word64] = rax_66
	rbx_15 = rax_60
// DataOut: fs r10 r11 r14 r15 r15d r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0010(32)

l000000000040C9D5:
	word64 rax_26 = 0x0000000000000000
	word64 rdx_30 = rbx_15 + 0x0000000000000010
	branch Mem0[rbx_15 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E3_1:
	rax_26 = rdx_30
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040C9E7:
	return rax_26
// DataOut: ebp fs r10 r11 r14 r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040C9B0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r8 rax rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040CB40_entry:
// DataOut: edi fs r10 r11 r13d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_102
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rbx_15 = Mem0[0x000000000061B1E8:word64]
	rbx_102 = rbx_15
	branch rbx_15 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB61:
	branch Mem0[rbx_102:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB58:
	rbx_102 = Mem0[rbx_102 + 0x0000000000000008:word64]
	branch rbx_102 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB52:
// DataOut: ebp fs r10 r11 r13d r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB80:
	word64 rsp_52
	word64 rbp_54
	word32 ebp_55
	word32 edi_56
	word64 rbx_57
	byte SZO_58
	byte C_59
	byte Z_60
	byte SCZO_61
	word32 eax_62
	word64 rax_63
	word64 rdx_64
	word64 rdi_65
	word32 r12d_66
	word64 r8_67
	word64 rsi_68
	word64 r12_53
	call getgrgid (retsize: 8; depth: 32)
		uses: C_18,eax,ebp_10,edi,qwLoc08_4,qwLoc10_7,qwLoc18_13,r12_44,r12d_45,r8,rax,rbp_9,rbx_15,rdi_43,rdx,rsi,rsp_11,SCZO,SZO_16,Z_17
		defs: C_59,eax_62,ebp_55,edi_56,r12_53,r12d_66,r8_67,rax_63,rbp_54,rbx_57,rdi_65,rdx_64,rsi_68,rsp_52,SCZO_61,SZO_58,Z_60
	word64 rdi_72 = 0x0000000000000011
	branch rax_63 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r10 r11 r12 r13d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB97:
	r12_53 = Mem0[r8_67:word64]
	rdi_72 = DPB(rax_63, strlen(r12_53), 0) + 0x0000000000000011
// DataOut: ebp fs r10 r11 r12 r13d r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 r12:0x0000000000416919 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CBA6:
	word64 rax_79 = fn0000000000410C40(rsi_68, rdi_72)
	Mem81[rax_79:word32] = ebp_55
	strcpy(rax_79 + 0x0000000000000010, r12_53)
	word64 rax_85 = Mem81[0x000000000061B1E8:word64]
	Mem86[0x000000000061B1E8:word64] = rax_79
	Mem87[rax_79 + 0x0000000000000008:word64] = rax_85
	rbx_102 = rax_79
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040CB65:
	word64 rax_28 = 0x0000000000000000
	word64 rdx_32 = rbx_102 + 0x0000000000000010
	branch Mem0[rbx_102 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB73_1:
	rax_28 = rdx_32
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l000000000040CB77:
	return rax_28
// DataOut: fs r10 r11 r13d r15 r15d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040CB40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:<invalid> rdx:<invalid> r12:r12 rdi:<invalid> eax:<invalid> rsi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040CCD0(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r13 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_25 = rsi + 0x0000000000000014
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CD30:
	word64 rdx_67 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem78[rcx_25:byte] = (byte) (uint64) (rdx_67 * 0x0000000000000005 * 0x0000000000000002 + 0x0000000000000030 - edi)
	rdi = rdx_67
	edi = (word32) rdx_67 (alias)
	branch rdx_67 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem82[rcx_25 - 0x0000000000000001:byte] = 0x2D
	return rcx_25 - 0x0000000000000001
// DataOut: fs r11 r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000000000030 r8:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 rsi:0x0000000066666667

l000000000040CCF0:
	word64 rdx_34 = (rdi *s 0x0000000066666667 >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_25 = rcx_25 - 0x0000000000000001
	Mem44[rcx_25:byte] = (byte) (uint64) ((word32) (rdi - (rdx_34 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_34
	branch rdx_34 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r13 r15 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_25
// DataOut: fs r11 r13 r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:0x0000000066666667 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 rsi_5
	*rsiOut = 0x00000000CCCCCCCD
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rdi *u 0x00000000CCCCCCCD
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rbp rbx rcx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r10 r11 r12 r13 r13d r14d r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rsi:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



word64 fn000000000040CDC0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rcx rdi rdx rsi
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040CDC0_entry:
// DataOut: ebx fs r10 r11 r12d r8 r8d r9 r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_412
	word64 qwLoc58_102
	word64 rbp_117
	word64 rax_363
	word64 rcx_111
	word32 eax_286
	word32 ecx_280
	word64 r12_118
	word64 rbx_26 = (uint64) r9d
	word32 eax_36 = strlen(rdi)
	word64 rax_38 = DPB(rax, eax_36, 0)
	word64 r13_12 = rsi
	word64 r12_17 = rcx
	word32 ebx_115 = (word32) rbx_26
	byte bl_116 = (byte) rbx_26
	word64 qwLoc60_101 = rdi
	word64 r14_121 = rax_38
	word64 rbp_45 = rax_38
	branch (bl_116 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF60:
	word64 rsp_543
	word64 r15_544
	word64 rcx_549
	word64 rbx_551
	word32 r9d_553
	byte SCZO_554
	word64 rdi_555
	word64 rdx_556
	word32 r8d_557
	word32 eax_558
	byte SZO_560
	byte C_561
	word64 rax_562
	byte Z_563
	word32 ebp_564
	byte CZ_565
	word32 ecx_566
	word32 r12d_567
	word32 edx_568
	word32 edi_569
	word32 r15d_570
	word16 ax_571
	byte al_572
	call __ctype_get_mb_cur_max (retsize: 8; depth: 112)
		uses: al_40,ax_39,bl_28,bLoc39,C_43,CZ,dwLoc40_35,eax_36,ebp_46,ebx_27,ecx,edi,edx,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48,qwLoc50_33,qwLoc58,qwLoc60_31,r12_17,r12d_18,r13_12,r14_44,r15,r15d,r8d,r9d,rax_38,rbp_45,rbx_26,rcx,rdi,rdx,rsi,rsp_29,SCZO,SZO_41,Z_42
		defs: al_572,ax_571,bl_559,C_561,CZ_565,eax_558,ebp_564,ebx_552,ecx_566,edi_569,edx_568,r12_548,r12d_567,r13_546,r14_545,r15_544,r15d_570,r8d_557,r9d_553,rax_562,rbp_550,rbx_551,rcx_549,rdi_555,rdx_556,rsi_547,rsp_543,SCZO_554,SZO_560,Z_563
	branch rax_562 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CF6F:
	word64 rsp_581
	word64 r15_582
	word64 rcx_587
	word64 rbp_588
	word64 rbx_589
	word32 r9d_591
	byte SCZO_592
	word64 rdi_593
	word64 rdx_594
	word32 r8d_595
	word32 eax_596
	byte SZO_598
	byte C_599
	word64 rax_600
	byte Z_601
	word32 ebp_602
	byte CZ_603
	word32 ecx_604
	word32 r12d_605
	word32 edx_606
	word32 edi_607
	word32 r15d_608
	word16 ax_609
	byte al_610
	call mbstowcs (retsize: 8; depth: 112)
		uses: al_572,ax_571,bl_559,bLoc39,C_580,CZ_574,dwLoc40_35,eax_558,ebp_564,ebx_552,ecx_566,edi_578,edx_568,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48,qwLoc50_33,qwLoc58,qwLoc60_31,r12_548,r12d_567,r13_546,r14_545,r15_544,r15d_570,r8d_557,r9d_553,rax_562,rbp_550,rbx_551,rcx_549,rdi_577,rdx_576,rsi_575,rsp_543,SCZO_573,SZO_579,Z_563
		defs: al_610,ax_609,bl_597,C_599,CZ_603,eax_596,ebp_602,ebx_590,ecx_604,edi_607,edx_606,r12_586,r12d_605,r13_584,r14_583,r15_582,r15d_608,r8d_595,r9d_591,rax_600,rbp_588,rbx_589,rcx_587,rdi_593,rdx_594,rsi_585,rsp_581,SCZO_592,SZO_598,Z_601
	branch rax_600 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040CFA8:
	word64 r15_639 = (rax_600 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_643 = malloc(r15_639)
	qwLoc58_102 = rax_643
	branch rax_643 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D160:
	branch (bl_116 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D169:
	r15_412 = r14_121
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFCF:
	word64 rsp_654
	word64 r15_655
	word64 rcx_660
	word64 rbx_662
	word32 r9d_664
	byte SCZO_665
	word64 rdi_666
	word64 rdx_667
	word32 r8d_668
	word32 eax_669
	byte SZO_671
	byte C_672
	word64 rax_673
	byte Z_674
	word32 ebp_675
	byte CZ_676
	word32 ecx_677
	word32 r12d_678
	word32 edx_679
	word32 edi_680
	word32 r15d_681
	word16 ax_682
	byte al_683
	call mbstowcs (retsize: 8; depth: 112)
		uses: al_646,ax_645,bl_597,bLoc39,C_649,CZ_603,dwLoc40_35,eax_644,ebp_602,ebx_590,ecx_604,edi_607,edx_606,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48_641,qwLoc50_33,qwLoc58_650,qwLoc60_31,r12_586,r12d_605,r13_584,r14_583,r15_639,r15d_640,r8d_595,r9d_591,rax_643,rbp_588,rbx_589,rcx_587,rdi_653,rdx_651,rsi_652,rsp_581,SCZO_611,SZO_647,Z_648
		defs: al_683,ax_682,bl_670,C_672,CZ_676,eax_669,ebp_675,ebx_663,ecx_677,edi_680,edx_679,r12_659,r12d_678,r13_657,r14_656,r15_655,r15d_681,r8d_668,r9d_664,rax_673,rbp_661,rbx_662,rcx_660,rdi_666,rdx_667,rsi_658,rsp_654,SCZO_665,SZO_671,Z_674
	branch rax_673 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:(rax + 0x0000000000000003) * 0x0000000000000004 rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CFEC:
	word64 qwLoc48_700
	Mem691[rax_643 - 0x0000000000000004 + r15_655:word32] = 0x00000000
	word64 rdi_692 = (uint64) Mem691[rax_643:word32]
	word32 edi_693 = (word32) rdi_692
	branch edi_693 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D106:
	r15_412 = (int64) wcswidth(rax_643, rax_600 + 0x0000000000000001)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D004:
	byte bLoc39_854 = 0x00
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D010:
	word64 rsp_856
	word64 r15_857
	word64 rsi_860
	word64 rcx_862
	word64 rbx_864
	word32 r9d_866
	byte SCZO_867
	word64 rdi_868
	word64 rdx_869
	word32 r8d_870
	word32 eax_871
	byte SZO_873
	byte C_874
	word64 rax_875
	byte Z_876
	word32 ebp_877
	byte CZ_878
	word32 ecx_879
	word32 r12d_880
	word32 edx_881
	word32 edi_882
	word32 r15d_883
	word16 ax_884
	byte al_885
	call iswprint (retsize: 8; depth: 112)
		uses: al_690,ax_689,bl_670,bLoc39_855,C_696,CZ_676,dwLoc40_35,eax_688,ebp_675,ebx_663,ecx_677,edi_693,edx_679,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_15,qwLoc28_21,qwLoc30_24,qwLoc48_641,qwLoc50_33,qwLoc58_650,qwLoc60_31,r12_659,r12d_678,r13_657,r14_656,r15_852,r15d_853,r8d_668,r9d_664,rax_687,rbp_661,rbx_662,rcx_660,rdi_692,rdx_667,rsi_658,rsp_654,SCZO_665,SZO_694,Z_695
		defs: al_885,ax_884,bl_872,C_874,CZ_878,eax_871,ebp_877,ebx_865,ecx_879,edi_882,edx_881,r12_861,r12d_880,r13_859,r14_858,r15_857,r15d_883,r8d_870,r9d_866,rax_875,rbp_863,rbx_864,rcx_862,rdi_868,rdx_869,rsi_860,rsp_856,SCZO_867,SZO_873,Z_876
	branch eax_871 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D019:
	Mem912[rdi_868:word32] = 0x0000FFFD
	bLoc39_854 = 0x01
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D025:
	branch (word32) (uint64) Mem691[rdi_868:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0039(0) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D030:
	r15_412 = (int64) wcswidth(rax_643, rax_600 + 0x0000000000000001)
	branch bLoc39_854 == 0x00 l000000000040D118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D118:
	rsi = rax_600 + 0x0000000000000001
	rax_363 = Mem691[r12_17:word64]
	branch r15_412 <=u rax_363 l000000000040CF28
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF28:
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D125:
	qwLoc48_700 = rbp_45 + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D04D:
	rsi = rax_643
	qwLoc48_700 = DPB(rax_875, wcstombs(0x0000000000000000, rax_643, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:rax + 0x0000000000000002 rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D064:
	word64 rax_723 = malloc(qwLoc48_700)
	rbp_117 = rax_723
	branch rax_723 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D138:
	branch (bl_116 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D141:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040D07A:
	word64 rdi_735 = (uint64) Mem691[rax_643:word32]
	word64 rax_729 = Mem691[r12_17:word64]
	word64 rax_731 = rax_643
	branch (word32) rdi_735 == 0x00000000 l000000000040D173
// DataOut: bl ebx fs r10 r11 r12 r13 r8 r9 rax rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D173:
	r15_412 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D092:
	r15_412 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0BA:
	word32 eax_771 = wcwidth(rdi_735)
	byte al_774 = (byte) eax_771
	branch eax_771 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0A0:
	rax_731 = DPB(rax_731, (int16) al_774, 0) + r15_412
	branch rax_729 <u rax_731 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0C4:
	Mem791[rsi:word32] = 0x0000FFFD
	rax_731 = r15_412 + 0x0000000000000001
	branch rax_729 >=u rax_731 l000000000040D0AC
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0AC:
	rdi_735 = (uint64) Mem691[rsi:word32]
	r15_412 = rax_731
	branch (word32) rdi_735 == 0x00000000 l000000000040D0E0
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64) Local -0060(0)

l000000000040D0DA:
// DataOut: bl ebx fs r10 r11 r12 r13 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0048(64) Local -0050(0) Local -0058(64)

l000000000040D0E0:
	Mem753[rax_643:word32] = 0x00000000
	rsi = rax_643
	qwLoc60_101 = rax_723
	r14_121 = DPB(rax_731, wcstombs(rax_723, rax_643, qwLoc48_700), 0)
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF83:
	branch (bl_116 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0060(64)

l000000000040D14D:
	r15_412 = r14_121
	qwLoc58_102 = 0x0000000000000000
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF8C:
	qwLoc58_102 = 0x0000000000000000
	rbp_117 = 0x0000000000000000
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CDFA:
	qwLoc58_102 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax -96(fp):rdi -80(fp):rdx -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE03:
	r15_412 = rbp_45
	rbp_117 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:rax rbp:rax rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:(rax + 0x0000000000000002) * 0x0000000000000004 -96(fp):rdi -88(fp):<invalid> -80(fp):rdx -72(fp):rax + 0x0000000000000002 -64(fp):r8d -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE08:
	rax_363 = Mem0[r12_17:word64]
	branch r15_412 <=u rax_363 l000000000040CF2A
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF2A:
	branch r15_412 >=u rax_363 l000000000040D180
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040D180:
	rax_363 = r15_412
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF33:
	Mem420[r12_17:word64] = r15_412
	word64 rax_416 = rax_363 - r15_412
	rcx_111 = rax_416
	ecx_280 = (word32) rax_416 (alias)
	eax_286 = (word32) (uint64) r8d (alias)
	branch eax_286 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE15:
	r14_121 = rax_363
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0040(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE1A:
	Mem374[r12_17:word64] = rax_363
	ecx_280 = 0x00000000
	rcx_111 = 0x0000000000000000
	eax_286 = (word32) (uint64) r8d (alias)
	branch eax_286 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx fs r10 r11 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CF4C:
	r12_118 = rcx_111
	rcx_111 = 0x0000000000000000
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE2A:
	r12_118 = 0x0000000000000000
	branch eax_286 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:rcx rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE32:
	r12_118 = rcx_111 >>u 0x0000000000000001
	rcx_111 = (uint64) (ecx_280 & 0x00000001) + r12_118
// DataOut: bl ebx fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE3E:
	branch (bl_116 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE43_1:
	rcx_111 = 0x0000000000000000
// DataOut: ebx fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_115 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:(uint64) r9d eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4A_1:
	r12_118 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(0) Local -0058(64) Local -0060(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64) Local -0060(64)

l000000000040CE5A:
	word64 rdx_169 = rcx_111 - 0x0000000000000001
	word64 rbx_171 = r13_12 - 0x0000000000000001 + rdx
	branch rcx_111 == 0x0000000000000000 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE6D:
	branch r13_12 >=u rbx_171 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE72:
	word64 rax_245 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:rdx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE89:
	Mem259[rbp_117 - 0x0000000000000001:byte] = 0x20
	r13_12 = r13_12 + 0x0000000000000001
	branch rdx_169 != rax_245 l000000000040CE80
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE80:
	rax_245 = rax_245 + 0x0000000000000001
	branch r13_12 == rbx_171 l000000000040CE97
// DataOut: fs r10 r11 r12 r13 r14 r8 r9 rax rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64) Local -0060(64)

l000000000040CE97:
	Mem184[rbp_117:byte] = 0x00
	word64 rdx_185 = rbx_171 - r13_12
	branch rdx_185 <=u r14_121 l000000000040CEB6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):rdx -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB2_1:
	rdx_185 = r14_121
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0050(64) Local -0058(64)

l000000000040CEB6:
	word64 rax_193 = mempcpy(r13_12, qwLoc60_101, rdx_185)
	word64 rdx_200 = rax_193
	rsi = r12_118 - 0x0000000000000001
	branch r12_118 == 0x0000000000000000 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CECD:
	branch rbx_171 <=u rax_193 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CED2:
	word64 rax_219 = 0x0000000000000000
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE9:
	rdx_200 = rdx_200 + 0x0000000000000001
	Mem234[rdx_200 - 0x0000000000000001:byte] = 0x20
	branch rsi != rax_219 l000000000040CEE0
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEE0:
	rax_219 = rax_219 + 0x0000000000000001
	branch rdx_200 == rbx_171 l000000000040CEF6
// DataOut: fs r10 r11 r12 r14 r8 r9 rax rbp rbx rcx rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF6:
	Mem216[rdx_200:byte] = 0x00
// DataOut: fs r10 r11 r12 r14 r8 r9 rbp rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEF9:
// DataOut: fs r10 r11 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0030(32) Local -0058(64)

l000000000040CEFF:
	free(qwLoc58_102)
	free(rbp_117)
	return rsi
// DataOut: ebx fs r10 r11 r12d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 r13:<invalid> r12:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040CDC0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r13:r13 r12:r12 rbx:rbx eax:<invalid> r14:r14 rbp:rbp rsi:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r15:r15 rcx:<invalid> ax:<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):r8d -57(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D240_entry:
// DataOut: ebx edx fs r10 r11 r13d r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64)

l000000000040D240:
	word64 rax_139
	word64 rsp_37
	word64 r15_38
	word32 edx_39
	word64 r14_40
	word64 rdi_42
	word64 rsi_43
	word64 r12_44
	word64 rbx_46
	byte SCZO_47
	word64 rax_49
	word32 eax_50
	byte SZO_51
	byte C_52
	byte CZ_53
	word32 r15d_54
	word32 r12d_55
	word32 r14d_56
	byte al_57
	byte SO_58
	word64 rdx_59
	word64 rcx_60
	byte Z_61
	byte S_62
	word32 esi_63
	byte dh_64
	selector fs_121
	word64 rbp_208
	word64 r13_210
	call __ctype_get_mb_cur_max (retsize: 8; depth: 96)
		uses: al_34,C_36,eax_33,edx,fs,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc28_22,qwLoc30_26,qwLoc40_31,r12,r13_16,r14,r15_6,r15d_7,rax_32,rbp_23,rbx,rdi,rsi,rsp_27,SZO_35
		defs: al_57,C_52,CZ_53,dh_64,eax_50,edx_39,esi_63,fs_48,r12_44,r12d_55,r13_41,r14_40,r14d_56,r15_38,r15d_54,rax_49,rbp_45,rbx_46,rcx_60,rdi_42,rdx_59,rsi_43,rsp_37,S_62,SCZO_47,SO_58,SZO_51,Z_61
	word64 rax_30 = Mem0[fs:0x00000028:word64]
	branch false l000000000040D370
// DataOut: fs r10 r11 r13 r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D370:
	branch rbp_208 >=u r13_210 l000000000040D406
// DataOut: fs r10 r11 r13 r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D379:
	word64 rsp_486
	word64 r15_487
	word32 edx_488
	word64 r14_489
	word64 r13_490
	word64 rdi_491
	word64 rsi_492
	word64 r12_493
	word64 rbx_495
	byte SCZO_496
	word64 rax_498
	word32 eax_499
	byte SZO_500
	byte C_501
	byte CZ_502
	word32 r15d_503
	word32 r12d_504
	word32 r14d_505
	byte al_506
	byte SO_507
	word64 rcx_509
	byte Z_510
	byte S_511
	word32 esi_512
	byte dh_513
	word64 rbp_494
	word64 rdx_508
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: al_57,C_485,CZ_66,dh_64,dwLoc4C,eax_50,edx_39,esi_63,fs_48,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc28_22,qwLoc30_26,qwLoc40_31,qwLoc48,r12_44,r12d_55,r13_41,r14_40,r14d_56,r15_38,r15d_54,rax_49,rbp_45,rbx_46,rcx_60,rdi_42,rdx_59,rsi_43,rsp_37,S_62,SCZO_484,SO_58,SZO_51,Z_61
		defs: al_506,C_501,CZ_502,dh_513,eax_499,edx_488,esi_512,fs_497,r12_493,r12d_504,r13_490,r14_489,r14d_505,r15_487,r15d_503,rax_498,rbp_494,rbx_495,rcx_509,rdi_491,rdx_508,rsi_492,rsp_486,S_511,SCZO_496,SO_507,SZO_500,Z_510
	word64 rcx_516 = Mem0[rax_498:word64]
	rax_139 = 0x0000000000000000
	word32 eax_518 = 0x00000000
	word32 esi_521 = (word32) (uint64) ((word32) (uint64) r15d_503 & 0x00000002)
// DataOut: eax esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D398:
	rbp_494 = rbp_494 + 0x0000000000000001
	word32 edx_533 = (word32) Mem0[rcx_516 + DPB(rdx_508, (word32) Mem0[rbp_494 - 0x0000000000000001:byte], 0) * 0x0000000000000002:word16]
	rdx_508 = DPB(rdx_508, edx_533, 0) (alias)
	branch (SLICE(edx_533, byte, 8) & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3A9:
	branch esi_521 != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3AD:
	rdx_508 = (uint64) (edx_533 & 0x00000002)
	branch (word32) rdx_508 != 0x00000000 l000000000040D393
// DataOut: eax esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B2:
	branch eax_518 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r10 r11 r13 r8 r9 rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D390:
	rax_139 = (uint64) (eax_518 + 0x00000001)
	eax_518 = (word32) rax_139 (alias)
// DataOut: eax esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D393:
	branch rbp_494 == r13_490 l000000000040D3C5
// DataOut: eax esi fs r10 r11 r13 r8 r9 rax rbp rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3B9:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D277:
	branch rbp_208 >=u r13_210 l000000000040D406
// DataOut: fs r10 r11 r13 r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D406:
	rax_139 = 0x0000000000000000
// DataOut: eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D280:
	word32 r12d_183 = 0x00000000
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2AC:
	word32 eax_215 = (word32) Mem0[rbp_208:byte]
	byte al_217 = (byte) eax_215
	branch al_217 <= 0x3F l000000000040D290
// DataOut: al eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D290:
	branch al_217 >= 0x25 l000000000040D29B
// DataOut: al eax fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D294:
	branch (byte) (uint64) (eax_215 - 0x00000020) >u 0x03 l000000000040D2C3
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B4:
	branch al_217 < 0x41 l000000000040D2C3
// DataOut: al eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2B8:
	branch al_217 <= 0x5F l000000000040D29B
// DataOut: al eax fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2BC:
	branch (byte) (uint64) (eax_215 - 0x00000061) <=u 0x1D l000000000040D29B
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2C3:
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2F4:
	word64 rsp_325
	word64 r15_326
	word32 edx_327
	word64 r14_328
	word64 rdi_330
	word64 rsi_331
	word64 r12_332
	word64 rbx_334
	byte SCZO_335
	word64 rax_337
	word32 eax_338
	byte SZO_339
	byte C_340
	byte CZ_341
	word32 r15d_342
	word32 r14d_344
	byte al_345
	byte SO_346
	word64 rdx_347
	word64 rcx_348
	byte Z_349
	byte S_350
	word32 esi_351
	byte dh_352
	call mbrtowc (retsize: 8; depth: 96)
		uses: al_313,C_206,CZ_310,dh_191,eax_312,edx_200,esi_204,fs_198,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc28_22,qwLoc30_26,qwLoc40_31,qwLoc48_316,r12_209,r12d_197,r13_318,r14_211,r14d_196,r15_212,r15d_213,rax_311,rbp_317,rbx_207,rcx_320,rdi_321,rdx_322,rsi_324,rsp_214,S_192,SCZO_323,SO_309,SZO_314,Z_205
		defs: al_345,C_340,CZ_341,dh_352,eax_338,edx_327,esi_351,fs_336,r12_332,r12d_343,r13_329,r14_328,r14d_344,r15_326,r15d_342,rax_337,rbp_333,rbx_334,rcx_348,rdi_330,rdx_347,rsi_331,rsp_325,S_350,SCZO_335,SO_346,SZO_339,Z_349
	branch rax_337 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D360:
	branch r15d_342 == 0x00000000 l000000000040D29B
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D29B:
	rbp_208 = rbp_208 + 0x0000000000000001
	r12d_183 = (word32) (uint64) (r12d_183 + 0x00000001) (alias)
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D315:
	branch rax_337 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3E8:
	branch r15d_342 != 0x00000000 l000000000040D369
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3F1:
	rbp_208 = r13_210
	r12d_183 = (word32) (uint64) (r12d_183 + 0x00000001) (alias)
	branch r13_210 >u r13_210 l000000000040D2AC
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D31F:
	word64 rdi_359 = (uint64) dwLoc4C
	branch rax_337 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32B_1:
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D32F:
	word32 eax_365 = wcwidth(rdi_359)
	branch eax_365 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2D0:
	branch eax_365 > (word32) ((uint64) (0x7FFFFFFF - r12d_183)) l000000000040D3C0
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E0:
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D338:
	branch r14d_344 != 0x00000000 l000000000040D369
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D369:
	rax_139 = 0x00000000FFFFFFFF
// DataOut: eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D33D:
	word64 rsp_411
	word64 r15_412
	word32 edx_413
	word64 r14_414
	word64 r13_415
	word64 rdi_416
	word64 rsi_417
	word64 r12_418
	word64 rbp_419
	word64 rbx_420
	byte SCZO_421
	word64 rax_423
	word32 eax_424
	byte SZO_425
	byte C_426
	byte CZ_427
	word32 r15d_428
	word32 r12d_429
	word32 r14d_430
	byte al_431
	byte SO_432
	word64 rdx_433
	word64 rcx_434
	byte Z_435
	byte S_436
	word32 esi_437
	byte dh_438
	call iswcntrl (retsize: 8; depth: 96)
		uses: al_367,C_409,CZ_341,dh_352,dwLoc4C,eax_365,edx_327,esi_351,fs_336,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc28_22,qwLoc30_26,qwLoc40_31,qwLoc48_316,r12_332,r12d_343,r13_329,r14_328,r14d_344,r15_326,r15d_342,rax_366,rbp_333,rbx_364,rcx_348,rdi_410,rdx_347,rsi_331,rsp_325,S_369,SCZO_356,SO_346,SZO_407,Z_408
		defs: al_431,C_426,CZ_427,dh_438,eax_424,edx_413,esi_437,fs_422,r12_418,r12d_429,r13_415,r14_414,r14d_430,r15_412,r15d_428,rax_423,rbp_419,rbx_420,rcx_434,rdi_416,rdx_433,rsi_417,rsp_411,S_436,SCZO_421,SO_432,SZO_425,Z_435
	branch eax_424 != 0x00000000 l000000000040D2E3
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D34A:
	branch r12d_429 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D3C0:
	rax_139 = 0x000000007FFFFFFF
// DataOut: eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D353:
// DataOut: eax fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2E3:
	word64 rsp_376
	word64 r15_377
	word32 edx_378
	word64 r14_379
	word64 rdi_381
	word64 rsi_382
	word64 r12_383
	word64 rbx_385
	byte SCZO_386
	word64 rax_388
	word32 eax_389
	byte SZO_390
	byte C_391
	byte CZ_392
	word32 r15d_393
	word32 r14d_395
	byte al_396
	byte SO_397
	word64 rdx_398
	word64 rcx_399
	byte Z_400
	byte S_401
	word32 esi_402
	byte dh_403
	call mbsinit (retsize: 8; depth: 96)
		uses: al_367,C_370,CZ_341,dh_352,dwLoc4C,eax_365,edx_327,esi_351,fs_336,qwLoc08_4,qwLoc10_10,qwLoc18_13,qwLoc20_19,qwLoc28_22,qwLoc30_26,qwLoc40_31,qwLoc48_316,r12_332,r12d_343,r13_329,r14_328,r14d_344,r15_326,r15d_342,rax_366,rbp_374,rbx_371,rcx_348,rdi_373,rdx_347,rsi_331,rsp_325,S_369,SCZO_375,SO_346,SZO_368,Z_361
		defs: al_396,C_391,CZ_392,dh_403,eax_389,edx_378,esi_402,fs_387,r12_383,r12d_394,r13_380,r14_379,r14d_395,r15_377,r15d_393,rax_388,rbp_384,rbx_385,rcx_399,rdi_381,rdx_398,rsi_382,rsp_376,S_401,SCZO_386,SO_397,SZO_390,Z_400
	branch eax_389 != 0x00000000 l000000000040D2A3
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D2A3:
	branch r13_210 <=u rbp_208 l000000000040D401
// DataOut: fs r10 r11 r12d r13 r14d r15d r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64) Local -004C(64)

l000000000040D401:
	rax_139 = (uint64) r12d_183
// DataOut: eax fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32) Local -0040(64)

l000000000040D3C5:
	word64 rsi_92 = rax_30 ^ Mem0[fs_121:0x00000028:word64]
	*rsiOut = rsi_92
	branch rsi_92 != 0x0000000000000000 l000000000040D40A
// DataOut: eax fs r10 r11 r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0008(32) Local -0018(32) Local -0030(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D3D5:
	return rax_139
// DataOut: eax ebx fs r10 r11 r13d r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D240_exit:
// DataOut: eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r13:r13 rbp:rbp rax:<invalid> rsi:<invalid> rbx:rbx r12:r12 r14:r14 rcx:<invalid> edx:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D420(word32 esi, word64 rdi, selector fs, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rdi
// LiveOut: eax rax rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbp rbx rdi rsp
fn000000000040D420_entry:
// DataOut: ebx esi fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	word64 rax_16 = DPB(rax, strlen(rdi), 0)
	word32 edx_22 = (word32) (uint64) (word32) (uint64) esi
// DataOut: ebx edx fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	word64 rsi_31
	return fn000000000040D240(edx_22, rax_16, rdi, fs, out rsi_31)
// DataOut: eax ebx fs r10 r11 r12 r13d r14 r15 r15d r8 r9 rax rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:rdi rdx:(uint64) ebp rsi:rax -16(fp):rbx -8(fp):rbp

fn000000000040D420_exit:
// DataOut: eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rbx -8(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rsiOut, ptr64 & r13dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13d rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040D450_entry:
// DataOut: eax fs r10 r11 r13d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000068
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc68 = rsi
	qwLoc50 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32) Local -0068(64)

l000000000040D490:
	rsi = qwLoc68
	rdx = qwLoc50
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc60 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc40 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: fs r10 r11 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsi, out r13d)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D53B:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D547:
	v23 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v23
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: fs r10 r11 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: fs r10 r11 r12 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	r15 = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call rbp (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdi = rbx + r15 * 0x0000000000000008
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = rcx + rax * 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rax = memcpy(rdi, rsi, rdx)
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5C3:
	v24 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v24
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax fs r10 r11 r13 r14 r15 r8 r9 rax rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax fs r10 r11 r12 r13 r14 r15 r8 r9 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):rdx -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax fs r10 r11 r15 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r13d = (word32) r13 (alias)
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call rcx (retsize: 8; depth: 112)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax fs r10 r11 r12 r13 r8 r9 rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0018(32)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000068 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -104(fp):rsi -80(fp):rdx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r13 = Mem0[rsp:word64]
	r13d = (word32) r13 (alias)
	rsp = rsp + 0x0000000000000008
	r14 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax fs r10 r11 r13d r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D450_exit:
	use rsi (=> rsiOut)
	use r13d (=> r13dOut)
// DataOut: eax r13d rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> -104(fp):rsi -96(fp):rsi >>u 0x0000000000000001 -80(fp):<invalid> -64(fp):<invalid> -48(fp):<invalid> -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut: r12 r13 r13d r14 r15 rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
	*r15Out = r15
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: edi fs r10 r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax fs r10 r11 r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsi_12
	word32 r13d_13
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsi_12, out r13d_13)
	return rsi_12
// DataOut: fs r10 r11 r12 r13 r13d r14 r15 r8 r9 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut: r12 r13 r13d r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r12:<invalid> r13:<invalid> r14:<invalid> r15:<invalid>



void fn000000000040D6A0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rbx rsp
fn000000000040D6A0_entry:
// DataOut: ebx fs r10 r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: fs r10 r11 r15 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(32)

l000000000040D713:
	fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64])
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	byte C_110 = SCZO_50
	byte Z_143 = SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_158:byte] - Mem0[rdi_159:byte])
	C_110 = SCZO_140 (alias)
	Z_143 = SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_158 + 0x0000000000000001
	rdi_148 = rdi_159 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_158 = rsi_145
	word64 rdi_159 = rdi_148
	branch Mem0[rsi_158:byte] != Mem0[rdi_159:byte] l000000000040D6D6
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_160:byte] - Mem0[rdi_161:byte])
	C_110 = SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_160 + 0x0000000000000001
	rdi_102 = rdi_161 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_160 = rsi_100
	word64 rdi_161 = rdi_102
	branch Mem0[rsi_160:byte] != Mem0[rdi_161:byte] l000000000040D6E7
// DataOut: fs r10 r11 r15 r9 rax rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: fs r10 r11 r15 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: fs r10 r11 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx
// LocalsOut: Local -0008(32)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_119
	Mem43[0x000000000061A648:word64] = rbx_119
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -8(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 r15 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_16 = 0x0000000000000007
	word64 rdi_15 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_16 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 r15 rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

l000000000040D759:
	Mem26[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem29[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem32[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem35[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem38[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem41[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem44[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem18[rdi_15:word64] = 0x0000000000000000
	rdi_15 = rdi_15 + 0x0000000000000008
	rcx_16 = rcx_16 - 0x0000000000000001
// DataOut: ebx esi fs r11 r15 rax rcx rdi rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):<invalid>
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r8 rdi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 rbp rbx rsp
fn000000000040D7B0_entry:
	*r10Out = r10
// DataOut: ebx esi fs r10 r15 r8 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 rax_24 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) (uint64) esi
	word64 rbx_122 = rax_24
	branch rax_24 == rdi l000000000040D7E8
// DataOut: fs r10 r12d r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7E8:
	word64 r10_54
	word64 rax_55 = fn0000000000411900(rdi, rdi, r8, fs, out r10_54)
	byte dl_61 = (byte) (uint64) ((word32) Mem0[rax_55:byte] & 0xFFFFFFDF)
	branch dl_61 != 0x55 l000000000040D850
// DataOut: dl fs r10 r12d r15 r8 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D850:
	branch dl_61 != 0x47 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D861:
	branch Mem0[rax_55 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D867:
	branch Mem0[rax_55 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D86D:
	branch Mem0[rax_55 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D873:
	branch Mem0[rax_55 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D879:
	branch Mem0[rax_55 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D87F:
	branch Mem0[rax_55 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D885:
	rbx_122 = 0x0000000000415FED
	branch Mem0[rdi:byte] == 0x60 l000000000040D89B
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D897_1:
	rbx_122 = 0x0000000000415FE8
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D89B:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FE8 edi:<invalid> r10:<invalid> al:0xE8 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_55 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D810:
	branch Mem0[rax_55 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D816:
	branch Mem0[rax_55 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D81C:
	branch Mem0[rax_55 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r10 r12d r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D838:
	rbx_122 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D846_1:
	rbx_122 = 0x0000000000416DEA
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D84A:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00416DEA edi:<invalid> r10:<invalid> al:0xEA -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D822:
	rbx_122 = 0x0000000000415FE4
	branch Mem0[rax_24:byte] != 0x60 l000000000040D833
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D82F_1:
	rbx_122 = 0x0000000000415FF1
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D833:
// DataOut: fs r10 r15 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:0x00415FF1 edi:<invalid> r10:<invalid> al:0xF1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64) Local -0020(32)

l000000000040D7D7:
	return rbx_122
// DataOut: ebx fs r10 r15 r8 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 rdx:<invalid> r12:(uint64) esi rsi:<invalid> rbp:rdi rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

fn000000000040D7B0_exit:
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> r12:r12 rsi:<invalid> rbp:rbp rdi:<invalid> rax:<invalid> rbx:rbx r13:r13 edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg08, word64 qwArg10, word64 qwArg18, ptr64 & ebpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r10 r11 r12d r8 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsp
// Stack args: Stack +0008(64) Stack +0010(64) Stack +0018(64)
fn000000000040D8A0_entry:
// DataOut: ebp fs r10 r12d r8 r8d r9b r9d rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -004C(64) Stack +0008(64) Stack +0010(64) Stack +0018(64)

l000000000040D8A0:
	word32 dwLocC4_117 = r8d
	word64 qwLoc88_114 = qwArg10
	word64 qwLoc90_115 = qwArg18
	word64 rsp_54
	word64 rcx_56
	word64 r14_57
	word32 r14d_58
	word32 r8d_59
	word64 r13_60
	word64 rdx_61
	word64 r12_62
	word64 rbp_63
	word64 rbx_64
	word32 ebx_65
	word32 r9d_66
	byte SCZO_67
	word64 rax_68
	word64 rdi_69
	word32 eax_72
	byte SZO_73
	byte C_74
	byte al_75
	byte CZ_76
	word64 r11_77
	byte Z_78
	word32 edi_79
	word32 esi_80
	word64 r9_81
	word32 ebp_82
	word64 r8_83
	byte cl_84
	word32 ecx_85
	word32 r11d_86
	word32 r12d_87
	byte r12b_88
	word32 edx_89
	byte dl_90
	byte r11b_91
	word16 dx_92
	word64 r10_93
	byte dil_94
	byte sil_95
	selector fs_1000
	word64 r15_1038
	word64 rsi_1027
	call __ctype_get_mb_cur_max (retsize: 8; depth: 256)
		uses: C_53,dwLoc68_38,dwLocC4_37,eax_51,ebx_29,fs,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc88_42,qwLoc90_45,qwLocA0_39,qwLocD0_34,qwLocD8_36,r12,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_50,rbp,rbx_28,rcx,rdi,rdx,rsi,rsp_30,SZO_52
		defs: al_75,C_74,cl_84,CZ_76,dil_94,dl_90,dx_92,eax_72,ebp_82,ebx_65,ecx_85,edi_79,edx_89,esi_80,fs_71,r10_93,r11_77,r11b_91,r11d_86,r12_62,r12b_88,r12d_87,r13_60,r14_57,r14d_58,r15_55,r8_83,r8d_59,r9_81,r9d_66,rax_68,rbp_63,rbx_64,rcx_56,rdi_69,rdx_61,rsi_70,rsp_54,SCZO_67,sil_95,SZO_73,Z_78
	byte al_102 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_65 >>u 0x00000001) & 0x00000001)
	word64 rax_48 = Mem0[fs:0x00000028:word64]
	byte bLocC5_108 = al_102
	branch r14d_58 >u 0x00000008 l000000000040E280
// DataOut: fs r10 r13 r14d r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64) Local -00D8(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040D92D:
	word64 rbx_1030
	word64 r14_139
	word64 qwLoc98_120
	byte bLocD8_119
	word64 rax_109 = (uint64) r14d_58
	switch (r14d_58) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r10 r11 r13 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE0:
	branch r14d_58 == 0x00000008 l000000000040E012
// DataOut: fs r10 r11 r13 r15 r8 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(32) Local -00C5(0) Local -00D0(64)

l000000000040DFE2:
	word32 ebx_2095 = (word32) (uint64) r8d
	rsi_1027 = (uint64) ebx_2095
	word64 r10_2100
	qwLoc88_114 = fn000000000040D7B0((word32) (uint64) ebx_2095, 0x0000000000415FF5, r8_83, fs_1000, out r10_2100)
	word64 r10_2106
	rax_109 = fn000000000040D7B0((word32) rsi_1027, 0x0000000000416DEA, r8_83, fs_1000, out r10_2106)
	qwLoc90_115 = rax_109
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040E012:
	rbx_1030 = 0x0000000000000000
	branch al_102 != 0x00 l000000000040E044
// DataOut: fs r10 r11 r13 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E01B:
	word32 eax_2067 = (word32) Mem0[qwLoc88_114:byte]
	rax_109 = DPB(rax_109, eax_2067, 0) (alias)
	byte al_2069 = (byte) eax_2067
	branch al_2069 == 0x00 l000000000040E044
// DataOut: al fs r10 r11 r13 r15 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> eax:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E027:
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E030:
	branch rbx_1030 >=u rsi l000000000040E038
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E035:
	Mem2093[rdi + rbx_1030:byte] = al_2069
// DataOut: fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E038:
	rbx_1030 = rbx_1030 + 0x0000000000000001
	word32 eax_2087 = (word32) Mem0[qwLoc88_114 + rbx_1030:byte]
	rax_109 = DPB(rax_109, eax_2087, 0) (alias)
	al_2069 = (byte) eax_2087 (alias)
	branch al_2069 != 0x00 l000000000040E030
// DataOut: al fs r10 r11 r13 r15 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:rdi edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E044:
	qwLoc98_120 = qwLoc90_115
	r14_139 = DPB(rax_109, strlen(qwLoc90_115), 0)
	bLocD8_119 = 0x01
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF90:
	bLocC5_108 = 0x00
	bLocD8_119 = 0x01
	r14_139 = 0x0000000000000000
	qwLoc98_120 = 0x0000000000000000
	rbx_1030 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DFB0:
	bLocC5_108 = 0x01
	bLocD8_119 = 0x01
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000415FEB
	rbx_1030 = 0x0000000000000000
	dwLocC4_117 = 0x00000003
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF50:
	branch al_102 != 0x00 l000000000040E428
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E428:
	bLocD8_119 = 0x01
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000415FEB
	rbx_1030 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2B3:
	bLocD8_119 = 0x01
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000415FEB
	rbx_1030 = 0x0000000000000001
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF64:
	Mem1987[rdi:byte] = 0x22
	bLocD8_119 = 0x01
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000415FEB
	rbx_1030 = 0x0000000000000001
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF10:
	branch al_102 != 0x00 l000000000040E408
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E408:
	bLocD8_119 = 0x00
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000416DEA
	rbx_1030 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r10 r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64)

l000000000040E2D1:
	bLocD8_119 = 0x00
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000416DEA
	rbx_1030 = 0x0000000000000001
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040DF24:
	Mem1960[rdi:byte] = 0x27
	bLocD8_119 = 0x00
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000416DEA
	rbx_1030 = 0x0000000000000001
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040E070:
	bLocC5_108 = 0x01
	bLocD8_119 = 0x00
	r14_139 = 0x0000000000000001
	qwLoc98_120 = 0x0000000000416DEA
	rbx_1030 = 0x0000000000000000
	dwLocC4_117 = 0x00000002
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D940:
	bLocC5_108 = 0x00
	bLocD8_119 = 0x00
	r14_139 = 0x0000000000000000
	qwLoc98_120 = 0x0000000000000000
	rbx_1030 = 0x0000000000000000
// DataOut: fs r10 r11 r13 r14 r15 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -216(fp):rsi -208(fp):rdi -197(fp):al -196(fp):r8d -160(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(32)

l000000000040D960:
	word64 rax_1024 = (uint64) ((word32) bLocD8_119 ^ 0x00000001)
	word64 r9_141
	*r9Out = r14_139
	word64 rbp_1031 = 0x0000000000000000
	word64 r14_1037 = rsi
	word64 r8_1011
	*r8Out = r13_60
	byte al_150 = (byte) (uint64) ((word32) bLocC5_108 ^ 0x00000001)
	byte al_155 = (byte) rax_1024
// DataOut: fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:rcx r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:rsi rdi:<invalid> rsi:<invalid> rdx:<invalid> eax:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):rsi -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -104(fp):r9d -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D986:
	word64 r13_1442
	word64 r11_1711
	word64 rax_268
	byte al_1912 = rbp_1031 != r15_1038
	word64 rax_1828 = DPB(rax_1024, al_1912, 0)
	branch r15_1038 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D996:
// DataOut: al fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A0:
	branch al_1912 == 0x00 l000000000040DB86
// DataOut: fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9A8:
	byte r11b_1007
	word64 r13_1833
	word32 r11d_1835
	branch r9_141 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9B4:
	branch bLocD8_119 == 0x00 l000000000040E0A0
// DataOut: ecx fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9BF:
	rax_1828 = rbp_1031 + r9_141
	branch r15_1038 <u rax_1828 l000000000040E0A0
// DataOut: ecx fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(64) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E0A0:
	r13_1833 = r8_1011 + rbp_1031
	r11d_1835 = 0x00000000 (alias)
	r11b_1007 = 0x00 (alias)
// DataOut: fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040D9CD:
	r13_1833 = r8_1011 + rbp_1031
	word32 eax_1853 = memcmp(r13_1833, qwLoc98_120, r9_141)
	rsi_1027 = qwLoc98_120
	rax_1828 = DPB(rax_1828, eax_1853, 0) (alias)
	branch eax_1853 != 0x00000000 l000000000040E0B0
// DataOut: fs r10 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E0B0:
	r11d_1835 = 0x00000000 (alias)
	r11b_1007 = 0x00 (alias)
// DataOut: fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA05:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: fs r10 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA10:
	r11d_1835 = 0x00000001 (alias)
	r11b_1007 = 0x01 (alias)
// DataOut: fs r10 r11b r11d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):rdx -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA20:
	word32 r12d_1034 = (word32) Mem0[r13_1833:byte]
	*r8Out = r8_1011
	*r9Out = r9_141
	byte r12b_1035 = (byte) r12d_1034
	branch r12b_1035 >u 0x7E l000000000040DE18
// DataOut: fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE18:
	byte dl_1291
	word32 esi_1116
	byte dl_1128
	branch true l000000000040E0C0
// DataOut: fs r10 r11b r11d r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0C0:
	branch r15_1038 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r10 r11b r11d r12b r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E285:
	r15_1038 = DPB(rax_1828, strlen(r8_1011), 0)
	r11b_1007 = (byte) (uint64) r11d_1835 (alias)
// DataOut: fs r10 r11b r12b r13 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E0D6:
// DataOut: fs r10 r12d r13 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E11D:
	word64 rsp_1436
	word64 r15_1437
	word64 rcx_1438
	word64 r14_1439
	word32 r14d_1440
	word32 r8d_1441
	word64 rdx_1443
	word64 r12_1444
	word64 rbp_1445
	word64 rbx_1446
	word32 ebx_1447
	word32 r9d_1448
	byte SCZO_1449
	word64 rax_1450
	word32 eax_1454
	byte SZO_1455
	byte C_1456
	byte al_1457
	byte CZ_1458
	word64 r11_1459
	byte Z_1460
	word32 edi_1461
	word64 r9_1463
	word32 ebp_1464
	word64 r8_1465
	byte cl_1466
	word32 ecx_1467
	word32 r11d_1468
	word32 r12d_1469
	byte r12b_1470
	word32 edx_1471
	byte dl_1472
	byte r11b_1473
	word16 dx_1474
	word64 r10_1475
	byte dil_1476
	byte sil_1477
	word64 rdi_1451
	call mbrtowc (retsize: 8; depth: 256)
		uses: al_1423,bLoc61_1415,bLoc62_1406,bLoc63_158,bLoc68,bLocC0_151,bLocC5_118,bLocD8_119,C_1404,cl_605,CZ_687,dil_569,dl_1432,dwLoc68_38,dwLocA8_662,dwLocB0_1390,dwLocB8_563,dwLocC4_117,dx_1433,eax_1422,ebp_594,ebx_1409,ecx_607,edi_568,edx_1431,esi_567,fs_564,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1389,qwLoc60_1407,qwLoc70_1411,qwLoc78_1405,qwLoc80_96,qwLoc88_114,qwLoc90_115,qwLoc98_120,qwLocA0_39,qwLocA8_1416,qwLocB0_1410,qwLocB8_1418,qwLocC0_116,qwLocD0_34,qwLocD8_113,qwLocE8,qwLocF0,qwLocF8,r10_577,r11_1398,r11b_1392,r11d_1391,r12_1412,r12b_1414,r12d_1413,r13_1420,r14_1427,r14d_1428,r15_1429,r8_1396,r8d_1393,r9_1397,r9d_1395,rax_1421,rbp_593,rbx_1419,rcx_1425,rdi_1426,rdx_1430,rsi_1435,rsp_601,SCZO_1434,sil_566,SZO_1403,Z_1388
		defs: al_1457,C_1456,cl_1466,CZ_1458,dil_1476,dl_1472,dx_1474,eax_1454,ebp_1464,ebx_1447,ecx_1467,edi_1461,edx_1471,esi_1462,fs_1453,r10_1475,r11_1459,r11b_1473,r11d_1468,r12_1444,r12b_1470,r12d_1469,r13_1442,r14_1439,r14d_1440,r15_1437,r8_1465,r8d_1441,r9_1463,r9d_1448,rax_1450,rbp_1445,rbx_1446,rcx_1438,rdi_1451,rdx_1443,rsi_1452,rsp_1436,SCZO_1449,sil_1477,SZO_1455,Z_1460
	branch rax_1450 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E30E:
	r12d_1034 = (word32) r12b_1035
	rax_1024 = rbx_1446
	r11b_1007 = (byte) (word32) r11b_1007 (alias)
	*r8Out = r13_1442
	r12b_1035 = (byte) r12d_1034 (alias)
	dl_1291 = (byte) (uint64) ((word32) (uint64) r12d_1469 ^ 0x00000001) (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E157:
	branch rax_1450 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E350:
	r12d_1034 = (word32) r12b_1035
	rax_1024 = rbx_1446
	r12b_1035 = (byte) r12d_1034 (alias)
	r11b_1007 = (byte) (word32) r11b_1007 (alias)
	*r8Out = r13_1442
	dl_1291 = 0x01 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E161:
	branch rax_1450 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r10 r12d r13 r14 r15 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(8)

l000000000040E391:
	r12d_1034 = (word32) r12b_1035
	word64 r10_1715
	*r10Out = r15_1437
	rsi_1027 = r14_1439
	rax_1024 = rbx_1446
	*r8Out = r13_1442
	r12b_1035 = (byte) r12d_1034 (alias)
	r11b_1007 = (byte) (word32) r11b_1007 (alias)
	branch r15_1038 <=u r14_1439 l000000000040E3FE
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3DB:
	branch Mem0[rdx_1443:byte] != 0x00 l000000000040E3F0
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3F0:
	rax_1024 = rax_1024 + 0x0000000000000001
	branch r15_1038 >u rbp_1031 + rax_1024 l000000000040E3E8
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E8:
	branch Mem0[r13_1833 + rax_1024:byte] == 0x00 l000000000040E3FE
// DataOut: fs r10 r11b r12b r12d r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3E1:
// DataOut: fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E3FE:
	dl_1291 = 0x01 (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E16B:
	branch bLocC5_108 == 0x00 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E172:
	branch dwLocC4_117 != 0x00000002 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E179:
	branch rax_1450 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r10 r12d r13 r15 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E17F:
	word64 rdx_1671 = 0x0000000000000001
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E190:
	rdi_1451 = DPB(rdi_1451, (word32) Mem0[r15_1437 + rdx_1671:byte], 0) (alias)
	byte cl_1691 = (byte) (rdi_1451 - 0x000000000000005B)
	branch cl_1691 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E19D:
	rdi_1451 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1691 & 0x000000000000002B) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E260:
	r11_1711 = r14_1037
// DataOut: fs r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:0x000000000000002B edi:0x0000002B ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040E1B6:
	rdx_1671 = rdx_1671 + 0x0000000000000001
	branch rdx_1671 != rax_1450 l000000000040E190
// DataOut: eax fs r10 r12d r13 r15 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000001 r11:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1BF:
	word64 rsp_1539
	word64 r15_1540
	word64 rcx_1541
	word64 r14_1542
	word32 r14d_1543
	word32 r8d_1544
	word64 r13_1545
	word64 rdx_1546
	word64 r12_1547
	word64 rbp_1548
	word64 rbx_1549
	word32 ebx_1550
	word32 r9d_1551
	byte SCZO_1552
	word64 rax_1553
	word64 rdi_1554
	word64 rsi_1555
	selector fs_1556
	word32 eax_1557
	byte SZO_1558
	byte C_1559
	byte al_1560
	byte CZ_1561
	word64 r11_1562
	byte Z_1563
	word32 edi_1564
	word32 esi_1565
	word64 r9_1566
	word32 ebp_1567
	word64 r8_1568
	byte cl_1569
	word32 ecx_1570
	word32 r11d_1571
	word32 r12d_1572
	byte r12b_1573
	word32 edx_1574
	byte dl_1575
	byte r11b_1576
	word16 dx_1577
	word64 r10_1578
	byte dil_1579
	byte sil_1580
	call iswprint (retsize: 8; depth: 256)
		uses: al_1457,bLoc61_1415,bLoc62_1406,bLoc63_158,bLoc68,bLocC0_151,bLocC5_118,bLocD8_119,C_1480,cl_1466,CZ_1458,dil_1476,dl_1472,dwLoc4C,dwLoc68_38,dwLocA8_662,dwLocB0_1390,dwLocB8_563,dwLocC4_117,dx_1474,eax_1454,ebp_1482,ebx_1447,ecx_1467,edi_1461,edx_1471,esi_1462,fs_1453,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1389,qwLoc60_1407,qwLoc70_1411,qwLoc78_1405,qwLoc80_96,qwLoc88_114,qwLoc90_115,qwLoc98_120,qwLocA0_39,qwLocA8_1416,qwLocB0_1410,qwLocB8_1418,qwLocC0_116,qwLocD0_34,qwLocD8_113,qwLocE8,qwLocF0,qwLocF8,r10_1475,r11_1459,r11b_1473,r11d_1468,r12_1444,r12b_1470,r12d_1469,r13_1442,r14_1439,r14d_1440,r15_1437,r8_1465,r8d_1441,r9_1463,r9d_1448,rax_1450,rbp_1481,rbx_1446,rcx_1438,rdi_1538,rdx_1443,rsi_1452,rsp_1436,SCZO_1535,sil_1477,SZO_1478,Z_1536
		defs: al_1560,C_1559,cl_1569,CZ_1561,dil_1579,dl_1575,dx_1577,eax_1557,ebp_1567,ebx_1550,ecx_1570,edi_1564,edx_1574,esi_1565,fs_1556,r10_1578,r11_1562,r11b_1576,r11d_1571,r12_1547,r12b_1573,r12d_1572,r13_1545,r14_1542,r14d_1543,r15_1540,r8_1568,r8d_1544,r9_1566,r9d_1551,rax_1553,rbp_1548,rbx_1549,rcx_1541,rdi_1554,rdx_1546,rsi_1555,rsp_1539,SCZO_1552,sil_1580,SZO_1558,Z_1563
	branch eax_1557 != 0x00000000 l000000000040E1DE
// DataOut: fs r10 r12d r13 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DA_1:
// DataOut: fs r10 r12d r13 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1DE:
	word64 rsp_1589
	word64 r15_1590
	word64 rcx_1591
	word64 r14_1592
	word32 r14d_1593
	word32 r8d_1594
	word64 r13_1595
	word64 rdx_1596
	word64 r12_1597
	word64 rbp_1598
	word64 rbx_1599
	word32 ebx_1600
	word32 r9d_1601
	byte SCZO_1602
	word64 rax_1603
	word64 rdi_1604
	word64 rsi_1605
	word32 eax_1607
	byte SZO_1608
	byte C_1609
	byte al_1610
	byte CZ_1611
	word64 r11_1612
	byte Z_1613
	word32 edi_1614
	word32 esi_1615
	word64 r9_1616
	word32 ebp_1617
	word64 r8_1618
	byte cl_1619
	word32 ecx_1620
	word32 r11d_1621
	word32 r12d_1622
	byte r12b_1623
	word32 edx_1624
	byte dl_1625
	byte r11b_1626
	word16 dx_1627
	word64 r10_1628
	byte dil_1629
	byte sil_1630
	call mbsinit (retsize: 8; depth: 256)
		uses: al_1560,bLoc61_1415,bLoc62_1406,bLoc63_158,bLoc68,bLocC0_151,bLocC5_118,bLocD8_119,C_1584,cl_1569,CZ_1561,dil_1579,dl_1575,dwLoc4C,dwLoc68_38,dwLocA8_662,dwLocB0_1390,dwLocB8_563,dwLocC4_117,dx_1577,eax_1557,ebp_1567,ebx_1587,ecx_1570,edi_1564,edx_1574,esi_1565,fs_1556,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_1389,qwLoc60_1407,qwLoc70_1411,qwLoc78_1405,qwLoc80_96,qwLoc88_114,qwLoc90_115,qwLoc98_120,qwLocA0_39,qwLocA8_1416,qwLocB0_1410,qwLocB8_1418,qwLocC0_116,qwLocD0_34,qwLocD8_113,qwLocE8,qwLocF0,qwLocF8,r10_1578,r11_1562,r11b_1576,r11d_1571,r12_1547,r12b_1573,r12d_1572,r13_1545,r14_1542,r14d_1543,r15_1540,r8_1568,r8d_1544,r9_1566,r9d_1551,rax_1585,rbp_1548,rbx_1586,rcx_1541,rdi_1581,rdx_1546,rsi_1555,rsp_1539,SCZO_1588,sil_1580,SZO_1582,Z_1583
		defs: al_1610,C_1609,cl_1619,CZ_1611,dil_1629,dl_1625,dx_1627,eax_1607,ebp_1617,ebx_1600,ecx_1620,edi_1614,edx_1624,esi_1615,fs_1606,r10_1628,r11_1612,r11b_1626,r11d_1621,r12_1597,r12b_1623,r12d_1622,r13_1595,r14_1592,r14d_1593,r15_1590,r8_1618,r8d_1594,r9_1616,r9d_1601,rax_1603,rbp_1598,rbx_1599,rcx_1591,rdi_1604,rdx_1596,rsi_1605,rsp_1589,SCZO_1602,sil_1630,SZO_1608,Z_1613
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r10 r12d r13 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:0x0000000000000000 r11:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:fp - 0x0000000000000048 edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0060(64) Local -0061(32) Local -0062(32) Local -0063(0) Local -0068(32) Local -0070(64) Local -0078(64) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00B0(64) Local -00B8(64) Local -00C0(0) Local -00C4(0) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E1EE:
	rsi_1027 = (uint64) r12d_1622
	r12d_1034 = (word32) r12b_1035
	esi_1116 = (word32) rsi_1027 (alias)
	r11b_1007 = (byte) (word32) r11b_1007 (alias)
	r12b_1035 = (byte) r12d_1034 (alias)
	rax_1024 = rbx_1599
	*r8Out = r13_1595
	dl_1291 = (byte) (uint64) ((word32) (uint64) esi_1116 ^ 0x00000001) (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E22D:
	branch rax_1024 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040E237:
	dl_1128 = dl_1291 & bLocD8_119
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rsi:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE24:
	word64 rsp_1320
	word64 rcx_1322
	word32 r14d_1324
	word32 r8d_1325
	word64 r13_1326
	word64 rdx_1327
	word64 r12_1328
	word32 ebx_1331
	word32 r9d_1332
	byte SCZO_1333
	word64 rax_1334
	word64 rdi_1335
	word32 eax_1338
	byte SZO_1339
	byte C_1340
	byte al_1341
	byte CZ_1342
	word64 r11_1343
	byte Z_1344
	word32 edi_1345
	word64 r9_1347
	word32 ebp_1348
	word64 r8_1349
	byte cl_1350
	word32 ecx_1351
	word32 r11d_1352
	word32 edx_1355
	byte dl_1356
	byte r11b_1357
	word16 dx_1358
	word64 r10_1359
	byte dil_1360
	byte sil_1361
	call __ctype_b_loc (retsize: 8; depth: 256)
		uses: al_677,bLoc61_559,bLoc62_556,bLoc63_158,bLoc68,bLocC0_151,bLocC5_118,bLocD8_119,C_681,cl_605,CZ_687,dil_569,dl_583,dwLoc68_38,dwLocA8_662,dwLocB0_554,dwLocB8_1319,dwLocC4_117,dx_584,eax_676,ebp_594,ebx_586,ecx_607,edi_568,edx_582,esi_567,fs_564,qwLoc08_4,qwLoc10_9,qwLoc18_15,qwLoc20_20,qwLoc28_23,qwLoc30_26,qwLoc40_49,qwLoc48_553,qwLoc60_557,qwLoc70_558,qwLoc78_555,qwLoc80_96,qwLoc88_114,qwLoc90_115,qwLoc98_120,qwLocA0_39,qwLocA8_1317,qwLocB0_1318,qwLocB8_663,qwLocC0_116,qwLocD0_34,qwLocD8_113,qwLocE8,qwLocF0,qwLocF8,r10_577,r11_672,r11b_666,r11d_665,r12_684,r12b_685,r12d_683,r13_682,r14_599,r14d_565,r15_600,r8_670,r8d_667,r9_671,r9d_669,rax_675,rbp_593,rbx_592,rcx_673,rdi_668,rdx_674,rsi_678,rsp_601,SCZO_1100,sil_566,SZO_679,Z_1101
		defs: al_1341,C_1340,cl_1350,CZ_1342,dil_1360,dl_1356,dx_1358,eax_1338,ebp_1348,ebx_1331,ecx_1351,edi_1345,edx_1355,esi_1346,fs_1337,r10_1359,r11_1343,r11b_1357,r11d_1352,r12_1328,r12b_1354,r12d_1353,r13_1326,r14_1323,r14d_1324,r15_1321,r8_1349,r8d_1325,r9_1347,r9d_1332,rax_1334,rbp_1329,rbx_1330,rcx_1322,rdi_1335,rdx_1327,rsi_1336,rsp_1320,SCZO_1333,sil_1361,SZO_1339,Z_1344
	word32 edx_1372 = (word32) Mem0[Mem0[rax_1334:word64] + DPB(rdx_1327, (word32) r12b_1035, 0) * 0x0000000000000002:word16]
	r11b_1007 = (byte) (uint64) r11d_1835 (alias)
	*r8Out = r8_1011
	rax_1024 = 0x0000000000000001
	dl_1291 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1372, (word16) edx_1372 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(8)

l000000000040DE61:
	dl_1128 = dl_1291 & bLocD8_119
	branch dl_1128 == 0x00 l000000000040DAF8
// DataOut: dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(32) Local -00D0(64) Local -00D8(0)

l000000000040DE6B:
	rax_1024 = rax_1024 + rbp_1031
	byte dil_1153 = (byte) (word32) bLocC5_108
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF0:
	branch dl_1128 != 0x00 l000000000040DE80
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE80:
	branch dil_1153 != 0x00 l000000000040DC40
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE89:
	branch rbx_1030 >=u r14_1037 l000000000040DE92
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE8E:
	Mem1259[rdi + rbx_1030:byte] = 0x5C
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE92:
	branch r14_1037 <=u rbx_1030 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DE9B:
	word64 rsi_1254 = (uint64) (DPB(esi_1116, (byte) (uint64) r12d_1034 >>u 0x06, 0) + 0x00000030)
	Mem1258[rdi + 0x0000000000000001 + rbx_1030:byte] = (byte) rsi_1254
	esi_1116 = (word32) rsi_1254 (alias)
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEAA:
	rsi_1027 = rbx_1030 + 0x0000000000000002
	branch r14_1037 <=u rsi_1027 l000000000040DEC5
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEB3:
	rsi_1027 = (uint64) ((word32) (uint64) (DPB(esi_1116, (byte) (uint64) r12d_1034 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1249[rdi + 0x0000000000000002 + rbx_1030:byte] = (byte) rsi_1027
	esi_1116 = (word32) rsi_1027 (alias)
// DataOut: dil dl fs r10 r11b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEC5:
	rbx_1030 = rbx_1030 + 0x0000000000000003
	r12b_1035 = (byte) (uint64) ((word32) (uint64) (r12d_1034 & 0x00000007) + 0x00000030) (alias)
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rsi:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF4:
	branch r11b_1007 == 0x00 l000000000040DED1
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEF9:
	branch rbx_1030 >=u r14_1037 l000000000040DF02
// DataOut: dil dl fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEFE:
	Mem1214[rdi + rbx_1030:byte] = 0x5C
// DataOut: dil dl fs r10 r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DF02:
	rbx_1030 = rbx_1030 + 0x0000000000000001
	r11b_1007 = 0x00 (alias)
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DED1:
	rbp_1031 = rbp_1031 + 0x0000000000000001
	branch rax_1024 <=u rbp_1031 l000000000040DB54
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEDE:
	branch rbx_1030 >=u r14_1037 l000000000040DEE7
// DataOut: dil dl fs r10 r11b r12b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE3:
	Mem1201[rdi + rbx_1030:byte] = r12b_1035
// DataOut: dil dl fs r10 r11b r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DEE7:
	r12d_1034 = (word32) Mem0[r8_1011 + rbp_1031:byte]
	r12b_1035 = (byte) r12d_1034 (alias)
	rbx_1030 = rbx_1030 + 0x0000000000000001
// DataOut: dil dl fs r10 r11b r12b r12d r14 r15 r8 r9 rax rbp rbx rcx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> sil:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DA2F:
	rax_1024 = DPB(rax_1828, (word32) r12b_1035, 0) (alias)
	switch (rax_1024) { l000000000040DD20 }
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD20:
	branch bLocD8_119 == 0x00 l000000000040E240
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(0) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E240:
	branch (bLoc68 & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAF8:
	branch al_150 == 0x00 l000000000040DB09
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DAFF:
	branch al_155 != 0x00 l000000000040DB2E
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E24E:
	rbp_1031 = rbp_1031 + 0x0000000000000001
// DataOut: fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD2B:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD36:
	branch rbx_1030 >=u r14_1037 l000000000040DD44
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD3B:
	Mem1092[rdi + rbx_1030:byte] = 0x5C
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD44:
	rax_1024 = rbx_1030 + 0x0000000000000001
	branch r15_1038 <=u rbp_1031 + 0x0000000000000001 l000000000040DD80
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD51:
	rsi_1027 = DPB(rsi_1027, (word32) Mem0[r8_1011 + 0x0000000000000001 + rbp_1031:byte], 0) (alias)
	branch (byte) (rsi_1027 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD5F:
	branch r14_1037 >u rax_1024 l000000000040E300
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040E300:
	Mem1090[rdi + rax_1024:byte] = 0x30
	rsi_1027 = rdi
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD68:
	branch r14_1037 <=u rbx_1030 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD71:
	Mem1088[rdi + 0x0000000000000002 + rbx_1030:byte] = 0x30
// DataOut: fs r10 r11b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD7B:
	rax_1024 = rbx_1030 + 0x0000000000000003
// DataOut: fs r10 r11b r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DD80:
	rbx_1030 = rax_1024
	r12d_1034 = 0x00000030 (alias)
	r12b_1035 = 0x30 (alias)
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB09:
	branch qwArg08 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB13:
	word64 rdx_974 = (uint64) r12d_1034
	rax_1024 = (uint64) (0x00000001 << (byte) ((uint64) ((word32) ((uint64) r12d_1034) & 0x0000001F)))
	branch (Mem0[qwArg08 + DPB(rdx_974, (word32) ((byte) rdx_974 >>u 0x05), 0) * 0x0000000000000004:word32] & (word32) rax_1024) != 0x00000000 l000000000040DB33
// DataOut: fs r10 r11b r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB2E:
	branch r11b_1007 == 0x00 l000000000040DB50
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB33:
	branch bLocC5_108 != 0x00 l000000000040DC40
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(64) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DC40:
	r11_1711 = r14_1037
	r13_1442 = r8_1011
// DataOut: fs r11 r13 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> sil:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0068(32) Local -0088(64) Local -0090(64) Local -00C4(64) Local -00D0(64)

l000000000040DB3E:
	branch rbx_1030 >=u r14_1037 l000000000040DB4C
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB43:
	Mem867[rdi + rbx_1030:byte] = 0x5C
	rax_1024 = rdi
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB4C:
	rbx_1030 = rbx_1030 + 0x0000000000000001
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB50:
	rbp_1031 = rbp_1031 + 0x0000000000000001
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB54:
	*r9Out = r9_141
	branch rbx_1030 >=u r14_1037 l000000000040DB62
// DataOut: fs r10 r12b r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB59:
	Mem752[rdi + rbx_1030:byte] = r12b_1035
	rax_1024 = rdi
// DataOut: fs r10 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB62:
	al_1912 = rbp_1031 != r15_1038
	rbx_1030 = rbx_1030 + 0x0000000000000001
	rax_1828 = DPB(rax_1024, al_1912, 0) (alias)
	branch r15_1038 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB76:
	byte al_546 = Mem0[r8_1011 + rbp_1031:byte] != 0x00
	rax_1828 = DPB(rax_1828, al_546, 0) (alias)
	branch al_546 != 0x00 l000000000040D9A8
// DataOut: fs r10 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -004C(64) Local -0063(0) Local -0068(32) Local -0080(0) Local -0088(64) Local -0090(64) Local -0098(0) Local -00A0(64) Local -00C0(0) Local -00C4(0) Local -00C5(0) Local -00D0(64) Local -00D8(0)

l000000000040DB86:
	r11_1711 = r14_1037
	*r11Out = r11_1711
	r13_1442 = r8_1011
	branch rbx_1030 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(0) Local -00C5(0) Local -00D0(64)

l000000000040DB91:
	branch dwLocC4_117 != 0x00000002 l000000000040DBA3
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DB98:
	branch bLocC5_108 != 0x00 l000000000040DC46
// DataOut: fs r10 r11 r13 r15 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0068(32) Local -0088(64) Local -0090(64) Local -0098(0) Local -00C4(64) Local -00C5(0) Local -00D0(64)

l000000000040DC46:
	word32 ebp_365
	word64 r8_366
	word64 r9_367
	word64 r10_368
	word64 r11_369
	word32 r12d_370
	rax_268 = fn000000000040D8A0(r15_1038, r13_1442, r11_1711, rdi, (uint64) dwLocC4_117, (word32) (uint64) ((word32) (uint64) r9d & 0xFFFFFFFD), fs_1000, 0x0000000000000000, qwLoc88_114, qwLoc90_115, out ebp_365, out r8_366, out r9_367, out r10_368, out r11_369, out r12d_370)
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64)

l000000000040DBA3:
	branch bLocC5_108 != 0x00 l000000000040DBE4
// DataOut: fs r10 r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0098(0) Local -00D0(64)

l000000000040DBAA:
	branch qwLoc98_120 == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r10 r11 r8 r9 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -0098(64) Local -00D0(64)

l000000000040DBB2:
	byte al_460 = (byte) (word32) Mem0[qwLoc98_120:byte]
	branch al_460 == 0x00 l000000000040DBE4
// DataOut: al fs r10 r11 r8 r9 rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:Test(NE,Z) rdi:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBBE:
	word64 rdx_467 = qwLoc98_120 - rbx_1030
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBD0:
	branch r14_1037 <=u rbx_1030 l000000000040DBD8
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBD5:
	Mem490[rdi + rbx_1030:byte] = al_460
// DataOut: fs r10 r11 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBD8:
	rbx_1030 = rbx_1030 + 0x0000000000000001
	al_460 = (byte) (word32) Mem0[rdx_467 + rbx_1030:byte] (alias)
	branch al_460 != 0x00 l000000000040DBD0
// DataOut: al fs r10 r11 r8 r9 rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rcx:rdi rdi:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBE4:
	rax_268 = rbx_1030
	branch rbx_1030 >=u r14_1037 l000000000040DC86
// DataOut: fs r10 r11 r8 r9 rax rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64) Local -00D0(64)

l000000000040DBF0:
	Mem451[rdi + rbx_1030:byte] = 0x00
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:rdx al:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32) Local -0040(64)

l000000000040DC86:
	branch (rax_48 ^ Mem0[fs_1000:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0028(32)

l000000000040E423:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040DC9D:
	word32 ebp_292
	*ebpOut = (word32) rbp
	word32 r12d_295
	*r12dOut = (word32) r12
	return rax_268
// DataOut: ebp fs r10 r11 r12d r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000F8 r15:<invalid> r14:<invalid> r13:rdx rbx:<invalid> rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r12:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040D8A0_exit:
// DataOut: ebp r10 r11 r12d r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r15:r15 r14:r14 r13:r13 rbx:rbx rax:<invalid> r11:<invalid> eax:<invalid> r9:<invalid> rbp:rbp r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r12:r12 cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -248(fp):0x0000000000000000 -240(fp):<invalid> -232(fp):<invalid> -216(fp):<invalid> -208(fp):rdi -197(fp):<invalid> -196(fp):<invalid> -192(fp):<invalid> -184(fp):<invalid> -176(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):r9d -99(fp):<invalid> -98(fp):r12b -97(fp):r11b -96(fp):<invalid> -72(fp):0x0000000000000000 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E450(word64 rcx, word64 rdx, word32 edi, word64 r11, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15 rcx rdx
// LiveOut: ebx r10 r11 r12b r15b r8 r9 rax
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040E450_entry:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 r12_188 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E495:
	word64 r14_178 = (uint64) (rdi + 0x0000000000000001)
	branch r12_188 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E5E0:
	word64 r8_216
	word64 rax_217 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, r12_188, out r8_216)
	Mem221[0x000000000061A5D8:word64] = rax_217
	r12_188 = rax_217
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4B0:
	word64 r8_205
	word64 rax_206 = fn0000000000410C90(rdx, r14_178 << 0x0000000000000004, 0x0000000000000000, out r8_205)
	word64 rsi_207 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_208 = Mem0[0x000000000061A5E8:word64]
	Mem212[0x000000000061A5D8:word64] = rax_206
	Mem213[rax_206:word64] = rsi_207
	Mem214[rax_206 + 0x0000000000000008:word64] = rdi_208
	r12_188 = rax_206
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000078 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4D6:
	word64 rdi_191 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_191 << 0x0000000000000004) + r12_188, 0x0000000000000000, r14_178 - rdi_191 << 0x0000000000000004)
	Mem200[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(0)

l000000000040E4FA:
	word64 r12_56 = r12_188 + (r15_6 << 0x0000000000000004)
	word32 ebp_55 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_60 = (uint64) Mem0[r11:word32]
	word64 r11_64 = Mem0[r12_56:word64]
	word64 r14_108 = Mem0[r12_56 + 0x0000000000000008:word64]
	Mem66[fp - 0x0000000000000068:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_67 = Mem66[rcx + 0x0000000000000028:word64]
	word64 rcx_72 = Mem66[fp - 0x0000000000000050:word64]
	word64 rdx_73 = Mem66[fp - 0x0000000000000058:word64]
	Mem77[fp - 0x0000000000000078:word64] = r11 + 0x0000000000000008
	Mem79[fp - 0x0000000000000070:word64] = rax_67
	Mem80[fp - 0x0000000000000040:word64] = r11_64
	word64 rbp_68 = (uint64) (ebp_55 | 0x00000001)
	word32 ebp_85
	word64 r8_86
	word64 r9_87
	word64 r10_88
	word64 r11_89
	word32 r12d_90
	word64 rax_91 = fn000000000040D8A0(rcx_72, rdx_73, r11_64, r14_108, r8_60, (word32) (uint64) (word32) rbp_68, fs, qwArg00, qwArg08, qwArg10, out ebp_85, out r8_86, out r9_87, out r10_88, out r11_89, out r12d_90)
	word64 r11_93 = Mem80[fp - 0x0000000000000040:word64]
	*r11Out = r11_93
	branch r11_93 >u rax_91 l000000000040E5BF
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> cl:<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E554:
	Mem144[r12_56:word64] = rax_91 + 0x0000000000000001
	word64 rsi_140 = rax_91 + 0x0000000000000001
	branch r14_108 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E565:
	Mem172[fp - 0x0000000000000040:word64] = rax_91 + 0x0000000000000001
	free(r14_108)
	rsi_140 = Mem172[fp - 0x0000000000000040:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: Local -0008(64)

l000000000040E577:
	Mem148[fp - 0x0000000000000040:word64] = rsi_140
	word64 rax_149 = fn0000000000410C40(rsi_140, rsi_140)
	Mem150[r12_56 + 0x0000000000000008:word64] = rax_149
	word64 r8_153 = (uint64) Mem150[r11_93:word32]
	word64 rcx_154 = Mem150[fp - 0x0000000000000050:word64]
	word64 rdx_157 = Mem150[fp - 0x0000000000000058:word64]
	word64 rsi_158 = Mem150[fp - 0x0000000000000040:word64]
	Mem160[fp - 0x0000000000000068:word64] = Mem150[rcx + 0x0000000000000030:word64]
	word64 rax_161 = Mem160[rcx + 0x0000000000000028:word64]
	Mem162[fp - 0x0000000000000078:word64] = r11 + 0x0000000000000008
	Mem163[fp - 0x0000000000000070:word64] = rax_161
	word32 ebp_164
	word64 r8_165
	word64 r9_166
	word64 r10_167
	word64 r11_168
	word32 r12d_169
	fn000000000040D8A0(rcx_154, rdx_157, rsi_158, rax_149, r8_153, (word32) (uint64) ebp_85, fs, qwArg00, qwArg08, qwArg10, out ebp_164, out r8_165, out r9_166, out r10_167, out r11_168, out r12d_169)
	r14_108 = rax_149
// DataOut: fs r10 r11 r14 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040E5BF:
	Mem111[rbp_68:word32] = (word32) (uint64) Mem80[fp - 0x0000000000000044:word32]
	word32 ebx_117
	*ebxOut = (word32) Mem111[fp - 0x0000000000000030:word64]
	byte r12b_122
	*r12bOut = (byte) Mem111[fp - 0x0000000000000020:word64]
	byte r15b_131
	*r15bOut = (byte) Mem111[fp - 0x0000000000000008:word64]
	return r14_108
// DataOut: ebx fs r10 r11 r12b r15b r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:r11 + 0x0000000000000008 rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E450_exit:
// DataOut: ebx r10 r11 r12b r15b r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -120(fp):r11 + 0x0000000000000008 -112(fp):<invalid> -104(fp):<invalid> -88(fp):rsi -80(fp):rdx -68(fp):eax -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word64 fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: r12 rbp rbx rsp
fn000000000040E600_entry:
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	word64 rdi_21 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61A_1:
	rdi_21 = rdi
// DataOut: fs r10 r11 r12d r13b r14 r15 r8 r9 rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l000000000040E61E:
	word64 rax_27 = fn0000000000410E00(0x0000000000000038, rdi_21)
	Mem28[r11:word32] = r12d_17
	return rax_27
// DataOut: ebx fs r10 r11 r13b r14 r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rax:<invalid> r12:<invalid> rdi:0x000000000061B320 rbx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040E600_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rax:<invalid> r12:r12 rdi:<invalid> rbx:rbx rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
	rax_12 = rdi
// DataOut: ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return (word32) (uint64) Mem0[rax_12:word32]
// DataOut: eax ebx fs r10 r11 r12 r13 r13b r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: ebx esi fs r10 r11 r15 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: ebx esi fs r10 r11 r15 r9 rax rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: ebx esi fs r10 r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



word64 fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut: rsi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: ebx edx esi fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp rdi sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl ebx edx fs r10 r11 r12 r13b r14 r15 r8 r9 rax rbp sil xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_25 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem42[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_25) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_25)
	return rsi_20
// DataOut: ebx fs r10 r11 r12 r13b r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:<invalid> sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rcx rdi rdx rsi
// LiveOut: r10 r11 r8 r9 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rcx rdi rdx rsi rsp
fn000000000040E6F0_entry:
// DataOut: fs r11 r8 rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	word64 rbx_28 = r8
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E712_1:
	rbx_28 = 0x000000000061B320
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000040E716:
	__errno_location()
	word32 ebp_58
	word64 r8_59
	word64 r9_60
	word64 r10_61
	word64 r11_62
	word32 r12d_63
	word64 rax_64 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rbx_28 + 0x0000000000000008, Mem0[rbx_28 + 0x0000000000000028:word64], Mem0[rbx_28 + 0x0000000000000030:word64], out ebp_58, out r8_59, out r9_60, out r10_61, out r11_62, out r12d_63)
	Mem66[rsi:word32] = r12d_63
	return rax_64
// DataOut: fs r10 r11 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040E6F0_exit:
// DataOut: r10 r11 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> r15:r15 r14:r14 r13:r13 rbx:rbx r12:r12 rbp:rbp r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):rdi -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn000000000040E930(word64 r11, word64 r15, selector fs, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: ebx r10 r11 r15 r9 rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
	*r15Out = r15
	*rbpOut = rbp
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E93F_thunk_fn000000000040E450:
	word32 ebx_14
	word64 r8_15
	word64 r9_16
	word64 r10_17
	word64 r11_18
	byte r12b_19
	byte r15b_20
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_14, out r8_15, out r9_16, out r10_17, out r11_18, out r12b_19, out r15b_20)
	return ebx_14
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040E930_exit:
// DataOut: ebx r10 r11 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040E970(word32 esi, word32 edi, word64 r11, word64 r15, selector fs, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r15
// LiveOut: r10 r11 r15 r9 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
	*r15Out = r15
// DataOut: edi esi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000058)
	word32 ebx_25
	word64 r8_26
	word64 r9_27
	word64 r10_28
	word64 r11_29
	byte r12b_30
	byte r15b_31
	fn000000000040E450(fp - 0x0000000000000058, 0xFFFFFFFFFFFFFFFF, (word32) (uint64) (word32) (uint64) edi, r11, r15, fs, out ebx_25, out r8_26, out r9_27, out r10_28, out r11_29, out r12b_30, out r15b_31)
	return fp + 0x0000000000000008
// DataOut: fs r10 r11 r15 r9 rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r10 r11 r15 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn000000000040EAB0(word64 r11, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
	*r15Out = r15
	*rbpOut = rbp
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_34 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32]
	byte cl_18 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem53[fp - 0x0000000000000040 + r8_15 * 0x0000000000000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_34 >>u cl_18) ^ 0x00000001) & 0x00000001) << cl_18) ^ r9d_34)
	word32 ebx_57
	word64 r8_58
	word64 r9_59
	word64 r10_60
	word64 r11_61
	byte r12b_62
	byte r15b_63
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_57, out r8_58, out r9_59, out r10_60, out r11_61, out r12b_62, out r15b_63)
	word64 rsp_66
	*rspOut = fp + 0x0000000000000008
	return rbx
// DataOut: fs r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r10 r11 r12 r12b r13 r14 r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> r9:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word32 edi, word64 r11, word64 r15, selector fs, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r15
// LiveOut: r11 r15
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
	*r15Out = r15
// DataOut: edi fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word32 ebx_9
	word64 r8_10
	word64 r9_11
	word64 r10_12
	word64 r11_13
	byte r12b_14
	byte r15b_15
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, edi, r11, r15, fs, out ebx_9, out r8_10, out r9_11, out r10_12, out r11_13, out r12b_14, out r15b_15)
	return r11_13
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 r11, word64 r15, selector fs, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r10Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r15
// LiveOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
	*r15Out = r15
	*rbxOut = rbx
	*rbpOut = rbp
	*r12Out = r12
	*r13Out = r13
	*r14Out = r14
// DataOut: fs r11 r15 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 r15 rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC21_thunk_fn000000000040E450:
	word32 ebx_14
	word64 r8_15
	word64 r9_16
	word64 r10_17
	word64 r11_18
	byte r12b_19
	byte r15b_20
	return fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, 0x00000000, r11, r15, fs, out ebx_14, out r8_15, out r9_16, out r10_17, out r11_18, out r12b_19, out r15b_20)
// DataOut: ebx fs r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:<invalid>

fn000000000040EC10_exit:
// DataOut: ebx r10 r11 r12 r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid>



void fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC30_entry:
// DataOut: rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC30:
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC40:
	word64 rsp_45
	word64 r12_46
	word64 rdx_47
	byte SZO_48
	byte C_49
	word64 rbp_50
	word64 rdi_51
	byte Z_53
	word64 rsi_54
	word32 ecx_55
	word64 rax_56
	word32 edx_57
	byte dl_59
	byte SCZO_60
	word64 rcx_58
	word64 rbx_52
	call __ctype_tolower_loc (retsize: 8; depth: 32)
		uses: C_8,dl,ecx,edx,qwLoc08_4,qwLoc10_11,qwLoc18_16,r12_43,rax,rbp_13,rbx_17,rcx,rdi,rdx,rsi,rsp_14,SCZO,SZO_6,Z_7
		defs: C_49,dl_59,ecx_55,edx_57,r12_46,rax_56,rbp_50,rbx_52,rcx_58,rdi_51,rdx_47,rsi_54,rsp_45,SCZO_60,SZO_48,Z_53
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC50:
	rcx_58 = DPB(rcx_58, (word32) Mem0[r12_46 + rbx_52:byte], 0) (alias)
	Mem69[rbp_50 + rbx_52:byte] = (byte) (uint64) Mem0[Mem0[rax_56:word64] + rcx_58 * 0x0000000000000004:word32]
	rbx_52 = rbx_52 - 0x0000000000000001
	branch rbx_52 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040EC69:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: r12 rbp rbx rsp
fn000000000040EC80_entry:
// DataOut: fs r11 r13 r14 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EC90:
	word64 rsp_45
	word64 r12_46
	word64 rdx_47
	byte SZO_48
	byte C_49
	word64 rdi_51
	byte Z_53
	word64 rsi_54
	word32 ecx_55
	word64 rax_56
	word32 edx_57
	byte dl_59
	byte SCZO_60
	word64 rcx_58
	word64 rbx_52
	call __ctype_toupper_loc (retsize: 8; depth: 32)
		uses: C_8,dl,ecx,edx,qwLoc08_4,qwLoc10_11,qwLoc18_16,r12_43,rax,rbp_13,rbx_17,rcx,rdi,rdx,rsi,rsp_14,SCZO,SZO_6,Z_7
		defs: C_49,dl_59,ecx_55,edx_57,r12_46,rax_56,rbp_50,rbx_52,rcx_58,rdi_51,rdx_47,rsi_54,rsp_45,SCZO_60,SZO_48,Z_53
// DataOut: fs r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:rdx - 0x0000000000000001 -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECA0:
	rcx_58 = DPB(rcx_58, (word32) Mem0[r12_46 + rbx_52:byte], 0) (alias)
	Mem69[rbp_13 + rbx_52:byte] = (byte) (uint64) Mem0[Mem0[rax_56:word64] + rcx_58 * 0x0000000000000004:word32]
	rbx_52 = rbx_52 - 0x0000000000000001
	branch rbx_52 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r12 r13 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l000000000040ECB9:
	return rbp_13
// DataOut: fs r11 r13 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn000000000040EC80_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rax:rdi r12:r12 ecx:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word64 rsi, byte dil, selector fs, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil fs rax rcx rdx rsi
// LiveOut: r11 r8 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn000000000040ECD0_entry:
	*r8Out = r8
	*r11Out = r11
// DataOut: dil fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_29 = Mem0[rax + 0x0000000000000030:word64]
	word64 r12_157 = rsi
	word64 rbx_216 = rcx
	word64 rsi_31 = Mem0[fs:0x00000028:word64]
	word32 esi_35 = (word32) (uint64) Mem0[rax_29 + 0x0000000000000008:word32]
	branch esi_35 <= 0x0000000C l000000000040EEE0
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64) Local -04C8(32) Local -04F9(32)

l000000000040EEE0:
	rax_29 = 0x000000000000000C
	branch (word32) (uint64) esi_35 == 0x00000000 l000000000040EEEE
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEB_1:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEEE:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED26:
// DataOut: fs r10 r11 r12 r8 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):esi -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED2B:
	word64 rax_107
	word32 eax_51 = (word32) Mem0[rcx:byte]
	word64 rax_220 = DPB(rax_29, eax_51, 0)
	byte al_209 = (byte) eax_51
	word64 r13_158 = 0x0000000000000000
	branch al_209 == 0x00 l000000000040F053
// DataOut: al fs r10 r11 r12 r13 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED39:
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> -1273(fp):dil -1272(fp):r8 -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED85:
	branch al_209 != 0x25 l000000000040ED50
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED50:
	branch rdx - r13_158 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED60:
	branch r12_157 == 0x0000000000000000 l000000000040ED6D
// DataOut: al fs r11 r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED65:
	Mem683[r12_157:byte] = al_209
	r12_157 = r12_157 + 0x0000000000000001
// DataOut: fs r11 r12 r13 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED6D:
	r13_158 = r13_158 + 0x0000000000000001
	word64 r8_682
	*r8Out = rbx_216
// DataOut: fs r11 r12 r13 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED89:
	word32 r9d_297 = (word32) dil
	byte r9b_299 = (byte) r9d_297
	word64 r11_301
	*r11Out = 0x0000000000000000
	word32 r11d_302 = 0x00000000
// DataOut: fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED94:
	rbx_216 = rbx_216 + 0x0000000000000001
	byte dil_315 = (byte) (word32) Mem0[rbx_216:byte]
	byte SZO_318 = cond(dil_315 - 0x30)
	branch dil_315 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA1:
	branch SZO_318 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDD0:
	branch dil_315 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE70:
	branch dil_315 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE7A:
	r11d_302 = (int32) dil_315
	*r11Out = DPB(r11_301, r11d_302, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDDA:
	r9d_297 = 0x00000001 (alias)
	r9b_299 = 0x01 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDA3:
	branch dil_315 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDE8:
	branch dil_315 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDEE:
	word64 rdx_351 = (uint64) ((int32) dil_315 - 0x00000030)
	word32 ebp_350 = 0xFFFFFFFF
	branch (word32) rdx_351 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDFF:
	word64 rbp_596 = 0x0000000000000000
	ebp_350 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:0xFFFFFFFF -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE28:
	branch ebp_350 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE08:
	word32 edx_634 = (int32) Mem0[rbx_216:byte]
	word64 rdx_635 = DPB(rdx_351, edx_634, 0)
	byte dl_636 = (byte) edx_634
	branch ebp_350 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE88:
	branch dl_636 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE8D:
	rbp_596 = 0x000000007FFFFFFF
	ebp_350 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_596 * 0x0000000000000005, 0) (alias)
	ebp_350 = rdx_635 - 0x0000000000000030 + rcx * 0x0000000000000002
	rbp_596 = DPB(rbp_596, ebp_350, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE30:
	rbp_596 = 0x000000007FFFFFFF
	ebp_350 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE15:
	rbx_216 = rbx_216 + 0x0000000000000001
	dil_315 = (byte) (word32) Mem0[rbx_216:byte] (alias)
	rdx_351 = (uint64) ((int32) dil_315 - 0x00000030)
	branch (word32) rdx_351 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE40:
	branch dil_315 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE4A:
	branch dil_315 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rcx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EEC8:
	rbx_216 = rbx_216 + 0x0000000000000001
	dil_315 = (byte) (word32) Mem0[rbx_216:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> r11d:<invalid> r9:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE52:
	word64 r8_384
	branch dil_315 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040FF4D:
	r8_384 = rbx_216
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE60:
	switch (DPB(rdx_351, (word32) dil_315, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040FEFB:
	r8_384 = r11_301 - 0x0000000000000001
	dil_315 = (byte) (word32) Mem0[rbx_216 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F39F:
	word64 r15_393
	word64 rcx_390
	branch dil_315 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r8 r9b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0B2:
	word64 rax_558 = r8_384 - 0x0000000000000001
	word32 ecx_563 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0C1:
	r15_393 = rax_558
	rax_558 = rax_558 - 0x0000000000000001
	ecx_563 = (word32) (uint64) (ecx_563 + 0x00000001) (alias)
	branch Mem0[rax_558 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r15 r9b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D1:
	rcx_390 = (int64) ecx_563
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F3A9:
	r15_393 = r8_384
	rcx_390 = 0x0000000000000001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0D7:
	word64 r8_392
	*r8Out = r8_384
	word64 rax_397 = 0x0000000000000000
	byte al_399 = 0x00
	branch ebp_350 < 0x00000000 l000000000040F0E1
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0DE_1:
	rax_397 = (uint64) ebp_350 (alias)
	al_399 = (byte) ebp_350 (alias)
// DataOut: al ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E1:
	rax_220 = DPB(rax_397, (int16) al_399, 0) (alias)
	word64 rbx_416 = rax_220
	branch rcx_390 <u rax_220 l000000000040F0ED
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> ax:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0E9_1:
	rbx_416 = rcx_390
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0ED:
	branch rbx_416 >=u rdx - r13_158 l000000000040EE98
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EE98:
	rax_107 = 0x0000000000000000
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F0F9:
	branch r12_157 == 0x0000000000000000 l000000000040F16E
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F0FE:
	branch rax_220 <=u rcx_390 l000000000040F144
// DataOut: ebp fs r11 r11d r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F103:
	word64 rbp_513 = (int64) ebp_350 - rcx_390
	branch r11d_302 == 0x00000030 l000000000040F1C1
// DataOut: fs r11 r12 r13 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04D8(64) Local -04E0(8) Local -04F0(64) Local -04F9(32)

l000000000040F1C1:
	r12_157 = r12_157 + rbp_513
	rax_220 = memset(r12_157, 0x0000000000000030, rbp_513)
	r9b_299 = (byte) (uint64) r9d_297 (alias)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F125:
	r12_157 = r12_157 + rbp_513
	rax_220 = memset(r12_157, 0x0000000000000020, rbp_513)
	r9b_299 = (byte) (uint64) r9d_297 (alias)
// DataOut: fs r11 r12 r13 r14 r15 r8 r9b rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F144:
	branch r9b_299 == 0x00 l000000000040F180
// DataOut: fs r11 r12 r13 r14 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04E0(64) Local -04F0(64) Local -04F9(32)

l000000000040F180:
	rax_220 = memcpy(r12_157, r15_393, rcx_390)
// DataOut: fs r11 r12 r13 r14 r8 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F15C:
	rax_220 = fn000000000040EC80(rax_220, rcx_390, r15_393, r12_157)
// DataOut: fs r11 r12 r13 r14 r8 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16B:
	r12_157 = r12_157 + rcx_390
// DataOut: fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F16E:
	rcx = rcx_390
	word64 r8_438
	*r8Out = r8_384
	r13_158 = r13_158 + rbx_416
// DataOut: fs r11 r12 r13 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040ED74:
	word32 eax_259 = (word32) Mem0[rax_220 + 0x0000000000000001:byte]
	rax_220 = DPB(rax_220, eax_259, 0) (alias)
	al_209 = (byte) eax_259 (alias)
	rbx_216 = rax_220 + 0x0000000000000001
	branch al_209 == 0x00 l000000000040F050
// DataOut: al fs r11 r12 r13 r14 r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040F050:
// DataOut: fs r10 r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F053:
	branch r12_157 == 0x0000000000000000 l000000000040F191
// DataOut: fs r10 r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F05C:
	branch rdx == 0x0000000000000000 l000000000040F191
// DataOut: fs r11 r12 r13 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F191:
	rax_107 = r13_158
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040F065:
	Mem184[r12_157:byte] = 0x00
	rax_107 = r13_158
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64)

l000000000040EE9A:
	branch (rsi_31 ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004105EA
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004105EA:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EEB1:
	return rax_107
// DataOut: fs r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn000000000040ECD0_exit:
// DataOut: r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r10:rdx r12:r12 rbx:rbx rax:<invalid> rsi:<invalid> eax:<invalid> r13:r13 rbp:rbp r14:r14 r15:r15 rdx:<invalid> r8:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> ax:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> rdi:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000040EDA9:
	rbx_216 = rbx_216 + 0x0000000000000001
	dil_315 = (byte) (word32) Mem0[rbx_216:byte] (alias)
	SZO_318 = cond(dil_315 - 0x30) (alias)
	branch dil_315 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:0x0001 rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)

l000000000040EDC0:
	r11d_302 = (int32) dil_315
	*r11Out = DPB(r11_301, r11d_302, 0)
// DataOut: fs r11 r11d r12 r13 r14 r9b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000508 r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> edx:<invalid> rbp:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> ebp:<invalid> -1273(fp):dil -1272(fp):r8 -1264(fp):<invalid> -1256(fp):fp - 0x0000000000000447 -1248(fp):<invalid> -1240(fp):<invalid> -1224(fp):<invalid> -1220(fp):r9d -1216(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0040(64) Local -04F9(32)



word64 fn0000000000410600(word64 rax, word64 rdx, word64 rsi, word64 rdi, word32 r8d, selector fs, ptr64 & r8Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d rax rdi rdx rsi
// LiveOut: r11 r8 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w r11 r11b r11d r11w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: fs r15 r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 r8_23
	word64 r11_24
	return fn000000000040ECD0(rax, rdx, rsi, rdi, 0x00, fs, out r8_23, out r11_24)
// DataOut: fs r11 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: r11 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> rax:<invalid> eax:<invalid> r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> ax:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r13 r14 r15
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410A30:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168CC)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000410650:
	__fprintf_chk(rdi, 0x0000000000000001, 0x00000000004168C0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	__fprintf_chk(rdi, 0x0000000000000001, 0x0000000000416BA0)
	word64 rax_48 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word32 eax_51 = fputs_unlocked(rax_48, rdi)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:<invalid> eax:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l0000000000410A50:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64)

l00000000004107A1:
	__fprintf_chk(rdi, 0x0000000000000001, dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005))
	return fp
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004106BE:
	word64 rsp_107
	word64 r15_108
	word64 r14_109
	word64 r13_110
	word64 r12_111
	word64 r9_112
	word64 rbp_113
	word64 rdi_114
	word64 rbx_115
	word64 r8_116
	byte SCZO_117
	word64 rsi_118
	byte SZO_119
	byte C_120
	byte Z_121
	word64 rcx_122
	word64 rdx_123
	word32 edx_124
	word32 esi_125
	word32 eax_126
	word64 rax_127
	word32 edi_128
	word32 r8d_129
	byte CZ_130
	word64 r10_131
	word64 r11_132
	call Mem0[0x00416B48:word64] (retsize: 4; depth: 140)
		uses: C_31,CZ_53,eax_51,edi,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,qwLoc20_13,qwLoc28_18,qwLoc30_23,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,qwLoc78,qwLoc80,qwLoc88,r10,r11,r12_15,r13,r14,r15,r8_38,r8d,r9_33,rax_48,rbp_20,rbx_25,rcx_39,rdi_50,rdx_46,rsi_49,rsp_26,SCZO_52,SZO_32,Z_29
		defs: C_120,CZ_130,eax_126,edi_128,edx_124,esi_125,r10_131,r11_132,r12_111,r13_110,r14_109,r15_108,r8_116,r8d_129,r9_112,rax_127,rbp_113,rbx_115,rcx_122,rdi_114,rdx_123,rsi_118,rsp_107,SCZO_117,SZO_119,Z_121
	return rsp_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000088 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:0x00000000000007DD rcx:<invalid> rdx:0x0000000000000005 rsi:rdi rax:<invalid> eax:<invalid> rdi:<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r10:<invalid> r13:r13 r15:r15 r14:r14 -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_18 = (word32) (uint64) Mem0[rax:word32]
	branch eax_18 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_58 = (uint64) (eax_18 + 0x00000008)
	Mem60[rax_58:word32] = (word32) rax_58
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem49[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem49[rdx:word64]
	Mem55[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid>



void fn0000000000410B30(byte al, word64 rdx, word64 rsi, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al r11 rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410B30_entry:
// DataOut: al r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B30:
	branch al == 0x00 l0000000000410B7C
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410B45:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9
// LocalsOut: fp(64)

l0000000000410B7C:
	fn0000000000410AC0(fp - 0x00000000000000B8, rdx, rsi, rdi, fp - 0x00000000000000D0, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 216 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7

fn0000000000410B30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> -208(fp):0x00000020 -204(fp):0x00000030 -200(fp):fp + 0x0000000000000008 -192(fp):fp - 0x00000000000000B8 -152(fp):r8 -144(fp):r9 -136(fp):xmm0 -120(fp):xmm1 -104(fp):xmm2 -88(fp):xmm3 -72(fp):xmm4 -56(fp):xmm5 -40(fp):xmm6 -24(fp):xmm7



word64 fn0000000000410C40(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rbx rsp
fn0000000000410C40_entry:
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> rax:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64) Local -0008(32)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_32 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_32 <u rdi l0000000000410C7A
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem39[fp - 0x0000000000000010:word64] = rax_32
	fn0000000000410E50()
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	return rax_13
// DataOut: ebp ebx fs r10 r11 r12 r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdx:<invalid> rdi:rdi *s rsi -8(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	return 0x0000000000000000
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

l0000000000410C99:
	word64 rax_59 = realloc(rdi, rsi)
	branch rax_59 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_82 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_82 <u rsi l0000000000410CED
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem91[fp - 0x0000000000000010:word64] = rax_82
	fn0000000000410E50()
	word64 r8_95
	*r8Out = rdx
	word64 rcx_109 = Mem91[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_109 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_196 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_109 = (uint64) (rax_196 == 0x0000000000000000) + rax_196
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	rdx = (uint64) (0xFFFFFFFFAAAAAAAA % rdx)
	word64 rax_121 = (uint64) (0xFFFFFFFFAAAAAAAA /u rdx)
	branch rcx_109 >=u rax_121 l0000000000410D5C
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem134[fp - 0x0000000000000018:word64] = rax_121
	fn0000000000410E50()
	word64 rax_138 = Mem134[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_138 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_138 = 0x0000000000000080
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem180[rsi:word64] = rax_138
	rsi = rax_138
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_138 >u 0x00000000AAAAAAA9 l0000000000410DB7
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem155[fp - 0x0000000000000020:word64] = rax_138
	fn0000000000410E50()
	Mem157[fp - 0x0000000000000028:word64] = rsi
	return memset(fn0000000000410C40(rsi, rdi), 0x0000000000000000, rdi)
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// Terminates process

l0000000000410D87:
	rdx = rax_138 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_148 = rax_138 + rdx
	Mem151[rsi:word64] = rax_148
	rsi = rax_148
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x00000000AAAAAAA9 -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_109 = rcx_109 + (rcx_109 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rcx rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem110[rsi:word64] = rcx_109
	rsi = rcx_109 *s rdx
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r10 r11 r13 r13d r14 r15 r8 rbp rdi rdx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:<invalid> rdx:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	return rax_59
// DataOut: al ebp fs r10 r11 r13 r13d r14 r15 r8 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:rdx cl:<invalid> -8(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:rdx cl:<invalid> -8(fp):rbx



word64 fn0000000000410E00(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbp rbx rsi rsp
fn0000000000410E00_entry:
// DataOut: fs r10 r11 r12 r12d r13b r14 r14d r15 r8 r9 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	return memcpy(fn0000000000410C40(rsi, rsi), rdi, rsi)
// DataOut: eax fs r10 r11 r12 r12d r13b r14 r14d r15 r8 r9 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410E00_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rdi:<invalid> rbx:rbx rdx:rsi rsi:<invalid> rax:<invalid> -16(fp):rbx -8(fp):rbp



word64 fn0000000000410E30(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rax rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000410E30_entry:
// DataOut: fs r10 r11 r12 r13b r14 r14d r15 r8 r9 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_9 = DPB(rax, strlen(rdi), 0)
	word64 rsi_11
	*rsiOut = rax_9 + 0x0000000000000001
// DataOut: fs r10 r11 r12 r13b r14 r14d r15 r8 r9 rbp rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E41_thunk_fn0000000000410E00:
	return fn0000000000410E00(rax_9 + 0x0000000000000001, rdi)
// DataOut: eax fs r10 r11 r12 r13b r14 r14d r15 r8 r9 rax rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rsi:rax + 0x0000000000000001 -8(fp):rbx

fn0000000000410E30_exit:
// DataOut: eax rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -8(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



word32 fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebxOut, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebx r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rdi rsp
fn0000000000410E90_entry:
// DataOut: ebx edx fs r10 r11 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l0000000000410EBE_1:
// DataOut: fs r10 r11 r12 r14d r15 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32) Local -0040(64)

l0000000000410EC2:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_68
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: bl_42,C_34,CZ_25,ebp_29,ebx_40,edx,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_81 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EDF:
	r9_69 = DPB(r9_69, (word32) bl_68, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc40 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl fs r10 r11 r12 r14d r15 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410ED8:
	rax_81 = rax_81 + 0x0000000000000001
	bl_68 = (byte) (word32) Mem0[rax_81:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EEB:
	word32 eax_159
	branch bl_68 != 0x2D l0000000000410F08
// DataOut: fs r10 r11 r12 r14d r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F08:
	word64 rbp_242
	word32 ebp_240
	word32 edx_291
	word64 rax_203 = __errno_location()
	Mem205[rax_203:word32] = 0x00000000
	word64 rax_211 = DPB(rax_203, strtoul(rbp_50, r15_44, (uint64) r14d_46), 0)
	word64 r14_212 = Mem205[r15_44:word64]
	word64 rbx_214 = rax_211
	branch r14_212 == rbp_50 l0000000000410FE7
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp rbx rcx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FE7:
	branch r12_49 == 0x0000000000000000 l0000000000410EF0
// DataOut: fs r10 r11 r12 r14 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FF0:
	word32 edx_926 = (word32) Mem205[rbp_50:byte]
	byte dl_929 = (byte) edx_926
	branch dl_929 == 0x00 l0000000000410EF0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FFC:
	rbp_242 = 0x0000000000000000
	ebp_240 = 0x00000000 (alias)
	rbx_214 = 0x0000000000000001
	edx_291 = (word32) (uint64) edx_926 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_929, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041101F:
// DataOut: fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F3A:
	word32 eax_885 = (word32) (uint64) Mem205[rax_203:word32]
	branch eax_885 != 0x00000000 l0000000000410F68
// DataOut: eax fs r10 r11 r12 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F68:
	rbp_242 = 0x0000000000000001
	ebp_240 = 0x00000001 (alias)
	branch eax_885 != 0x00000022 l0000000000410EF0
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F76:
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F40:
	rbp_242 = 0x0000000000000000
	ebp_240 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F42:
	branch r12_49 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp fs r10 r11 r12 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F47:
	word32 edx_896 = (word32) Mem205[r15_44:byte]
	byte dl_899 = (byte) edx_896
	branch dl_899 != 0x00 l0000000000410F78
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F78:
	edx_291 = (word32) (uint64) edx_896 (alias)
	branch strchr(r12_49, DPB(r15_44, (int32) dl_899, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F94:
	word32 eax_317
	word32 ecx_312
	word64 rsi_300 = 0x0000000000000030
	word32 edx_309 = (word32) (uint64) edx_291
	branch strchr(r12_49, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FAE:
	byte al_855 = (byte) (word32) Mem205[0x0000000000000031:byte]
	branch al_855 == 0x44 l0000000000411262
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FBB:
	branch al_855 == 0x69 l000000000041124A
// DataOut: al dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041124A:
	word64 rcx_879 = (uint64) (Mem205[0x0000000000000032:byte] == 0x42)
	eax_317 = 0x00000400 (alias)
	ecx_312 = rcx_879 + 0x0000000000000001 + rcx_879
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FC3:
	branch al_855 == 0x42 l0000000000411262
// DataOut: dl ebp fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411262:
	ecx_312 = 0x00000002 (alias)
	eax_317 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FCB:
	ecx_312 = 0x00000001 (alias)
	eax_317 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FD5:
	word64 rdx_319 = (uint64) (edx_309 - 0x00000042)
	byte dl_322 = (byte) rdx_319
	branch dl_322 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410FDD:
	word32 edx_337
	word64 rdi_506
	switch (DPB(rdx_319, (word32) dl_322, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411054:
	branch rbx_214 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041105D:
	rbx_214 = rbx_214 * 0x0000000000000002
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411036:
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411064:
	branch rbx_214 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411077:
	rbx_214 = rbx_214 << 0x0000000000000009
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041107F:
	word64 rdi_753 = (int64) eax_317
	word64 rax_760 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_753)
	word32 esi_764 = 0x00000007
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110A6:
	word32 r8d_787
	branch rax_760 >=u rbx_214 l0000000000411097
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411097:
	rbx_214 = rbx_214 *s rdi_753
	r8d_787 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110AB:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_787 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041109E:
	rsi_300 = (uint64) (esi_764 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_787) (alias)
	esi_764 = (word32) rsi_300 (alias)
	branch esi_764 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110BA:
	word64 rdi_693 = (int64) eax_317
	word64 rax_700 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_693)
	word32 esi_704 = 0x00000008
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110E5:
	word32 r8d_727
	branch rax_700 >=u rbx_214 l00000000004110D2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110D2:
	rbx_214 = rbx_214 *s rdi_693
	r8d_727 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110EA:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_727 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110D9:
	rsi_300 = (uint64) (esi_704 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_727) (alias)
	esi_704 = (word32) rsi_300 (alias)
	branch esi_704 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004110F9:
	rsi_300 = (int64) eax_317
	word64 rax_640 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_644 = 0x00000004
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041110F:
	word32 r8d_667
	branch rax_640 <u rbx_214 l0000000000411271
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411271:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_667 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411118:
	rbx_214 = rbx_214 *s rsi_300
	r8d_667 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041111F:
	edx_337 = (word32) (uint64) (edx_337 | r8d_667) (alias)
	edi_644 = (word32) (uint64) (edi_644 - 0x00000001) (alias)
	branch edi_644 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411127:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041112C:
	rsi_300 = (int64) eax_317
	word64 rax_580 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_584 = 0x00000005
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411157:
	word32 r8d_607
	branch rax_580 >=u rbx_214 l0000000000411144
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411144:
	rbx_214 = rbx_214 *s rsi_300
	r8d_607 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041115C:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_607 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041114B:
	edx_337 = (word32) (uint64) (edx_337 | r8d_607) (alias)
	edi_584 = (word32) (uint64) (edi_584 - 0x00000001) (alias)
	branch edi_584 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041116B:
	rdi_506 = (int64) eax_317
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	word64 rax_553 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_506)
	branch rbx_214 >u rax_553 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411186:
	rbx_214 = rbx_214 *s rdi_506
	branch rax_553 <u rbx_214 l00000000004112A3
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004112A3:
	edx_337 = 0x00000001 (alias)
	rbx_214 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041119E:
	rdi_506 = (int64) eax_317
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	branch rbx_214 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_506) l0000000000411193
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411193:
	rsi_300 = 0xFFFFFFFFFFFFFFFF
	rbx_214 = rbx_214 *s rdi_506
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111B5:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	edx_337 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041121B:
	rsi_300 = (int64) eax_317
	word64 rax_453 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_300)
	word32 edi_457 = 0x00000003
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411231:
	word32 r8d_480
	branch rax_453 <u rbx_214 l0000000000411294
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411294:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_480 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411236:
	rbx_214 = rbx_214 *s rsi_300
	r8d_480 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041123D:
	edx_337 = (word32) (uint64) (edx_337 | r8d_480) (alias)
	edi_457 = (word32) (uint64) (edi_457 - 0x00000001) (alias)
	branch edi_457 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411245:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111C2:
	word64 rdi_386 = (int64) eax_317
	word64 rax_393 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_386)
	word32 esi_397 = 0x00000006
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111ED:
	word32 r8d_420
	branch rax_393 >=u rbx_214 l00000000004111DA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111DA:
	rbx_214 = rbx_214 *s rdi_386
	r8d_420 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111F2:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	r8d_420 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l00000000004111E1:
	rsi_300 = (uint64) (esi_397 - 0x00000001)
	edx_337 = (word32) (uint64) (edx_337 | r8d_420) (alias)
	esi_397 = (word32) rsi_300 (alias)
	branch esi_397 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411028:
	Mem284[rbp_242:word64] = rbx_214
	eax_159 = (word32) (uint64) ((word32) (uint64) ebp_240 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411201:
	branch rbx_214 >u 0x00000000FFFFFFFF l0000000000411283
// DataOut: ebp ecx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411283:
	rbx_214 = 0xFFFFFFFFFFFFFFFF
	edx_337 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:<invalid> rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411210:
	rbx_214 = rbx_214 << 0x000000000000000A
	edx_337 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 eax:0xFFFFFFFF rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000411038:
	rbp_242 = (uint64) (ebp_240 | edx_337)
	Mem354[r15_44:word64] = r14_212 + (int64) ecx_312
	ebp_240 = (word32) rbp_242 (alias)
	word32 eax_352 = (word32) (uint64) ((word32) (uint64) ebp_240 | 0x00000002)
	branch Mem354[rsi_300:byte] == 0x00 l000000000041104F
// DataOut: eax ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041104C_1:
	ebp_240 = eax_352
	rbp_242 = DPB(rbp_242, eax_352, 0) (alias)
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l000000000041104F:
// DataOut: ebp fs r10 r11 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410F4F:
	Mem243[rbp_242:word64] = rbx_214
	word32 ebx_251
	*ebxOut = (word32) rbx
	return (word32) (uint64) ebp_240
// DataOut: eax ebx fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000410EF0:
	eax_159 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0030(32)

l0000000000410EF5:
	word32 ebx_164
	*ebxOut = (word32) rbx
	return eax_159
// DataOut: eax ebx fs r10 r11 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> eax:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000410E90_exit:
// DataOut: eax ebx r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 rax:<invalid> rbp:rbp r15:r15 r13:r13 r12:r12 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_130
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_130 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:0x0000000000416DD1 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411334:
	rsi_130 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_130 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:(int64) esi r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_130, 0x0000000000000005)
	word64 rsp_84
	word64 r13_85
	word64 r10_86
	word32 esi_87
	word64 r12_88
	word64 r8_89
	word64 rbp_90
	word64 rbx_91
	byte SCZO_92
	word32 edi_93
	word32 ebp_94
	byte CZ_95
	byte C_96
	word64 rdi_97
	word64 rsi_98
	byte Z_99
	word32 r10d_100
	byte SZO_101
	byte S_102
	word32 ebx_103
	word64 rcx_104
	word32 edx_105
	word64 rdx_106
	word64 rax_107
	word64 r9_108
	word32 eax_109
	byte dl_110
	call error (retsize: 8; depth: 64)
		uses: bLoc37_65,bLoc38_64,C_80,CZ_22,dl,eax_78,ebp_25,ebx,edi_58,edx,esi_60,qwLoc08_4,qwLoc10_10,qwLoc18_15,qwLoc20_18,r10_6,r10d_7,r12_12,r13_67,r8_73,r9_71,rax_77,rbp_24,rbx_66,rcx_74,rdi_76,rdx_72,rsi_75,rsp_19,S_62,SCZO_59,SZO_79,Z_55
		defs: C_96,CZ_95,dl_110,eax_109,ebp_94,ebx_103,edi_93,edx_105,esi_87,r10_86,r10d_100,r12_88,r13_85,r8_89,r9_108,rax_107,rbp_90,rbx_91,rcx_104,rdi_97,rdx_106,rsi_98,rsp_84,S_102,SCZO_92,SZO_101,Z_99
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r13:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000038 r10:<invalid> r12:r8 rbp:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -56(fp):dl -55(fp):0x00 -32(fp):rbx -24(fp):rbp -16(fp):r12 -8(fp):r13



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & ebpOut, ptr64 & r8Out, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r8 r9
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411360_entry:
// DataOut: ebp edx fs r10 r11 r14b r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0040(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: fs r10 r11 r14d r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l000000000041138E_1:
// DataOut: fs r10 r11 r12 r14d r15 r8 rbp rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:rsi r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32) Local -0040(64)

l0000000000411392:
	word64 rsp_43
	word64 r15_44
	word64 r14_45
	word32 r14d_46
	word32 edx_47
	word64 r13_48
	word64 r12_49
	word64 rbp_50
	word64 rbx_51
	byte SCZO_52
	byte CZ_53
	word64 rax_54
	word64 rdi_55
	word64 rsi_56
	byte SZO_57
	byte C_58
	word64 rcx_59
	word64 r8_60
	byte Z_61
	word32 ecx_62
	word64 rdx_63
	word32 esi_64
	word32 edi_65
	word32 ebx_66
	word32 r9d_67
	word32 eax_70
	word32 ebp_71
	byte dl_72
	byte al_73
	byte S_74
	word32 r8d_75
	byte cl_76
	word64 r9_69
	byte bl_1016
	call __ctype_b_loc (retsize: 8; depth: 96)
		uses: bl_42,C_34,CZ_25,ebp_29,ebx_40,edx,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,r12_38,r13_36,r14_9,r14d_10,r15_31,r8,rax_26,rbp_28,rbx_41,rcx,rdi,rsi,rsp_23,SCZO_24,SZO_32,Z_33
		defs: al_73,bl_68,C_58,cl_76,CZ_53,dl_72,eax_70,ebp_71,ebx_66,ecx_62,edi_65,edx_47,esi_64,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_69,r9d_67,rax_54,rbp_50,rbx_51,rcx_59,rdi_55,rdx_63,rsi_56,rsp_43,S_74,SCZO_52,SZO_57,Z_61
	word64 rax_1009 = rbp_50
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:fp - 0x0000000000000040 rbp:rdi r15:<invalid> r13:rcx r12:r8 -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113AF:
	word32 r9d_94 = (word32) bl_1016
	r9_69 = DPB(r9_69, r9d_94, 0) (alias)
	*r9Out = r9_69
	branch (Mem0[qwLoc40 + 0x0000000000000001 + r9_69 * 0x0000000000000002:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl fs r10 r11 r12 r14d r15 r8 r9 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113A8:
	rax_1009 = rax_1009 + 0x0000000000000001
	bl_1016 = (byte) (word32) Mem0[rax_1009:byte] (alias)
// DataOut: bl fs r10 r11 r12 r14d r15 r8 rax rbp rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113BB:
	word32 eax_169
	branch bl_1016 != 0x2D l00000000004113D8
// DataOut: fs r10 r11 r12 r14d r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113D8:
	word32 ebp_302
	word64 rbp_301
	word32 edx_1006
	word64 rax_223 = __errno_location()
	Mem232[rax_223:word32] = 0x00000000
	word64 rsp_237
	word64 r15_238
	word64 r14_239
	word32 r14d_240
	word32 edx_241
	word64 r13_242
	word64 r12_243
	word64 rbp_244
	word64 rbx_245
	byte SCZO_246
	byte CZ_247
	word64 rax_248
	word64 rdi_249
	word64 rsi_250
	byte SZO_251
	byte C_252
	word64 rcx_253
	word64 r8_254
	byte Z_255
	word32 ecx_256
	word64 rdx_257
	word32 esi_258
	word32 edi_259
	word32 ebx_260
	word32 r9d_261
	byte bl_262
	word64 r9_263
	word32 eax_264
	word32 ebp_265
	byte dl_266
	byte al_267
	byte S_268
	word32 r8d_269
	byte cl_270
	call __strtoul_internal (retsize: 8; depth: 96)
		uses: al_225,bl_87,C_229,cl_76,CZ_53,dl_80,dwLoc50,eax_224,ebp_71,ebx_86,ecx_227,edi_65,edx_79,esi_234,qwLoc08_4,qwLoc10_7,qwLoc18_13,qwLoc20_16,qwLoc28_19,qwLoc30_22,qwLoc40,qwLoc50_236,r12_49,r13_48,r14_45,r14d_46,r15_44,r8_60,r8d_75,r9_95,r9d_94,rax_223,rbp_50,rbx_93,rcx_226,rdi_235,rdx_230,rsi_233,rsp_43,S_74,SCZO_99,SZO_228,Z_100
		defs: al_267,bl_262,C_252,cl_270,CZ_247,dl_266,eax_264,ebp_265,ebx_260,ecx_256,edi_259,edx_241,esi_258,r12_243,r13_242,r14_239,r14d_240,r15_238,r8_254,r8d_269,r9_263,r9d_261,rax_248,rbp_244,rbx_245,rcx_253,rdi_249,rdx_257,rsi_250,rsp_237,S_268,SCZO_246,SZO_251,Z_255
	word64 r14_271 = Mem232[r15_238:word64]
	word64 rbx_273 = rax_248
	word64 r8_276 = rax_223
	*r8Out = r8_276
	branch r14_271 == rbp_244 l00000000004114BF
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114BF:
	branch r12_243 == 0x0000000000000000 l00000000004113C0
// DataOut: fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114C8:
	word32 edx_985 = (word32) Mem232[rbp_244:byte]
	byte dl_988 = (byte) edx_985
	branch dl_988 == 0x00 l00000000004113C0
// DataOut: dl edx fs r10 r11 r12 r14 r15 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114D4:
	rbp_301 = 0x0000000000000000
	ebp_302 = 0x00000000 (alias)
	rbx_273 = 0x0000000000000001
	edx_1006 = (word32) (uint64) edx_985 (alias)
	branch strchr(r12_243, DPB(rsi_250, (int32) dl_988, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114F7:
// DataOut: fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041140C:
	word32 eax_944 = (word32) (uint64) Mem232[rax_248:word32]
	branch eax_944 != 0x00000000 l0000000000411440
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411440:
	rbp_301 = 0x0000000000000001
	ebp_302 = 0x00000001 (alias)
	branch eax_944 != 0x00000022 l00000000004113C0
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041144E:
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411413:
	rbp_301 = 0x0000000000000000
	ebp_302 = 0x00000000 (alias)
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411415:
	branch r12_243 == 0x0000000000000000 l0000000000411422
// DataOut: ebp fs r10 r11 r12 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041141A:
	word32 edx_955 = (word32) Mem232[rsi_250:byte]
	byte dl_958 = (byte) edx_955
	branch dl_958 != 0x00 l0000000000411450
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411450:
	edx_1006 = (word32) (uint64) edx_955 (alias)
	branch strchr(r12_243, DPB(rsi_250, (int32) dl_958, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx fs r10 r11 r12 r14 r15 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041146C:
	word32 eax_376
	word32 ecx_371
	word64 rsi_359 = 0x0000000000000030
	word32 edx_368 = (word32) (uint64) edx_1006
	branch strchr(r12_243, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411486:
	byte al_914 = (byte) (word32) Mem232[0x0000000000000031:byte]
	branch al_914 == 0x44 l000000000041173A
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411493:
	branch al_914 == 0x69 l0000000000411722
// DataOut: al dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411722:
	word64 rcx_938 = (uint64) (Mem232[0x0000000000000032:byte] == 0x42)
	eax_376 = 0x00000400 (alias)
	ecx_371 = rcx_938 + 0x0000000000000001 + rcx_938
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041149B:
	branch al_914 == 0x42 l000000000041173A
// DataOut: dl ebp fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041173A:
	ecx_371 = 0x00000002 (alias)
	eax_376 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114A3:
	ecx_371 = 0x00000001 (alias)
	eax_376 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114AD:
	word64 rdx_378 = (uint64) (edx_368 - 0x00000042)
	byte dl_381 = (byte) rdx_378
	branch dl_381 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004114B5:
	word32 edx_398
	word64 rdi_565
	switch (DPB(rdx_378, (word32) dl_381, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx fs r10 r11 r14 r15 r8 r9 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041152C:
	branch rbx_273 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411535:
	rbx_273 = rbx_273 * 0x0000000000000002
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041150E:
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041153C:
	branch rbx_273 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041154F:
	rbx_273 = rbx_273 << 0x0000000000000009
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411557:
	word64 rdi_812 = (int64) eax_376
	word64 rax_819 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_812)
	word32 esi_823 = 0x00000007
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041157E:
	word32 r8d_846
	branch rax_819 >=u rbx_273 l000000000041156F
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041156F:
	rbx_273 = rbx_273 *s rdi_812
	word64 r8_868
	*r8Out = 0x0000000000000000
	r8d_846 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411583:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_863
	*r8Out = 0x0000000000000001
	r8d_846 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411576:
	rsi_359 = (uint64) (esi_823 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_846) (alias)
	esi_823 = (word32) rsi_359 (alias)
	branch esi_823 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411592:
	word64 rdi_752 = (int64) eax_376
	word64 rax_759 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_752)
	word32 esi_763 = 0x00000008
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115BD:
	word32 r8d_786
	branch rax_759 >=u rbx_273 l00000000004115AA
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115AA:
	rbx_273 = rbx_273 *s rdi_752
	word64 r8_808
	*r8Out = 0x0000000000000000
	r8d_786 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115C2:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_803
	*r8Out = 0x0000000000000001
	r8d_786 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115B1:
	rsi_359 = (uint64) (esi_763 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_786) (alias)
	esi_763 = (word32) rsi_359 (alias)
	branch esi_763 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115D1:
	rsi_359 = (int64) eax_376
	word64 rax_699 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_703 = 0x00000004
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115E7:
	word32 r8d_726
	branch rax_699 <u rbx_273 l0000000000411749
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411749:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_750
	*r8Out = 0x0000000000000001
	r8d_726 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115F0:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_743
	*r8Out = 0x0000000000000000
	r8d_726 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115F7:
	edx_398 = (word32) (uint64) (edx_398 | r8d_726) (alias)
	edi_703 = (word32) (uint64) (edi_703 - 0x00000001) (alias)
	branch edi_703 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004115FF:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411604:
	rsi_359 = (int64) eax_376
	word64 rax_639 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_643 = 0x00000005
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041162F:
	word32 r8d_666
	branch rax_639 >=u rbx_273 l000000000041161C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041161C:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_688
	*r8Out = 0x0000000000000000
	r8d_666 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411634:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_683
	*r8Out = 0x0000000000000001
	r8d_666 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411623:
	edx_398 = (word32) (uint64) (edx_398 | r8d_666) (alias)
	edi_643 = (word32) (uint64) (edi_643 - 0x00000001) (alias)
	branch edi_643 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411643:
	rdi_565 = (int64) eax_376
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	word64 rax_612 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_565)
	branch rbx_273 >u rax_612 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041165E:
	rbx_273 = rbx_273 *s rdi_565
	branch rax_612 <u rbx_273 l000000000041177B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041177B:
	edx_398 = 0x00000001 (alias)
	rbx_273 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411676:
	rdi_565 = (int64) eax_376
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	branch rbx_273 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_565) l000000000041166B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041166B:
	rsi_359 = 0xFFFFFFFFFFFFFFFF
	rbx_273 = rbx_273 *s rdi_565
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041168D:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116F3:
	rsi_359 = (int64) eax_376
	word64 rax_512 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_359)
	word32 edi_516 = 0x00000003
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411709:
	word32 r8d_539
	branch rax_512 <u rbx_273 l000000000041176C
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041176C:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_563
	*r8Out = 0x0000000000000001
	r8d_539 = 0x00000001 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041170E:
	rbx_273 = rbx_273 *s rsi_359
	word64 r8_556
	*r8Out = 0x0000000000000000
	r8d_539 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r8d r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411715:
	edx_398 = (word32) (uint64) (edx_398 | r8d_539) (alias)
	edi_516 = (word32) (uint64) (edi_516 - 0x00000001) (alias)
	branch edi_516 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx fs r10 r11 r14 r15 r8 r9 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041171D:
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041169A:
	word64 rdi_445 = (int64) eax_376
	word64 rax_452 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_445)
	word32 esi_456 = 0x00000006
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116C5:
	word32 r8d_479
	branch rax_452 >=u rbx_273 l00000000004116B2
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116B2:
	rbx_273 = rbx_273 *s rdi_445
	word64 r8_501
	*r8Out = 0x0000000000000000
	r8d_479 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116CA:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	word64 r8_496
	*r8Out = 0x0000000000000001
	r8d_479 = 0x00000001 (alias)
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r8d r9 rax rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116B9:
	rsi_359 = (uint64) (esi_456 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_479) (alias)
	esi_456 = (word32) rsi_359 (alias)
	branch esi_456 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi fs r10 r11 r14 r15 r8 r9 rax rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411500:
	Mem343[rbp_301:word64] = rbx_273
	eax_169 = (word32) (uint64) ((word32) (uint64) ebp_302 | 0x00000002) (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116D9:
	branch rbx_273 >u 0x00000000FFFFFFFF l000000000041175B
// DataOut: ebp ecx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l000000000041175B:
	rbx_273 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004116E8:
	rbx_273 = rbx_273 << 0x000000000000000A
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx fs r10 r11 r14 r15 r8 r9 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:0x00000000FFFFFFFF rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:0xFFFFFFFF cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411510:
	rbp_301 = (uint64) (ebp_302 | edx_398)
	Mem413[r15_238:word64] = r14_271 + (int64) ecx_371
	ebp_302 = (word32) rbp_301 (alias)
	word32 eax_411 = (word32) (uint64) ((word32) (uint64) ebp_302 | 0x00000002)
	branch Mem413[rsi_359:byte] == 0x00 l0000000000411527
// DataOut: eax ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411524_1:
	ebp_302 = eax_411
	rbp_301 = DPB(rbp_301, eax_411, 0) (alias)
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411527:
// DataOut: ebp fs r10 r11 r8 r9 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l0000000000411422:
	Mem303[rbp_301:word64] = rbx_273
	word32 ebp_313
	*ebpOut = (word32) rbp
	return (word32) (uint64) ebp_302
// DataOut: eax ebp fs r10 r11 r14b r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004113C0:
	eax_169 = 0x00000004 (alias)
// DataOut: eax fs r10 r11 r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0010(8) Local -0028(32)

l00000000004113C5:
	word32 ebp_176
	*ebpOut = (word32) rbp
	return eax_169
// DataOut: eax ebp fs r10 r11 r14b r8 r9 xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411360_exit:
// DataOut: eax ebp r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp r14:r14 rax:<invalid> rbp:rbp r15:r15 r13:r13 r12:r12 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rcx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -80(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem78[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	word64 rax_24 = (uint64) edi
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_24 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_31 = Mem0[rsi:word64]
	word64 rdi_32 = 0x00000000004137B1
	word64 rcx_34 = 0x000000000000000A
	word64 rsi_35 = rdx_31
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi

l00000000004117D8:
	branch rcx_34 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_82:byte] - Mem0[rdi_81:byte]) (alias)
	rsi_35 = rsi_82 + 0x0000000000000001
	rdi_32 = rdi_81 + 0x0000000000000001
	rcx_34 = rcx_34 - 0x0000000000000001
	word64 rdi_81 = rdi_32
	word64 rsi_82 = rsi_35
	branch Mem0[rsi_82:byte] != Mem0[rdi_81:byte] l00000000004117D8
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rcx rdi rsi rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117DC:
	word64 rsp_53
	byte SCZO_54
	word32 edi_55
	byte SZO_56
	byte C_57
	byte Z_58
	word64 rax_59
	word64 rsi_60
	word64 rdx_61
	word64 rdi_62
	word64 rcx_63
	word32 eax_64
	call freecon (retsize: 8; depth: 8)
		uses: C_48,eax_25,edi_50,rax_24,rcx_44,rdi_52,rdx_31,rsi_46,rsp_2,SCZO_51,SZO_49,Z_47
		defs: C_57,eax_64,edi_55,rax_59,rcx_63,rdi_62,rdx_61,rsi_60,rsp_53,SCZO_54,SZO_56,Z_58
	Mem66[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

l00000000004117BF:
	return eax_16
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:v3 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411820_entry:
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_7
	word64 rbx_8
	word64 rsi_9
	word32 edi_10
	word32 eax_11
	word64 rdi_12
	byte SCZO_13
	byte SZO_14
	byte C_15
	byte Z_16
	word64 rax_17
	word64 rdx_18
	word32 ecx_19
	word64 rcx_20
	call getfilecon (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rsi,rsp_2
		defs: C_15,eax_11,ecx_19,edi_10,rax_17,rbx_8,rcx_20,rdi_12,rdx_18,rsi_9,rsp_7,SCZO_13,SZO_14,Z_16
	word32 edi_23 = (word32) (uint64) eax_11
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_8, edi_23)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:rsi rdi:(uint64) eax -8(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi rsp
fn0000000000411840_entry:
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_7
	word64 rbx_8
	word64 rsi_9
	word32 edi_10
	word32 eax_11
	word64 rdi_12
	call lgetfilecon (retsize: 8; depth: 16)
		uses: qwLoc08_4,rbx_6,rsi,rsp_2
		defs: eax_11,edi_10,rbx_8,rdi_12,rsi_9,rsp_7
	word32 edi_15 = (word32) (uint64) eax_11
// DataOut: edi fs r10 r11 r12 r14 r15 r8 r9 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_8, edi_15)
// DataOut: eax fs r10 r11 r12 r14 r15 r8 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rsi:rsi rdi:(uint64) eax -8(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bl bx dh dl dx eax ebx edx esi rax rbx rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411880_entry:
// DataOut: r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 r12_14
	word64 rbp_15
	word64 rdi_16
	word64 rbx_17
	word32 ebx_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 32)
		uses: qwLoc08_4,qwLoc10_7,qwLoc18_12,r12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_18,r12_14,r13_28,r8_27,rax_19,rbp_15,rbx_17,rdi_16,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_32 = (word32) (uint64) Mem0[rbp_15:word32]
	word64 rsi_35
	word32 eax_36 = fn0000000000411D30(rbp_15, r8_27, r13_28, out rsi_35)
	branch (word32) (uint64) (ebx_32 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004118C0:
	branch eax_36 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118C9:
	Mem102[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118A6:
	branch eax_36 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118AA:
	branch rax_19 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64)

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:0x00000000FFFFFFFF rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbp:rdi rbx:<invalid> rdi:rdi r12:rax dl:Test(NE,Z) eax:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rbp:rbp rbx:rbx rdi:rdi r12:r12 dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> eax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, selector fs, ptr64 & r10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 rbp rsi
// LiveOut: r10 rax
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi r10 r10b r10d r10w rax rbp rcx rdi rdx rsi si sil
// Preserved: r12 r13 r14 r15 rbp rbx rsp
fn0000000000411900_entry:
// DataOut: fs r10 r12d r8 rbp rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000008
	qwLoc08 = r15
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000010
	qwLoc10 = r14
	rsp = fp - 0x0000000000000018
	qwLoc18 = r13
	rsp = fp - 0x0000000000000020
	qwLoc20 = r12
	rsp = fp - 0x0000000000000028
	qwLoc28 = rbp
	rsp = fp - 0x0000000000000030
	qwLoc30 = rbx
	rsp = fp - 0x00000000000000D8
	rax = Mem0[fs:0x00000028:word64]
	qwLoc40 = rax
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 224)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	C = false
	rbx = 0x0000000000000000
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411949:
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C52:
	rdi = rax
	eax = strlen(rdi)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119EF:
	rax = 0x0000000000000007
	r12 = 0x0000000000000008
	r15 = 0x0000000000416FF3
// DataOut: fs r10 r12 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	r13 = 0x0000000000000001
	dwLocD0 = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	dwLocD0 = 0x00000000
// DataOut: fs r10 r12 r13 r14 r15 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> eax:<invalid> r12:<invalid> r13:0x0000000000000001 -208(fp):0x00000001 -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: fs r10 r12 r13 r14 r15 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(32)

l0000000000411CF2:
	r14 = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) dwLocD0
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r10 r13 r14 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:rbp + 0x000000000000000E rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r10 r13 r14 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A4D:
	r13 = r13 + rbp
	rax = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = 0x0000000072616863
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	eax = open(rdi, 0x0000000000020000)
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r10 r12d r13 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: fs r10 r12d r13 r14 r15 r8 rbp rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000020000 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C20:
	rdi = (uint64) r12d
	eax = close(rdi)
// DataOut: fs r10 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411AA2:
	r12 = fp - 0x00000000000000B8
	qwLocD0 = 0x0000000000000000
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:0x0000000000413A21 -208(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 224)
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411ADF:
	rsi = r15
	eax = ungetc(rdi, rsi)
	rcx = fp - 0x0000000000000078
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = fp - 0x00000000000000B8
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 224)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411B07:
	rdx = fp - 0x00000000000000B8
// DataOut: fs r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B21:
	rcx = (uint64) eax
	r10 = fp - 0x0000000000000078
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B37_1:
	rdx = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - (fp - 0x00000000000000B8)
	SCZO = cond(rdx)
// DataOut: fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:fp - 0x0000000000000078 al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B66_1:
	eax = ecx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r14 r15 r8 rbp rbx rcx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B6D_1:
	r10 = rcx
// DataOut: al fs r10 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(0)

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = fp - 0x0000000000000078
	r10 = r10 - 0x03 - C
	r10 = r10 - (fp - 0x0000000000000078)
	SCZO = cond(qwLocD0 - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r14 r15 r8 rax rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411CBC:
	rax = rax + qwLocD0
	SCZO = cond(rax)
	rdi = r14
	qwLocC0 = r10
	qwLocC8 = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	qwLocD0 = rcx
	rax = realloc(rdi, rsi)
	r10 = qwLocC0
	r13 = rax
	rdx = qwLocC8
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	qwLocC0 = rdx
	qwLocC8 = r10
	qwLocD0 = rcx
	rax = malloc(rdi)
	r10 = qwLocC8
	rdx = qwLocC0
	r13 = rax
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: fs r10 r13 r14 r15 r8 rbp rbx rdx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411D02:
	rdi = r14
	r14 = 0x0000000000416919
	free(rdi)
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411BC1:
	r14 = qwLocD0
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = fp - 0x00000000000000B8
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, fp - 0x00000000000000B8)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = fp - 0x0000000000000078
	r14 = r13
	rax = strcpy(rdi, fp - 0x0000000000000078)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r10 r13 r14 r15 r8 rax rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 224)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)

l0000000000411C9C:
	rdi = r15
	eax = fn0000000000411D30(rdi, r8, r13, out rsi)
	rax = qwLocD0
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: fs r10 r14 r8 rax rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C28:
	r14 = 0x0000000000416919
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
// DataOut: fs r10 r14 r8 rbp rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl fs r10 r14 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411973:
	rsi = r14
	rdi = rbx
	eax = strcmp(rdi, rsi)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l0000000000411950:
	rdi = r14
	eax = strlen(rdi)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	eax = strlen(rdi)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: fs r10 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041198F:
	rdi = r14
	eax = strlen(rdi)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r10 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r10 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r10 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64)

l00000000004119A8:
	rcx = qwLoc40
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: fs r10 r8 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> eax:0x00416FFC rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:0xFC -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32)

l0000000000411CFD:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l00000000004119C2:
	rsp = fp - 0x0000000000000030
	SCZO = cond(fp - 0x0000000000000030)
	rbx = qwLoc30
	rsp = fp - 0x0000000000000028
	rbp = qwLoc28
	rsp = fp - 0x0000000000000020
	r12 = qwLoc20
	rsp = fp - 0x0000000000000018
	r13 = qwLoc18
	rsp = fp - 0x0000000000000010
	r14 = qwLoc10
	rsp = fp - 0x0000000000000008
	r15 = qwLoc08
	rsp = fp
	return rax
// DataOut: fs r10 r12d r8 rax xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

fn0000000000411900_exit:
	use r10 (=> r10Out)
// DataOut: r10 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r14:r14 rbx:rbx ebp:<invalid> rcx:<invalid> rbp:rbp r12:r12 r13:r13 r15:r15 rsi:<invalid> eax:<invalid> rdx:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15

l0000000000411C14:
// DataOut: edi fs r10 r13 r14 r15 r8 rbp rbx rdi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D8 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:fp - 0x00000000000000B8 r13:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -208(fp):<invalid> -200(fp):<invalid> -192(fp):<invalid> -64(fp):<invalid> -48(fp):rbx -40(fp):rbp -32(fp):r12 -24(fp):r13 -16(fp):r14 -8(fp):r15
// LocalsOut: fp(64) Local -0020(32) Local -0040(64) Local -00D0(64)



word32 fn0000000000411D30(word64 rdi, word64 r8, word64 r13, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r8 rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: r12 rbp rbx rdi rsp
fn0000000000411D30_entry:
	*rsiOut = rsi
// DataOut: ebx fs r10 r13 r14 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word32 eax_13 = fileno(rdi)
	word64 rdi_115 = rdi
	branch eax_13 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r10 r13 r14 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D43:
	word64 rsp_74
	word64 r12_75
	word64 rbp_76
	word64 rdi_78
	byte SZO_80
	byte C_81
	byte S_82
	byte Z_83
	word64 rax_84
	word32 r12d_85
	word32 esi_88
	word64 rsi_89
	word32 edx_90
	word64 rdx_91
	word32 edi_92
	byte SCZO_93
	word64 r13_120
	word64 r8_121
	word32 eax_127
	word64 rbx_111
	call __freading (retsize: 8; depth: 32)
		uses: C_18,eax_13,edi_20,edx,esi,qwLoc08_4,qwLoc10_7,qwLoc18_10,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_19,rdx,rsi,rsp_8,S_17,SCZO,SZO_16,Z
		defs: C_81,eax_79,edi_92,edx_90,esi_88,r12_75,r12d_85,r13_87,r8_86,rax_84,rbp_76,rbx_77,rdi_78,rdx_91,rsi_89,rsp_74,S_82,SCZO_93,SZO_80,Z_83
	branch eax_127 != 0x00000000 l0000000000411D80
// DataOut: eax fs r10 r13 r14 r8 rbx xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D80:
	word32 eax_161 = fileno(rbx_111)
	word64 rsp_169
	word64 r12_170
	word64 rbp_171
	word64 rdi_173
	byte SZO_175
	byte C_176
	byte S_177
	byte Z_178
	word64 rax_179
	word32 r12d_180
	word32 esi_183
	word64 rsi_184
	word32 edx_185
	word64 rdx_186
	word32 edi_187
	byte SCZO_188
	call lseek (retsize: 8; depth: 32)
		uses: C_166,eax_161,edi_92,edx_90,esi_164,qwLoc08_4,qwLoc10_7,qwLoc18_10,r12_75,r12d_85,r13_87,r8_86,rax_162,rbp_76,rbx_77,rdi_168,rdx_167,rsi_163,rsp_74,S_82,SCZO_93,SZO_165,Z_95
		defs: C_176,eax_174,edi_187,edx_185,esi_183,r12_170,r12d_180,r13_182,r8_181,rax_179,rbp_171,rbx_172,rdi_173,rdx_186,rsi_184,rsp_169,S_177,SCZO_188,SZO_175,Z_178
	branch rax_179 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r10 r13 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D4C:
	word64 rsi_133
	branch fn0000000000411DB0(eax_127, rbx_111, out rsi_133) == 0x00000000 l0000000000411D9C
// DataOut: fs r10 r13 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9C:
	rdi_115 = rbx_111
// DataOut: fs r10 r14 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D9F:
	return fclose(rdi_115)
// DataOut: eax ebx fs r10 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

l0000000000411D58:
	__errno_location()
	word32 r12d_141 = (word32) (uint64) Mem0[r8_121:word32]
	word32 eax_144 = fclose(rbx_111)
	branch r12d_141 == 0x00000000 l0000000000411D79
// DataOut: eax fs r10 r12d r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rsi:<invalid> rdx:<invalid> rax:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D70:
	Mem157[r13_120:word32] = r12d_141
	eax_144 = 0xFFFFFFFF (alias)
// DataOut: eax fs r10 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12
// LocalsOut: fp(64) Local -0018(32)

l0000000000411D79:
	return eax_144
// DataOut: eax ebx fs r10 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi eax:<invalid> rdi:rdi rax:<invalid> r12:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12

fn0000000000411D30_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx eax:<invalid> rdi:rdi rbp:rbp r12:r12 rax:<invalid> rsi:<invalid> rdx:<invalid> -24(fp):rbx -16(fp):rbp -8(fp):r12



word32 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rsi
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rbx rdi rsp
fn0000000000411DB0_entry:
	*rsiOut = rsi
// DataOut: eax fs r10 r13 r14 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	word64 rbx_33 = rdi
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r10 r13 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411DB9:
	word64 rsp_39
	word64 rdi_40
	byte SZO_41
	byte C_42
	byte Z_44
	word32 eax_45
	word32 edx_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	call __freading (retsize: 8; depth: 16)
		uses: C_5,eax,edx,esi,qwLoc08_8,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_42,eax_45,edx_46,esi_48,rbx_43,rdi_40,rdx_47,rsi_49,rsp_39,SZO_41,Z_44
	branch eax_45 != 0x00000000 l0000000000411DD0
// DataOut: fs r10 r13 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DD0:
	branch (Mem0[rbx_33:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: fs r10 r13 r14 r8 rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DD8:
	word64 rsi_64
	*rsiOut = fn0000000000411DF0(0x00000001, rbx_33)
	return fflush(rbx_33)
// DataOut: eax fs r10 r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

l0000000000411DC2:
	return fflush(rbx_33)
// DataOut: eax fs r10 r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rbx:rdi -8(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rdi:rdi eax:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: rsi
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi rax rdi rdx rsi si sil
// Preserved: rbx rsp
fn0000000000411DF0_entry:
// DataOut: edx fs r10 r13 r14 r8 rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	word64 rax_9 = Mem0[rdi + 0x0000000000000008:word64]
	branch Mem0[rdi + 0x0000000000000010:word64] == rax_9 l0000000000411E10
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	branch Mem0[rdi + 0x0000000000000028:word64] != Mem0[rdi + 0x0000000000000020:word64] l0000000000411E02
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: edx fs r10 r13 r14 r8 rbx rdi rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word32 eax_61 = fileno(rdi)
	word64 rsp_66
	word64 rbx_67
	word64 rdi_68
	byte SCZO_69
	word64 rax_70
	byte Z_71
	word32 edx_72
	word64 rsi_73
	word32 eax_74
	word64 rdx_75
	word32 edi_76
	byte SZO_77
	byte C_78
	call lseek (retsize: 8; depth: 32)
		uses: C,dwLoc0C_59,eax_61,edi,edx,qwLoc08_4,qwLoc18_60,rax_62,rbx_6,rdi_65,rdx_63,rsi_64,rsp_7,SCZO_57,SZO,Z_58
		defs: C_78,eax_74,edi_76,edx_72,rax_70,rbx_67,rdi_68,rdx_75,rsi_73,rsp_66,SCZO_69,SZO_77,Z_71
	branch rax_70 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: fs r10 r13 r14 r8 rax rbx rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem89[rbx_67:word32] = Mem0[rbx_67:word32] & 0xFFFFFFEF
	Mem91[rbx_67 + 0x0000000000000090:word64] = rax_70
// DataOut: fs r10 r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	return rsi_73
// DataOut: fs r10 r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx

l0000000000411E02:
	word64 rsp_41
	word64 rbx_42
	word64 rdi_43
	byte SCZO_44
	word64 rax_45
	byte Z_46
	word32 edx_47
	word64 rsi_48
	word32 eax_49
	word64 rdx_50
	word32 edi_51
	byte SZO_52
	byte C_53
	call fseeko (retsize: 8; depth: 8)
		uses: C,dwLoc0C,eax,edi,edx,qwLoc08_4,qwLoc18,rax_9,rbx_30,rdi_29,rdx,rsi,rsp_31,SCZO_28,SZO,Z_11
		defs: C_53,eax_49,edi_51,edx_47,rax_45,rbx_42,rdi_43,rdx_50,rsi_48,rsp_41,SCZO_44,SZO_52,Z_46
	return rsi_48
// DataOut: fs r10 r13 r14 r8 rsi xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rbx:rdi rax:<invalid> -8(fp):rbx

fn0000000000411DF0_exit:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rbx:rbx rax:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> -24(fp):rsi -12(fp):edx -8(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: ebx fs r10 r11 r15 r9 rax rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
	word64 rsp_10
	word64 rax_11
	byte SZO_12
	byte C_13
	byte Z_14
	word64 rdx_15
	word32 esi_16
	word64 rsi_17
	word32 edx_18
	call __cxa_atexit (retsize: 8; depth: 8)
		uses: C_9,esi_7,rax_2,rsi_6,rsp_1,SZO_8,Z_4
		defs: C_13,edx_18,esi_16,rax_11,rdx_15,rsi_17,rsp_10,SZO_12,Z_14
	return
// DataOut: ebx fs r10 r11 r15 r9 rbp xmm0 xmm1 xmm2 xmm3
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



